<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL 性能优化</title>
      <link href="/a2aedf2f.html"/>
      <url>/a2aedf2f.html</url>
      
        <content type="html"><![CDATA[<h1 id="设计索引原则"><a href="#设计索引原则" class="headerlink" title="设计索引原则"></a>设计索引原则</h1><table><thead><tr><th>原则</th><th>说明</th></tr></thead><tbody><tr><td><strong>1. 优先选择高选择性字段建索引</strong></td><td>选择性 &#x3D; 不同值的数量 &#x2F; 总记录数。选择性越高（越稀疏），过滤效果越好。例如：身份证号、手机号比性别更适合建索引。</td></tr><tr><td><strong>2. 频繁作为查询条件的字段应建索引</strong></td><td>对 <code>WHERE</code> 子句中经常使用的字段建索引可显著提升查询效率。</td></tr><tr><td><strong>3. 出现在 <code>JOIN</code> &#x2F; <code>ORDER BY</code> &#x2F; <code>GROUP BY</code> 的字段需特别关注</strong></td><td>JOIN 的连接字段、排序字段、分组字段需要考虑建立索引以避免全表扫描、文件排序等性能瓶颈。</td></tr><tr><td><strong>4. 覆盖索引优先</strong></td><td>通过建立包含查询字段的联合索引，可以避免回表，提高查询性能。</td></tr><tr><td><strong>5. 索引列顺序要符合查询习惯（最左前缀原则）</strong></td><td>复合索引遵循最左匹配原则，索引列的顺序要匹配常用查询的字段顺序。</td></tr><tr><td><strong>6. 控制索引数量，避免冗余</strong></td><td>每个索引会占用空间、影响写性能（INSERT&#x2F;UPDATE&#x2F;DELETE 时都要维护索引）。要权衡读取与写入性能。</td></tr><tr><td><strong>7. 避免在频繁更新的字段上建立索引</strong></td><td>频繁变更的字段若被索引，会带来较大的维护成本。</td></tr><tr><td><strong>8. 避免在表达式、函数结果上建索引</strong></td><td>如 <code>WHERE YEAR(birthday) = 1990</code> 这样的查询无法命中索引。应改写为 <code>birthday BETWEEN &#39;1990-01-01&#39; AND &#39;1990-12-31&#39;</code>。</td></tr></tbody></table><p>注：</p><ul><li>选择性越高（基数越高），索引过滤数据的能力越强，效果越好</li><li>选择合适的索引类型、合适的索引长度</li><li>创建过多索引，占用磁盘空间，影响写入性能，因为数据新增、删除也要维护索引</li><li>数据量大小，小表无需索引（全表扫描反而更快）</li><li>主键 &#x2F; 唯一约束设计，主键默认是聚簇索引（InnoDB），要选择稳定、唯一、短小的字段作为主键。</li><li>DBA 工具或慢查询日志发现热点查询，针对性优化</li><li>设计复合索引时，要考虑“选择性最高的字段靠前”，以提升过滤效率</li><li>删除冗余索引，减少优化器的选择干扰</li></ul><h2 id="区分度不高的字段是否该创建索引"><a href="#区分度不高的字段是否该创建索引" class="headerlink" title="区分度不高的字段是否该创建索引"></a>区分度不高的字段是否该创建索引</h2><p>推荐场景：</p><ul><li>可与高区分度字段构成联合索引，可以覆盖索引</li><li>可用于排序 &#x2F; 分组 &#x2F; 连接</li><li>用于频繁过滤的字段，如<code>is_deleted = 1</code>，<code>schedule_done = 0</code> 若系统频繁查询未删除数据或查询未运行的定时任务，建索引可使查询更快。</li></ul><p>不推荐场景：</p><ul><li>单独字段、选择性极低、数据量小、参与的查询极少</li><li>低区分度单字段索引 + 查询结果占数据大多数：索引命中后仍需大量回表，性能无提升甚至更差。</li></ul><h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><h2 id="like模糊查询如何优化"><a href="#like模糊查询如何优化" class="headerlink" title="like模糊查询如何优化"></a>like模糊查询如何优化</h2><ul><li>避免开头使用 %</li><li>利用覆盖索引</li><li>反向索引（逆序存储字段），需额外存储字段和维护</li><li>外部搜索引擎（Elasticsearch）</li></ul><p>反向索引实现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 新字段</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">SET</span> name_reverse <span class="operator">=</span> REVERSE(name);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询 &quot;%abc&quot;</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">WHERE</span> name_reverse <span class="keyword">LIKE</span> REVERSE(<span class="string">&#x27;abc&#x27;</span>) <span class="operator">+</span> <span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="如果必须用join，可以从哪些方面优化"><a href="#如果必须用join，可以从哪些方面优化" class="headerlink" title="如果必须用join，可以从哪些方面优化"></a>如果必须用join，可以从哪些方面优化</h2><ol><li>联结条件使用索引</li><li>小表驱动大表</li><li>数据过滤后再join</li><li>优先使用内连接（仅保留共有数据）</li></ol><h3 id="file-sort-优化"><a href="#file-sort-优化" class="headerlink" title="file sort 优化"></a>file sort 优化</h3><table><thead><tr><th>优化点</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>利用索引覆盖排序</td><td>建立索引覆盖 <code>ORDER BY</code> 字段，避免 File Sort</td><td><code>CREATE INDEX idx_col ON t(col);</code></td></tr><tr><td>避免多列排序导致 File Sort</td><td>多列排序时索引必须覆盖所有排序字段及顺序</td><td><code>ORDER BY col1 ASC, col2 DESC</code> 必须对应索引顺序</td></tr><tr><td>调整 <code>sort_buffer_size</code></td><td>增大排序缓存减少磁盘排序</td><td><code>SET SESSION sort_buffer_size=4M;</code></td></tr><tr><td>减少排序数据量</td><td>加限制条件减少待排序行数</td><td>增加 <code>WHERE</code> 限制或 <code>LIMIT</code></td></tr><tr><td>避免复杂表达式排序</td><td>复杂表达式不能使用索引排序</td><td>尽量 <code>ORDER BY</code> 简单列</td></tr><tr><td>分页时避免大 OFFSET</td><td>大 OFFSET 导致大量扫描和排序</td><td>用索引条件分页代替 OFFSET</td></tr><tr><td>利用覆盖索引避免回表</td><td>只读取索引列避免访问数据行，提升效率</td><td>选择索引列作为查询字段</td></tr></tbody></table><h1 id="执行计划"><a href="#执行计划" class="headerlink" title="执行计划"></a>执行计划</h1><ul><li>执行计划：是 MySQL 优化器根据查询语句、表结构、索引、统计信息等因素，计算出的它认为最优的查询执行路径的详细描述。</li><li>优化器：MySQL 内置的组件，负责在众多可能的执行路径中选择它预估成本最低的一个。</li><li>成本：优化器基于 CPU、内存、磁盘 I&#x2F;O 等操作的预估开销来计算不同执行路径的成本。</li></ul><h2 id="核心字段解析"><a href="#核心字段解析" class="headerlink" title="核心字段解析"></a>核心字段解析</h2><table><thead><tr><th>字段名</th><th>含义</th></tr></thead><tbody><tr><td><strong>id</strong></td><td>查询中每个子查询&#x2F;操作的标识号，越大优先执行（可用作执行顺序参考）</td></tr><tr><td><strong><code>select_type</code></strong></td><td>查询类型（<code>SIMPLE</code>, <code>PRIMARY</code>, <code>SUBQUERY</code>, <code>DERIVED</code>, 等）</td></tr><tr><td><strong>table</strong></td><td>当前执行的表或派生表（如 <code>&lt;derived2&gt;</code>）</td></tr><tr><td><strong>partitions</strong></td><td>使用的分区（如启用了表分区）</td></tr><tr><td><strong><code>type</code></strong></td><td>连接类型，性能从好到差为：<code>system</code> &gt; <code>const</code> &gt; <code>eq_ref</code> &gt; <code>ref</code> &gt; <code>range</code> &gt; <code>index</code> &gt; <code>ALL</code></td></tr><tr><td><strong><code>possible_keys</code></strong></td><td>可能用到的索引</td></tr><tr><td><strong><code>key</code></strong></td><td>实际使用的索引</td></tr><tr><td><strong><code>key_len</code></strong></td><td>索引长度（表示使用了索引的哪些列），可以判断使用了复合索引的多少部分（前缀）</td></tr><tr><td><strong>ref</strong></td><td>哪些列或常量与索引列做比较</td></tr><tr><td><strong>rows</strong></td><td>预估要扫描的行数</td></tr><tr><td><strong>filtered</strong></td><td>过滤率（0~100%），结合 <code>rows</code> 可估算最终结果数</td></tr><tr><td><strong><code>Extra</code></strong></td><td>执行中额外信息（重点分析指标）</td></tr></tbody></table><h3 id="部分字段汇总"><a href="#部分字段汇总" class="headerlink" title="部分字段汇总"></a>部分字段汇总</h3><h4 id="id"><a href="#id" class="headerlink" title="id"></a>id</h4><p>标识 SELECT 查询的序列号</p><ul><li>如果查询包含子查询或 UNION，id 会反映执行顺序。id 越大，执行优先级越高；</li><li>id 相同，执行顺序由上到下。</li><li>id 为 NULL 表示是 UNION 结果或派生表。</li></ul><h4 id="rows-预估行数-重要！"><a href="#rows-预估行数-重要！" class="headerlink" title="rows  (预估行数 - 重要！)"></a>rows  (预估行数 - 重要！)</h4><p>MySQL 优化器预估执行该步骤需要扫描的行数（不是精确值，基于统计信息）。</p><p>这个值对于判断效率非常关键。理想情况下，这个值应尽可能小。与 filtered 结合使用。</p><h4 id="filtered-百分比-重要！"><a href="#filtered-百分比-重要！" class="headerlink" title="filtered (百分比 - 重要！)"></a>filtered (百分比 - 重要！)</h4><p>表示存储引擎返回的数据在 rows 行中，经过 WHERE 条件过滤后，预估剩余行数的百分比。值范围 0.00 - 100.00。</p><p>例如：</p><ul><li><p>rows&#x3D;1000, filtered&#x3D;10.00，表示优化器预估存储引擎返回 1000 行，在 Server 层应用 WHERE 条件后大约剩下 100 行。</p></li><li><p>EXPLAIN FORMAT&#x3D;JSON 会直接给出 filtered 对应的实际预估行数 (rows_examined_per_scan * filtered &#x2F; 100)。</p></li></ul><h3 id="id-与-select-type-的配合"><a href="#id-与-select-type-的配合" class="headerlink" title="id 与 select_type 的配合"></a>id 与 select_type 的配合</h3><ul><li>查询的类型</li></ul><table><thead><tr><th>select_type</th><th>场景</th></tr></thead><tbody><tr><td>SIMPLE</td><td>单表或未嵌套查询、无子查询</td></tr><tr><td>PRIMARY</td><td>最外层 SELECT</td></tr><tr><td>SUBQUERY</td><td>子查询中 SELECT</td></tr><tr><td>DERIVED</td><td>FROM 子句中的子查询（派生表）</td></tr><tr><td>UNION</td><td>UNION 中的第二个及以后 SELECT</td></tr><tr><td>UNION RESULT</td><td>UNION 的结果</td></tr><tr><td>DEPENDENT</td><td>依赖外层结果的子查询</td></tr><tr><td>DEPENDENT SUBQUERY</td><td>依赖于外层查询结果的子查询（通常性能较差）</td></tr><tr><td>MATERIALIZED</td><td>对子查询物化处理，将子查询结果物化为临时表以提高性能</td></tr></tbody></table><p>拓展：</p><p>MySQL 8.0.16+ 开始，在执行计划中正式引入 MATERIALIZED 作为 select_type 的一种类型，用于标识：</p><ul><li>子查询被优化为物化（生成临时表）。</li><li>常见于 IN (SELECT …) 或 EXISTS 的场景中。</li></ul><h3 id="type-—-表访问方式的重要排序"><a href="#type-—-表访问方式的重要排序" class="headerlink" title="type — 表访问方式的重要排序"></a>type — 表访问方式的重要排序</h3><ul><li>MySQL 在表中查找行的方式</li></ul><p>性能从最优到最差大致为：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; </span><br><span class="line">unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</span><br></pre></td></tr></table></figure><table><thead><tr><th>type</th><th>含义及性能解读</th></tr></thead><tbody><tr><td><code>system</code></td><td>表只有一行（常用于 <code>DUAL</code>）</td></tr><tr><td><code>const</code></td><td>主键或唯一索引匹配常量值，最多一行</td></tr><tr><td><code>eq_ref</code></td><td>连接操作中，使用唯一索引匹配（如主键连接）</td></tr><tr><td><code>ref</code></td><td>非唯一索引的等值匹配， 可能匹配多个值</td></tr><tr><td><code>index_merge</code></td><td>多索引合并，非唯一索引匹配多个值</td></tr><tr><td><code>range</code></td><td>范围扫描索引（如 <code>BETWEEN</code>、<code>&gt;</code>, <code>&lt;</code>）</td></tr><tr><td><code>index</code></td><td>全索引扫描（未使用 WHERE 过滤）</td></tr><tr><td><code>ALL</code></td><td>全表扫描（慢，需优化）</td></tr></tbody></table><p>拓展</p><ul><li><p>eq_ref： 在连接查询中，对于前表的每一行，从当前表中使用主键或唯一非空索引查找唯一一行。常见于 PRIMARY KEY 或 UNIQUE NOT<br>NULL 索引的等值连接 (table.column &#x3D; other_table.column)。</p></li><li><p>ref： 使用非唯一索引进行等值查找 (key_column &#x3D; expr)，可能返回多行。</p></li><li><p>ref_or_null： 类似 ref，但额外处理 IS NULL。</p></li><li><p>range： 使用索引检索给定范围的行 (BETWEEN, IN, &gt;, &lt; 等)。</p></li><li><p>index： 全索引扫描。扫描整个索引树（比全表扫描快，因为索引文件通常比数据文件小）。通常发生在只需要从索引中获取数据，或者需要按索引顺序读取时。</p></li><li><p>ALL： 全表扫描。遍历整张表查找匹配行。最差情况，需极力避免，尤其在大表上。如果 WHERE 条件没有可用索引，或者优化器判断全表扫描成本更低（表很小）时会发生。</p></li></ul><h3 id="key-len"><a href="#key-len" class="headerlink" title="key_len"></a>key_len</h3><p>使用的索引的长度（字节数）。可以判断使用了复合索引的多少部分（前缀）。</p><p>key_len 的计算规则（按字段类型）</p><table><thead><tr><th>字段类型</th><th>字节数</th></tr></thead><tbody><tr><td><code>TINYINT</code></td><td>1 字节</td></tr><tr><td><code>SMALLINT</code></td><td>2 字节</td></tr><tr><td><code>MEDIUMINT</code></td><td>3 字节</td></tr><tr><td><code>INT</code> &#x2F; <code>INTEGER</code></td><td>4 字节</td></tr><tr><td><code>BIGINT</code></td><td>8 字节</td></tr><tr><td><code>CHAR(n)</code></td><td>n 字节（<em>字符数 × 字符集字节</em>，如 UTF-8 是 3n）</td></tr><tr><td><code>VARCHAR(n)</code></td><td>n + 1 或 n + 2 字节（长度前缀+数据）</td></tr><tr><td><code>DATE</code></td><td>3 字节</td></tr><tr><td><code>DATETIME</code></td><td>8 字节</td></tr><tr><td><code>DECIMAL(m,n)</code></td><td>大约为 <code>floor(m/9)*4 + ceil((m%9)/2)</code> 字节</td></tr><tr><td><code>NULLABLE</code></td><td>每个字段多加 1 字节做 null 标记</td></tr><tr><td><code>TEXT</code> &#x2F; <code>BLOB</code></td><td>索引前缀如 <code>VARCHAR</code>，但一般需要前缀索引才支持索引操作</td></tr></tbody></table><p>注意：如果字段可以为 NULL，MySQL 还会额外为每个字段增加 1 个字节做 NULL 标记。</p><p>可以使用 EXPLAIN FORMAT&#x3D;JSON 获取 key_len 的实际值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">explain format <span class="operator">=</span> json</span><br><span class="line"><span class="keyword">select</span> product_name</span><br><span class="line"><span class="keyword">from</span> order_item</span><br><span class="line"><span class="keyword">where</span> order_id <span class="operator">&gt;</span> <span class="number">82</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> order_id, deleted;</span><br></pre></td></tr></table></figure><p>结果（关注 <code>key</code>、<code>key_len</code>、 <code>key_parts</code>）</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;query_block&quot;: &#123;</span><br><span class="line">    &quot;select_id&quot;: 1,  // 查询块编号，单个查询或子查询的标识</span><br><span class="line">    &quot;cost_info&quot;: &#123;</span><br><span class="line">      &quot;query_cost&quot;: &quot;1.71&quot;  // 优化器估算的整个查询的成本，值越小越优</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;ordering_operation&quot;: &#123;  // 排序操作说明</span><br><span class="line">      &quot;using_filesort&quot;: true,  // 使用了 Filesort 排序算法，说明未使用索引排序（ORDER BY 字段未命中索引）</span><br><span class="line">      &quot;cost_info&quot;: &#123;</span><br><span class="line">        &quot;sort_cost&quot;: &quot;1.00&quot;  // 排序操作的预估开销</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;table&quot;: &#123;</span><br><span class="line">        &quot;table_name&quot;: &quot;order_item&quot;,  // 实际访问的表名</span><br><span class="line">        &quot;access_type&quot;: &quot;range&quot;,  // 使用 range 范围扫描，表示 WHERE 子句中有范围条件（如 &gt;、&lt;、BETWEEN）</span><br><span class="line">        &quot;possible_keys&quot;: [</span><br><span class="line">          &quot;idx_order_id_product_id_deleted&quot;  // 优化器认为可能可用的索引（仅供参考）</span><br><span class="line">        ],</span><br><span class="line">        &quot;key&quot;: &quot;idx_order_id_product_id_deleted&quot;,  // 实际使用的索引</span><br><span class="line">        &quot;used_key_parts&quot;: [</span><br><span class="line">          &quot;order_id&quot;  // 复合索引中实际使用的部分，只用了 order_id（说明没有使用到 product_id、deleted）</span><br><span class="line">        ],</span><br><span class="line">        &quot;key_length&quot;: &quot;8&quot;,  // 使用的索引长度为 8 字节，对应 BIGINT 类型的 order_id</span><br><span class="line">        &quot;rows_examined_per_scan&quot;: 1,  // 每次扫描预估读取 1 行（命中率较高）</span><br><span class="line">        &quot;rows_produced_per_join&quot;: 1,  // 每次 JOIN 操作返回 1 行结果（此处为单表查询，理解为总结果行数）</span><br><span class="line">        &quot;filtered&quot;: &quot;100.00&quot;,  // 过滤率为 100%，表示命中的行全部符合 WHERE 条件</span><br><span class="line">        &quot;index_condition&quot;: &quot;(`mysql_tech_advance`.`order_item`.`order_id` &gt; 82)&quot;,  // 索引条件为 order_id &gt; 82，符合 range 扫描特征</span><br><span class="line">        &quot;cost_info&quot;: &#123;</span><br><span class="line">          &quot;read_cost&quot;: &quot;0.61&quot;,     // 从存储读取数据的成本</span><br><span class="line">          &quot;eval_cost&quot;: &quot;0.10&quot;,     // 表达式和过滤条件评估成本</span><br><span class="line">          &quot;prefix_cost&quot;: &quot;0.71&quot;,   // 当前路径前缀的累计成本（read_cost + eval_cost）</span><br><span class="line">          &quot;data_read_per_join&quot;: &quot;1K&quot;  // 此查询预估读取的数据总量为 1KB</span><br><span class="line">        &#125;,</span><br><span class="line">        &quot;used_columns&quot;: [</span><br><span class="line">          &quot;id&quot;,</span><br><span class="line">          &quot;order_id&quot;,</span><br><span class="line">          &quot;product_name&quot;,</span><br><span class="line">          &quot;deleted&quot;</span><br><span class="line">        ]  // 实际读取的列，仅包含 4 列，避免 SELECT * 带来多余 IO</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h3><p>用来与索引列进行等值匹配的字段或常量，简单说：MySQL 用哪个值（或字段）在索引里“查找”</p><p>格式如 const, func, database.table.column, NULL。</p><p>常见 ref 值类型</p><table><thead><tr><th>ref 值类型</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td><code>const</code></td><td>索引列与常量等值比较</td><td><code>WHERE id = 1</code></td></tr><tr><td><code>func</code></td><td>索引列与函数结果比较</td><td><code>WHERE id = ABS(1)</code></td></tr><tr><td><code>null</code></td><td>没使用索引</td><td>全表扫描（如 <code>SELECT *</code> 无 WHERE）</td></tr><tr><td><code>field_name</code></td><td>当前表字段等值匹配</td><td><code>WHERE a.id = b.user_id</code> 中 <code>ref = b.user_id</code></td></tr><tr><td><code>const,const</code></td><td>多列索引与多个常量匹配</td><td><code>WHERE (col1, col2) = (1, &#39;abc&#39;)</code></td></tr><tr><td><code>eq_ref</code></td><td>唯一索引等值连接，最多一行</td><td><code>JOIN user ON user.id = order.user_id</code>，<code>ref = order.user_id</code></td></tr><tr><td><code>ref_or_null</code></td><td>同时查 <code>= ?</code> 和 <code>IS NULL</code></td><td><code>WHERE col = ? OR col IS NULL</code></td></tr><tr><td><code>impossible</code></td><td>查询条件逻辑冲突，不会返回行</td><td><code>WHERE 1 = 0</code></td></tr></tbody></table><h3 id="Extra-字段常见信息说明"><a href="#Extra-字段常见信息说明" class="headerlink" title="Extra 字段常见信息说明"></a>Extra 字段常见信息说明</h3><table><thead><tr><th>Extra 内容</th><th>含义与优化建议</th></tr></thead><tbody><tr><td>Using where</td><td>使用了 <code>WHERE</code> 过滤条件，存储引擎返回数据后在Server层过滤</td></tr><tr><td>Using index</td><td>覆盖索引，无需回表，性能好</td></tr><tr><td>Using index condition</td><td>MySQL 5.6+ 的 ICP（索引条件下推）优化</td></tr><tr><td>Using temporary</td><td>使用了临时表（如 <code>GROUP BY</code>&#x2F;排序，无索引时常见）</td></tr><tr><td>Using filesort</td><td>使用了文件排序（建议通过索引避免）</td></tr><tr><td>Using join buffer (hash)</td><td>无法使用索引连接，需创建连接缓存（性能不佳，关联字段无索引时发生）</td></tr><tr><td>Impossible WHERE</td><td>条件恒假，返回空集</td></tr><tr><td>Distinct</td><td>优化器使用 <code>DISTINCT</code> 去重了</td></tr><tr><td>Materialize</td><td>子查询被物化为临时表</td></tr><tr><td>Optimize table</td><td>表优化提示</td></tr></tbody></table><h4 id="Using-index-condition（索引条件下推）"><a href="#Using-index-condition（索引条件下推）" class="headerlink" title="Using index condition（索引条件下推）"></a>Using index condition（索引条件下推）</h4><p>工作流程对比</p><table><thead><tr><th>阶段</th><th>无 ICP</th><th>有 ICP（Using index condition）</th></tr></thead><tbody><tr><td>索引扫描</td><td>查找到匹配的索引项</td><td>查找到匹配索引项</td></tr><tr><td>回表</td><td>回表读取整行数据</td><td>存储引擎提前根据条件判断是否满足，再决定是否回表</td></tr><tr><td>Server 层过滤</td><td>判断 WHERE 条件是否满足</td><td>多数数据已在存储引擎中过滤</td></tr></tbody></table><p>没有 ICP 时问题在于：大量无效数据也被回表，性能下降。</p><p>ICP 总结一句话</p><ul><li>将部分 WHERE 逻辑从Server 层“下沉”到存储引擎层，提前过滤无效数据，减少回表，提高性能。</li><li>是非覆盖索引查询中非常重要的性能优化机制。</li></ul><p>使用场景</p><ul><li>满足以下条件之一，ICP 才可能被启用</li></ul><table><thead><tr><th>条件</th><th>描述</th></tr></thead><tbody><tr><td>有范围查询</td><td>如 <code>IN</code>, <code>BETWEEN</code>, <code>&gt;</code>, <code>&lt;</code>, <code>LIKE</code> 等</td></tr><tr><td>索引字段部分匹配</td><td>查询条件中有部分字段使用了索引中的一部分</td></tr><tr><td>使用了复合索引但不是最左前缀全匹配</td><td>例如 <code>(col1, col2)</code>，查询 <code>WHERE col1 = ? AND col2 &gt; ?</code></td></tr><tr><td>非覆盖索引查询</td><td>如果是 <code>SELECT *</code> 或查询字段未被索引覆盖</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- username: unique id</span></span><br><span class="line">explain</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> `<span class="keyword">user</span>`</span><br><span class="line"><span class="keyword">where</span> username <span class="keyword">in</span> (<span class="string">&#x27;user_8&#x27;</span>, <span class="string">&#x27;user_9&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="Using-sort-union-uniq-username-PRIMARY-Using-where"><a href="#Using-sort-union-uniq-username-PRIMARY-Using-where" class="headerlink" title="Using sort_union(uniq_username,PRIMARY); Using where"></a>Using sort_union(uniq_username,PRIMARY); Using where</h4><p>这是 index_merge 策略 的一种具体实现形式。 表示 MySQL 分别使用 uniq_username 和 PRIMARY 两个索引进行索引扫描；</p><p>然后对扫描结果（主键 ID 列）进行 排序合并（sort union）；最终再根据这些主键 ID 去主表取出完整的行数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- username: unique id</span></span><br><span class="line">explain</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> `<span class="keyword">user</span>`</span><br><span class="line"><span class="keyword">where</span> id <span class="keyword">in</span> (<span class="number">5</span>, <span class="number">7</span>)</span><br><span class="line">   <span class="keyword">or</span> username <span class="keyword">in</span> (<span class="string">&#x27;user_8&#x27;</span>, <span class="string">&#x27;user_9&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这种策略常用于：</p><ul><li><p>WHERE 条件包含多个字段的 OR</p></li><li><p>每个字段上都有独立索引</p></li><li><p>且字段之间无法合并为一个复合索引</p></li><li><p>和 Using union(…) 不同，Using sort_union(…) 会对每个索引返回的结果先排序再合并，适用于较小的结果集。</p></li></ul><p>为什么是 sort_union 而不是 union？</p><ul><li><p>union(PRIMARY, uniq_username)：表示直接合并两个索引的结果集（无序），适合结果集较大且无排序要求。</p></li><li><p>sort_union(…)：表示两个索引各自结果排完序后再合并，适合较小结果集，合并效率更高。</p></li></ul><p>MySQL 会根据索引返回数据的量和散布程度，动态选择 sort_union 或 union。</p><h2 id="分析步骤建议"><a href="#分析步骤建议" class="headerlink" title="分析步骤建议"></a>分析步骤建议</h2><h3 id="警惕性能杀手"><a href="#警惕性能杀手" class="headerlink" title="警惕性能杀手"></a>警惕性能杀手</h3><ul><li>type: ALL (全表扫描) - 大表上必须避免。</li><li>type: index (全索引扫描) - 虽然比 ALL 好，但扫描大量索引行也可能很慢。</li><li>Using temporary (创建临时表) - 特别是磁盘临时表。</li><li>Using filesort (文件排序) - 特别是大结果集排序。</li><li>Using join buffer - 可能意味着连接缺少有效索引。</li><li>高 rows 值 + 低 filtered 值 - 表示大量数据被读取但大部分被丢弃。</li><li>看 key 和 key_len：是否用了合适索引。</li><li>隐式转换：保证比较时数据类型一致</li></ul><h3 id="优化建议"><a href="#优化建议" class="headerlink" title="优化建议"></a>优化建议</h3><ul><li><p>追求覆盖索引 (Using index)： 尽可能让索引包含查询所需的所有列，减少回表操作。</p></li><li><p>理解索引条件下推(Using index condition)：这是好的优化标志。</p></li><li><p>利用 <code>EXPLAIN FORMAT=JSON</code> 深入分析成本： 理解优化器为何选择该计划。</p></li><li><p>保持统计信息更新 (ANALYZE TABLE)： 确保优化器估算准确。</p></li><li><p>合理创建索引：基于查询的 WHERE, JOIN, ORDER BY, GROUP BY 子句创建合适的单列索引、联合索引（注意顺序！）。</p></li><li><p>复合索引顺序原则：区分度高的列在前，范围查询列在后。</p></li><li><p>关注连接顺序：通常让结果集小的表作为驱动表，选择性高的条件先过滤。</p></li><li><p>任何索引添加都应通过EXPLAIN确认效果。</p></li><li><p>善用 FORCE INDEX（是补救措施，不是优化首选，不代表 MySQL 一定会使用它）。</p></li></ul><h2 id="常见执行计划问题"><a href="#常见执行计划问题" class="headerlink" title="常见执行计划问题"></a>常见执行计划问题</h2><h3 id="索引失效情况"><a href="#索引失效情况" class="headerlink" title="索引失效情况"></a>索引失效情况</h3><p>单独举例，在下面</p><h3 id="全表扫描陷阱："><a href="#全表扫描陷阱：" class="headerlink" title="全表扫描陷阱："></a>全表扫描陷阱：</h3><p>当预估扫描行数超过30%时，优化器可能放弃索引</p><h2 id="执行计划的局限性"><a href="#执行计划的局限性" class="headerlink" title="执行计划的局限性"></a>执行计划的局限性</h2><ul><li><p>预估而非实测： rows 和 filtered 是基于统计信息的估计值，可能与实际情况有偏差。统计信息过时会导致预估不准。</p></li><li><p>不包含实际执行细节：不显示实际执行时间、锁等待、临时表是否在磁盘、具体排序算法等。<br>需结合 <code>Performance Schema (SELECT * FROM performance_schema.events_statements_history_long ...)</code><br>或<code>慢查询日志</code>分析实际执行。</p></li><li><p>不显示所有优化细节： 一些内部优化（如常量传播）在计划中可能不明显。</p></li><li><p>计划可能变化： 数据量变化、统计信息更新、MySQL 版本升级、配置参数改变都可能导致同一查询的执行计划改变。</p></li></ul><hr><h1 id="常见索引失效场景"><a href="#常见索引失效场景" class="headerlink" title="常见索引失效场景"></a>常见索引失效场景</h1><table><thead><tr><th>场景类型</th><th>原因</th><th>索引失效示例</th><th>优化建议</th></tr></thead><tbody><tr><td>运算或函数</td><td>列上使用函数&#x2F;表达式</td><td><code>WHERE age + 1 = 30</code></td><td>改为 <code>age = 29</code></td></tr><tr><td>否定条件</td><td><code>!=</code>、<code>NOT</code>、<code>NOT IN</code></td><td><code>WHERE status != &#39;active&#39;</code></td><td>改为范围条件或正向条件</td></tr><tr><td>隐式类型、字符集转换</td><td>类型不匹配</td><td><code>phone = 13800001111</code></td><td>使用 <code>&#39;13800001111&#39;</code> 字符串</td></tr><tr><td>最左前缀不满足</td><td>跳过索引前缀字段</td><td>使用组合索引 <code>(a, b)</code> 只查 <code>b</code></td><td>改为从最左字段开始使用</td></tr><tr><td>OR 条件部分无索引</td><td>优化器放弃索引</td><td><code>WHERE name=&#39;A&#39; OR email=&#39;B&#39;</code></td><td>改为 <code>UNION</code> 查询</td></tr><tr><td><code>%</code> 开头 LIKE 模糊</td><td>无法使用范围查找</td><td><code>LIKE &#39;%abc&#39;</code></td><td>使用右匹配，或全文索引</td></tr><tr><td><code>SELECT *</code></td><td>无法使用覆盖索引，导致回表</td><td><code>SELECT *</code></td><td>指定字段，构成覆盖索引</td></tr></tbody></table><blockquote><p>场景: 对允许为 NULL 的索引列进行判空, IS NULL 或 IS NOT NULL (需注意);</p></blockquote><hr><h1 id="数据库性能优化"><a href="#数据库性能优化" class="headerlink" title="数据库性能优化"></a>数据库性能优化</h1><table><thead><tr><th>命令</th><th>用途</th><th>建议执行时机</th></tr></thead><tbody><tr><td><code>ANALYZE TABLE</code></td><td>更新索引统计，辅助优化器选索引</td><td>查询计划不合理、大量数据变更后</td></tr><tr><td><code>OPTIMIZE TABLE</code></td><td>回收碎片、重建表结构</td><td>大量 <code>DELETE</code> 后、表空间变大时</td></tr></tbody></table><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1><hr>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 进阶篇</title>
      <link href="/58b301d4.html"/>
      <url>/58b301d4.html</url>
      
        <content type="html"><![CDATA[<h1 id="MYSQL-架构"><a href="#MYSQL-架构" class="headerlink" title="MYSQL 架构"></a>MYSQL 架构</h1><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">+-------------------------------+</span><br><span class="line">|     Application / Client      |  (JDBC, ODBC, Python connector, etc.)</span><br><span class="line">+-------------------------------+</span><br><span class="line">                 |</span><br><span class="line">                 v</span><br><span class="line">+-------------------------------+</span><br><span class="line">|     Connector / Connection    |  &lt;--- 连接层 (线程、连接管理、认证、安全)</span><br><span class="line">+-------------------------------+</span><br><span class="line">                 |</span><br><span class="line">                 v</span><br><span class="line">+-------------------------------+</span><br><span class="line">|         Server Layer          |  &lt;--- 服务层 (分析器、优化器、执行器)</span><br><span class="line">| +---------------------------+ |</span><br><span class="line">| |   Connection Pool         | |</span><br><span class="line">| |   SQL Interface           | |</span><br><span class="line">| |   Parser                  | |</span><br><span class="line">| |   Optimizer               | |</span><br><span class="line">| |   Query Cache (8.0-移除)   | |</span><br><span class="line">| |   Caches <span class="built_in">&amp;</span> Buffers        | |</span><br><span class="line">| |   Stored Procedures       | |</span><br><span class="line">| |   Functions               | |</span><br><span class="line">| |   Triggers                | |</span><br><span class="line">| |   Views                   | |</span><br><span class="line">| |   Privilege Management    | |</span><br><span class="line">| +---------------------------+ |</span><br><span class="line">+-------------------------------+</span><br><span class="line">                 |</span><br><span class="line">                 v</span><br><span class="line">+-------------------------------+</span><br><span class="line">|   Pluggable Storage Engines  |  &lt;--- 存储引擎层 (具体存储、检索、事务、锁)</span><br><span class="line">| +---------------------------+ |</span><br><span class="line">| |   InnoDB  (default)       | |</span><br><span class="line">| |   MyISAM                  | |</span><br><span class="line">| |   Memory                  | |</span><br><span class="line">| |   Archive                 | |</span><br><span class="line">| |   etc.                    | |</span><br><span class="line">| +---------------------------+ |</span><br><span class="line">+-------------------------------+</span><br><span class="line">                 |</span><br><span class="line">                 v</span><br><span class="line">+-------------------------------+</span><br><span class="line">|     File System / OS / Disk   |  &lt;--- 数据文件、日志文件存储</span><br><span class="line">+-------------------------------+</span><br></pre></td></tr></table></figure><h2 id="连接层（Connection-Layer-x2F-Client-Connectors）"><a href="#连接层（Connection-Layer-x2F-Client-Connectors）" class="headerlink" title="连接层（Connection Layer &#x2F; Client Connectors）"></a>连接层（Connection Layer &#x2F; Client Connectors）</h2><p>核心目标： 建立、管理和保护客户端与MySQL服务器之间的安全通道。</p><ul><li>连接管理与线程池</li><li>身份认证与安全</li><li>权限初步验证</li><li>会话管理</li><li>通信协议支持</li></ul><h2 id="服务层（Server-Layer-x2F-SQL-Layer）"><a href="#服务层（Server-Layer-x2F-SQL-Layer）" class="headerlink" title="服务层（Server Layer &#x2F; SQL Layer）"></a>服务层（Server Layer &#x2F; SQL Layer）</h2><p>核心目标： 理解用户请求（SQL）、检查权限、找出最高效的执行方式（优化）、调用存储引擎执行、管理部分服务级别的功能和元数据。</p><ul><li>SQL接口（SQL Interface）: 接收客户端通过连接层发送过来的SQL语句或其他命令。</li><li>解析器（Parser）: 对SQL语句进行词法分析和语法分析。检查SQL语法是否正确，并将其解析成MySQL内部能理解的语法结构树（Abstract<br>Syntax Tree, AST）。</li><li>优化器（Optimizer）: 这是服务层的核心组件。基于解析树、表结构、索引信息、系统统计数据和配置参数</li><li>查询缓存（Query Cache - Removed in MySQL 8.0）</li><li>内置函数与存储过程&#x2F;触发器: 管理、解释和执行内置的SQL函数（如 SUM(), MAX()）、存储过程、用户定义函数（UDF）、触发器和视图的定义与执行逻辑。</li><li>权限管理（高级）:<br>在执行优化后的操作之前，检查用户是否有权限执行该SQL语句（如SELECT、UPDATE、DELETE权限，特定表的权限等）。权限信息通常在<br>mysql 数据库中。</li><li>缓存与缓冲区管理: 管理表定义信息缓存（table_definition_cache）、权限缓存等一些元数据缓存。</li><li>Binlog（二进制日志）管理: 服务层负责将已提交的事务记录到Binlog中（与存储引擎无关的日志，用于主从复制和特定场景的数据恢复）。</li></ul><h3 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h3><p>一定很熟悉</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; </span><br></pre></td></tr></table></figure><h3 id="优化器"><a href="#优化器" class="headerlink" title="优化器"></a>优化器</h3><ul><li>制定一个或多个可能的执行计划。</li><li>预估每个执行计划的成本（I&#x2F;O开销、CPU开销等）。</li><li>选择它认为成本最低的执行计划。优化策略包括索引选择、连接顺序优化、子查询优化等。</li></ul><h3 id="执行器"><a href="#执行器" class="headerlink" title="执行器"></a>执行器</h3><ul><li>要判断对这个表是否有执行查询的权限，若无则返回没有权限的错误</li><li>有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。</li><li>取表的数据，判断逻辑，不满足忽略，满足将这行存在结果集中，直到取到这个表的最后一行。</li></ul><h2 id="存储引擎层（Storage-Engine-Layer）"><a href="#存储引擎层（Storage-Engine-Layer）" class="headerlink" title="存储引擎层（Storage Engine Layer）"></a>存储引擎层（Storage Engine Layer）</h2><p>核心目标： 负责数据的物理存储、提供高效的读写访问接口、保证数据一致性和持久性（如果支持事务）、通过锁或MVCC管理并发访问。其具体行为因引擎而异。</p><ul><li>核心数据存储与检索</li><li>事务管理（如果引擎支持）: ACID实现、MVCC（多版本并发控制）</li><li>行级&#x2F;表级锁</li><li>索引实现</li><li>故障恢复</li><li>插件式架构</li><li>缓冲管理：<ul><li>InnoDB Buffer Pool: 核心的缓存，将表数据和索引页缓存在内存中，大大减少磁盘I&#x2F;O。</li><li>MyISAM Key Buffer: 只缓存索引，数据依赖操作系统缓存。</li></ul></li></ul><h2 id="回表操作"><a href="#回表操作" class="headerlink" title="回表操作"></a>回表操作</h2><p>回表操作（row lookup &#x2F; table lookup）在 MySQL 中发生在 存储引擎层（Storage Engine Layer），</p><p>当 MySQL 查询使用 非覆盖索引 时：</p><ul><li>先在二级索引 中找到满足条件的主键（rowid）</li><li>然后再去 主键聚簇索引 中，通过 rowid 查找实际数据行</li></ul><p>这个从索引页跳转到数据页的过程，就是所谓的 回表（Row Lookup）。</p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="什么是事务（Transaction）"><a href="#什么是事务（Transaction）" class="headerlink" title="什么是事务（Transaction）"></a>什么是事务（Transaction）</h2><p>事务是一组操作的集合，要么全部成功，要么全部失败，具有以下 4 大特性（ACID）</p><table><thead><tr><th>特性</th><th>描述</th><th>关键目标</th></tr></thead><tbody><tr><td>原子性（Atomicity）</td><td>事务是最小的执行单元，要么全部执行成功，要么全部失败回滚。</td><td>避免部分提交</td></tr><tr><td>一致性（Consistency）</td><td>事务执行前后，数据库必须处于一致状态，   数据必须满足所有业务规则、约束、外键、触发器等。</td><td>数据逻辑正确性</td></tr><tr><td>隔离性（Isolation）</td><td>多个事务并发执行时，互不干扰</td><td>控制并发影响</td></tr><tr><td>持久性（Durability）</td><td>事务一旦提交，对数据库的修改就是永久性的，即使系统宕机也不会丢失。</td><td>故障后数据不丢失</td></tr></tbody></table><h2 id="事务隔离级别（Isolation-Levels）"><a href="#事务隔离级别（Isolation-Levels）" class="headerlink" title="事务隔离级别（Isolation Levels）"></a>事务隔离级别（Isolation Levels）</h2><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th><th>实现机制</th></tr></thead><tbody><tr><td>READ UNCOMMITTED</td><td>❌</td><td>❌</td><td>❌</td><td>无锁，直接读最新数据</td></tr><tr><td>READ COMMITTED (RC)</td><td>✅</td><td>❌</td><td>❌</td><td>MVCC（每次读最新快照）</td></tr><tr><td>REPEATABLE READ (RR)</td><td>✅</td><td>✅</td><td>⚠️</td><td>MVCC（事务开始时快照） + Next-Key Lock</td></tr><tr><td>SERIALIZABLE</td><td>✅</td><td>✅</td><td>✅</td><td>全表锁 + 读锁</td></tr></tbody></table><blockquote><p>RR 级别通过 Next-Key Lock 解决了“写操作导致的幻读”，但“读操作幻读”在特定场景下仍可能发生</p></blockquote><p>注：</p><ul><li>SERIALIZABLE: 所有 SELECT 语句隐式转换为 SELECT … FOR SHARE（加共享锁）。</li><li>Next-Key Lock &#x3D; Record Lock（记录锁）+ Gap Lock（间隙锁）</li></ul><p>常见问题：</p><ul><li>脏读：读取到其他事务未提交的修改</li><li>不可重复读：同一事务内多次读取结果不一致（因其他事务提交修改）</li><li>幻读：同一事务内范围查询结果集不一致（因其他事务插入新数据）</li></ul><blockquote></blockquote><p>官方文档：<a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html">https://dev.mysql.com/doc/refman/8.0/en/innodb-transaction-isolation-levels.html</a></p><h2 id="Redo-Log-amp-Undo-Log-amp-Binlog"><a href="#Redo-Log-amp-Undo-Log-amp-Binlog" class="headerlink" title="Redo Log &amp; Undo Log &amp; Binlog"></a>Redo Log &amp; Undo Log &amp; Binlog</h2><table><thead><tr><th>特性</th><th>Redo Log</th><th>Undo Log</th><th>Binlog</th></tr></thead><tbody><tr><td>所属层级</td><td>存储引擎层（InnoDB）</td><td>存储引擎层（InnoDB）</td><td>服务层（MySQL Server）</td></tr><tr><td>日志类型</td><td>物理日志（页修改）</td><td>逻辑日志（逆向操作）</td><td>逻辑日志（SQL&#x2F;行变更）</td></tr><tr><td>核心目标</td><td>崩溃恢复 &amp; 持久性</td><td>事务回滚 &amp; MVCC</td><td>主从复制 &amp; 时间点恢复</td></tr><tr><td>写入时机</td><td>事务提交前强制刷盘</td><td>数据修改前写入</td><td>事务提交后异步写入</td></tr><tr><td>生命周期</td><td>循环覆盖</td><td>Purge 线程延迟清理</td><td>按时间&#x2F;大小滚动删除</td></tr><tr><td>文件示例</td><td>ib_logfile0, ib_logfile1</td><td>undo_001（独立表空间）</td><td>binlog.000001</td></tr><tr><td>是否必须</td><td>InnoDB 必需</td><td>InnoDB 必需</td><td>可选（但复制&#x2F;恢复必需启用）</td></tr></tbody></table><h3 id="Redo-Log-重做日志"><a href="#Redo-Log-重做日志" class="headerlink" title="Redo Log (重做日志)"></a>Redo Log (重做日志)</h3><p>目的：确保事务的持久性（Durability），redo log 是 InnoDB 引擎特有的日志。</p><p>物理级日志（记录数据页的变更）, 如”哪一页 Page 的哪一个偏移 offset 改成了什么值”。</p><p>关键特性：</p><ul><li>物理日志：记录数据页的字节级修改，物理页层面的二进制日志，非文本可读，需要通过工具解析（如 innodb_ruby）。</li><li>循环写入：固定大小文件组（如 ib_logfile0, ib_logfile1），写满后覆盖旧日志。</li><li>强制刷盘：事务提交时，Redo Log 必须刷盘（通过 innodb_flush_log_at_trx_commit&#x3D;1 保证）。</li><li>崩溃恢复：数据库重启后，通过重放 Redo Log <code>恢复已提交但未刷盘的数据</code>。</li><li>写入优化：将随机磁盘 I&#x2F;O（数据页修改）转换为顺序 I&#x2F;O（日志写入）。</li></ul><p>特点：</p><table><thead><tr><th>特性</th><th>内容</th></tr></thead><tbody><tr><td>写入时机</td><td>写入内存日志缓冲区 redo log buffer，再异步刷盘</td></tr><tr><td>写入机制</td><td>Write-Ahead Logging（先写日志再写数据页）</td></tr><tr><td>数据结构</td><td>固定大小（circular buffer 循环写入）</td></tr></tbody></table><p>生命周期：</p><ul><li>事务提交 → Redo Log 刷盘 → 后台线程将脏页刷盘 → Redo Log 可覆盖</li></ul><p>有了 redo log，InnoDB 就可以保证即使数据库发生异常重启，之前提交的记录都不会丢失，这个能力称为crash-safe。</p><h3 id="Undo-Log-回滚日志"><a href="#Undo-Log-回滚日志" class="headerlink" title="Undo Log (回滚日志)"></a>Undo Log (回滚日志)</h3><p>目的：</p><ul><li>提供事务回滚能力</li><li>支持 MVCC 快照读（读取旧版本）</li><li>每条记录都保存“被更新前的旧值”</li></ul><p>关键特性：</p><ul><li>MVCC 支持：为其他事务提供历史版本数据，实现非锁定读（如 SELECT 不阻塞写）。</li><li>逻辑日志：记录逆向操作（如 INSERT 对应 DELETE，UPDATE 记录旧值）。</li><li>链式存储：存储在Undo Tablespaces（系统表空间或独立文件）。</li><li>延迟清理：事务提交后，Undo Log <code>不会立刻删除（供 MVCC 使用</code>），由后台 Purge 线程回收。</li><li>事务回滚：版本链遍历，如果当前版本不可见，则沿着 DB_ROLL_PTR 指向的旧版本依次判断。</li><li>崩溃恢复：协助<code>回滚未提交的事务</code>。</li></ul><p>生命周期：</p><ul><li>事务开始 → 修改前写入 Undo Log → 事务提交&#x2F;回滚 → Purge 线程清理</li><li>Undo log <code>被提交</code>且<code>不再被任何活动事务需要</code>后才能被删除。</li></ul><h3 id="Binlog-归档日志"><a href="#Binlog-归档日志" class="headerlink" title="Binlog (归档日志)"></a>Binlog (归档日志)</h3><p>binlog 是 MySQL 的 Server 层实现的，所有引擎都可以使用。</p><p>作用</p><ul><li>MySQL 层面的事务提交日志，记录 SQL 逻辑事件</li><li>支持 主从复制、数据恢复、闪回</li></ul><p>核心功能：</p><ul><li>主从复制：从库通过重放 Binlog 实现与主库数据同步。</li><li>数据恢复：配合全量备份 + Binlog 恢复到任意历史时间点。</li><li>审计：记录所有数据变更操作（DDL&#x2F;DML）。</li></ul><p>关键特性：</p><ul><li>逻辑日志：记录SQL 语句（Statement 格式）或行数据变更（Row 格式）。</li><li>追加写入：文件持续增长（如 binlog.000001）写到一定大小后会切换到下一个，通过 expire_logs_days 自动清理。</li><li>异步刷盘：事务提交时不强制立即刷盘（由 sync_binlog 参数控制频率）。</li></ul><p>生命周期：</p><ul><li>事务提交 → 写入 Binlog Buffer → 刷盘到 Binlog 文件 → 复制到从库&#x2F;用于恢复</li></ul><h4 id="数据样式（根据-binlog-format-而异）"><a href="#数据样式（根据-binlog-format-而异）" class="headerlink" title="数据样式（根据 binlog_format 而异）"></a>数据样式（根据 binlog_format 而异）</h4><p>STATEMENT：记录原始的SQL语句。</p><p>ROW (推荐)：记录每一行数据修改前后的状态（默认且最安全）。</p><p>MIXED：混合模式，大部分用STATEMENT，特定情况（如非确定性函数）自动转ROW。</p><h4 id="RC隔离级别-Statement模式-问题"><a href="#RC隔离级别-Statement模式-问题" class="headerlink" title="RC隔离级别 + Statement模式 问题"></a>RC隔离级别 + Statement模式 问题</h4><p>mysql不允许，会出现一些数据不一致、主从不一致、复制异常等问题，这是生产环境中应极力避免的组合。</p><h5 id="幻读问题"><a href="#幻读问题" class="headerlink" title="幻读问题"></a>幻读问题</h5><table><thead><tr><th>项</th><th>说明</th></tr></thead><tbody><tr><td><strong>RC（Read Committed）</strong></td><td>每次读取都能看到已经提交的数据，不具备快照一致性</td></tr><tr><td><strong>Statement Binlog 模式</strong></td><td>Binlog 中记录的是 SQL 语句文本，<strong>重放时会重新执行一遍 SQL</strong></td></tr><tr><td><strong>核心冲突点</strong></td><td>在 RC 下，<strong>相同 SQL 可能在不同时间读取到不同数据</strong>，而 Statement 模式会复制并重新执行 SQL，造成 <strong>主从不一致</strong></td></tr></tbody></table><h5 id="非幂等语句、非确定性函数导致复制偏差"><a href="#非幂等语句、非确定性函数导致复制偏差" class="headerlink" title="非幂等语句、非确定性函数导致复制偏差"></a>非幂等语句、非确定性函数导致复制偏差</h5><p>RC + Statement 模式下使用函数如：</p><ul><li>NOW()</li><li>UUID()</li><li>RAND()</li></ul><p>因为这些函数在主从执行结果不同！</p><h2 id="事务提交流程（两阶段提交-2PC）"><a href="#事务提交流程（两阶段提交-2PC）" class="headerlink" title="事务提交流程（两阶段提交 - 2PC）"></a>事务提交流程（两阶段提交 - 2PC）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@startuml</span><br><span class="line">title MySQL 事务提交过程中日志写入顺序（Redo / Undo / Binlog）</span><br><span class="line"></span><br><span class="line">actor T as &quot;事务&quot;</span><br><span class="line">participant InnoDB</span><br><span class="line">participant &quot;MySQL Server&quot; as MySQL</span><br><span class="line"></span><br><span class="line">T -&gt; InnoDB : 1. 写 Undo Log（修改前数据）</span><br><span class="line">T -&gt; InnoDB : 2. 修改 Buffer Pool 数据页</span><br><span class="line">T -&gt; InnoDB : 3. 写 Redo Log（Prepare 状态）</span><br><span class="line">T -&gt; MySQL : 4. 写 Binlog 到文件</span><br><span class="line">T -&gt; InnoDB : 5. 写 Redo Log（Commit 状态）</span><br><span class="line">InnoDB --&gt; T : 事务提交成功</span><br><span class="line"></span><br><span class="line">@enduml</span><br></pre></td></tr></table></figure><p><img src="/image/code-adventure/mysql/%E4%BA%8B%E5%8A%A1%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4%E8%BF%87%E7%A8%8B.svg" alt="事务两阶段提交过程"></p><p>可访问plantuml在线官网查看：<a href="https://www.plantuml.com/plantuml/uml">https://www.plantuml.com/plantuml/uml</a></p><h2 id="MVCC（多版本并发控制）"><a href="#MVCC（多版本并发控制）" class="headerlink" title="MVCC（多版本并发控制）"></a>MVCC（多版本并发控制）</h2><p>MVCC 是一种通过维护数据的多个版本来实现高并发访问的数据库技术。是保障事务隔离性的核心手段。实现读写并发：读不阻塞写，写不阻塞读。</p><p>MVCC的基石, Undo Log: 存储被修改或删除行的旧版本数据，用于构建版本链。</p><p>读操作访问历史快照（通过 Undo Log 构造），而非实时数据。</p><h3 id="知识补充"><a href="#知识补充" class="headerlink" title="知识补充"></a>知识补充</h3><h4 id="事务ID-Transaction-ID-XID"><a href="#事务ID-Transaction-ID-XID" class="headerlink" title="事务ID (Transaction ID, XID)"></a>事务ID (Transaction ID, XID)</h4><ul><li>全局唯一递增的事务标识符（32位或64位），用于标识数据版本的创建者和修改者。</li><li>事务首次执行修改操作时才会被分配XID（惰性分配）。</li></ul><h4 id="InnoDB-行记录结构中与-MVCC-相关的两个隐藏字段"><a href="#InnoDB-行记录结构中与-MVCC-相关的两个隐藏字段" class="headerlink" title="InnoDB 行记录结构中与 MVCC 相关的两个隐藏字段"></a>InnoDB 行记录结构中与 MVCC 相关的两个隐藏字段</h4><table><thead><tr><th>字段名</th><th>含义</th></tr></thead><tbody><tr><td><code>DB_TRX_ID</code></td><td>插入该版本的事务ID</td></tr><tr><td><code>DB_ROLL_PTR</code></td><td>指向 undo log（旧版本的指针）</td></tr></tbody></table><p>旧版本数据存储在 undo 段 中，通过指针形成版本链表。</p><h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><p>在 MySQL（InnoDB 引擎） 中，快照（Snapshot） 是 MVCC（多版本并发控制）机制的核心，用于实现 非阻塞的一致性读，<br>特别是在 <code>REPEATABLE READ</code> 和 <code>READ COMMITTED</code> 隔离级别下。</p><p>在 MVCC（多版本并发控制）中，“快照”是一个核心概念，它定义了事务在特定时间点“看到”的数据库的一致视图。<br>它不是物理复制整个数据库，而是一种逻辑机制，通过元数据和版本链来实现。</p><p>读写不阻塞：读操作（使用快照）不需要获取锁来阻塞写操作。写操作创建新版本，不会直接覆盖旧版本，因此不会阻塞正在读取旧版本的读操作。</p><h4 id="核心概念总览"><a href="#核心概念总览" class="headerlink" title="核心概念总览"></a>核心概念总览</h4><table><thead><tr><th>元素</th><th>作用</th></tr></thead><tbody><tr><td><strong>快照</strong></td><td>当前事务能“看到”的数据版本集合，是一种一致性视图</td></tr><tr><td><strong>undo log</strong></td><td>存储旧版本数据，用于构造快照</td></tr><tr><td><code>trx_id</code></td><td>每个事务的唯一标识</td></tr><tr><td><code>Read View</code></td><td>快照的实现载体，事务开启时生成 Read View，记录活跃事务ID</td></tr></tbody></table><h4 id="快照的生成时机"><a href="#快照的生成时机" class="headerlink" title="快照的生成时机"></a>快照的生成时机</h4><p>事务在 执行第一个查询语句 或 启动后第一次读数据 时生成一个数据快照，定义了该事务可见的数据范围。</p><p>InnoDB 在如下两种 SQL 隔离级别中创建快照：</p><ul><li>REPEATABLE READ：在第一次读取数据时生成快照，整个事务期间保持不变</li><li>READ COMMITTED：每次读取数据都会生成新的快照（每次都看“已提交的最新版本”）</li></ul><h3 id="快照维护者-gt-Read-View（读取视图）"><a href="#快照维护者-gt-Read-View（读取视图）" class="headerlink" title="快照维护者 -&gt; Read View（读取视图）"></a>快照维护者 -&gt; Read View（读取视图）</h3><p>Read View 是一个包含以下几个字段的数据结构，关键字段如下：</p><table><thead><tr><th>字段名</th><th>作用说明</th></tr></thead><tbody><tr><td><code>m_low_limit_id</code></td><td>活跃事务ID集合中的最小值（低水位）</td></tr><tr><td><code>m_up_limit_id</code></td><td>当前系统分配的下一个事务ID（即最大事务ID，高水位）</td></tr><tr><td><code>m_creator_trx_id</code></td><td>当前创建 ReadView 的事务ID</td></tr><tr><td><code>m_ids</code></td><td>当前活跃事务ID集合（未提交）</td></tr></tbody></table><p>这些字段共同决定了事务在访问数据库时的视图，视图定义了哪些事务产生的数据是对当前事务可见的。</p><h3 id="可见性规则-Visibility-Rules"><a href="#可见性规则-Visibility-Rules" class="headerlink" title="可见性规则 (Visibility Rules)"></a>可见性规则 (Visibility Rules)</h3><p>数据版本的可见性规则，就是基于数据的 row trx_id 和这个一致性视图的对比结果得到的。</p><p>视图把所有的 row trx_id 分成了几种不同的情况。</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">                低水位      当前事务     高水位</span><br><span class="line">                  |          |          |</span><br><span class="line">                  v          v          v</span><br><span class="line">+-----------------+ +-----------------+ +-----------------+</span><br><span class="line">    已提交事务           未提交事务集合         未开始事务     </span><br><span class="line">+-----------------+ +-----------------+ +-----------------+</span><br></pre></td></tr></table></figure><p>当当前事务 T 读取一条记录 R 时，会根据 Read View 判断它是否可见：</p><table><thead><tr><th>行版本的 DB_TRX_ID与ReadView比较</th><th>说明</th></tr></thead><tbody><tr><td><code>R.trx_id == m_creator_trx_id</code></td><td>自身事务的修改总是可见</td></tr><tr><td><code>R.trx_id &gt; m_creator_trx_id</code></td><td>该版本的记录来自未来事务，当前事务不可见。</td></tr><tr><td><code>R.trx_id &lt; m_low_limit_id</code></td><td>该版本的记录由一个已经提交的事务创建，对当前事务可见。</td></tr><tr><td><code>R.trx_id in m_ids</code></td><td>该版本的记录来自并发未提交的事务，当前事务不可见。</td></tr></tbody></table><blockquote><p>不在活跃事务集合中，且在高水位和低水位之间，可见。</p></blockquote><h4 id="图解-Read-View-工作原理"><a href="#图解-Read-View-工作原理" class="headerlink" title="图解 Read View 工作原理"></a>图解 Read View 工作原理</h4><p>假设系统当前状态：</p><ul><li>最新分配的事务 ID：120</li><li>活跃事务 (m_ids)：[102, 105, 110]</li><li>创建 Read View RV1 的事务 ID (creator_trx_id)：100</li></ul><p>则 RV1 的关键属性为：</p><ul><li>m_low_limit_id &#x3D; 120 (下一个待分配 ID)</li><li>m_up_limit_id &#x3D; 102 (m_ids 中最小值)</li><li>m_ids &#x3D; [102, 105, 110]</li><li>m_creator_trx_id &#x3D; 100</li></ul><p>判断示例：</p><table><thead><tr><th>行版本的 DB_TRX_ID</th><th>判断逻辑</th><th>对 RV1 是否可见</th></tr></thead><tbody><tr><td>90</td><td>90 &lt; 102 (m_up_limit_id) &#x3D;&gt; 可见</td><td>YES</td></tr><tr><td>100</td><td>100 &#x3D;&#x3D; creator_trx_id (100) &#x3D;&gt; 可见</td><td>YES</td></tr><tr><td>102</td><td>102 在 m_ids [102,105,110] 中 &#x3D;&gt; 不可见</td><td>NO</td></tr><tr><td>104</td><td>102 &lt;&#x3D; 104 &lt; 120 且 104 不在 m_ids &#x3D;&gt; 可见</td><td>YES</td></tr><tr><td>105</td><td>105 在 m_ids [102,105,110] 中 &#x3D;&gt; 不可见</td><td>NO</td></tr><tr><td>115</td><td>115 &lt; 120 且 115 不在 m_ids &#x3D;&gt; 可见</td><td>YES</td></tr><tr><td>120</td><td>120 &gt;&#x3D; 120 (m_low_limit_id) &#x3D;&gt; 不可见</td><td>NO</td></tr><tr><td>125</td><td>125 &gt;&#x3D; 120 (m_low_limit_id) &#x3D;&gt; 不可见</td><td>NO</td></tr></tbody></table><h3 id="快照读（Snapshot-Read）-VS-当前读（Current-Read）"><a href="#快照读（Snapshot-Read）-VS-当前读（Current-Read）" class="headerlink" title="快照读（Snapshot Read） VS 当前读（Current Read）"></a>快照读（Snapshot Read） VS 当前读（Current Read）</h3><p>快照读（Snapshot Read）</p><ul><li>通过 MVCC 读取历史版本数据（如普通 SELECT）</li><li>无锁，高性能</li></ul><p>当前读（Current Read）</p><ul><li>加锁读（如 SELECT … FOR UPDATE）</li><li>会阻塞其他事务修改</li></ul><h2 id="事务传播行为（Spring-语境）"><a href="#事务传播行为（Spring-语境）" class="headerlink" title="事务传播行为（Spring 语境）"></a>事务传播行为（Spring 语境）</h2><p>当一个方法在事务上下文中被调用时，如果调用方已有事务，Spring 应该如何处理被调用方法的事务。</p><p>Spring 的 7 种事务传播行为</p><table><thead><tr><th>传播行为（常量）</th><th>描述简要</th></tr></thead><tbody><tr><td><code>REQUIRED</code>（默认）</td><td>有事务就加入，没有就新建一个事务</td></tr><tr><td><code>REQUIRES_NEW</code></td><td>总是新建事务，挂起调用方的事务</td></tr><tr><td><code>NESTED</code></td><td>如果已有事务，则在嵌套事务中执行（使用<strong>保存点 Savepoint</strong>）</td></tr><tr><td><code>SUPPORTS</code></td><td>有事务就加入，没有就非事务执行</td></tr><tr><td><code>NOT_SUPPORTED</code></td><td>始终非事务执行，有事务则挂起它</td></tr><tr><td><code>MANDATORY</code></td><td>必须在事务中运行，否则抛出异常</td></tr><tr><td><code>NEVER</code></td><td>必须在无事务的上下文中运行，有事务就抛异常</td></tr></tbody></table><h2 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h2><p>需要知道的几个术语</p><ul><li>事务（transaction）: 指一组SQL语句；</li><li>回退（rollback）: 指撤销指定SQL语句的过程；</li><li>提交（commit）: 指将未存储的SQL语句结果写入数据库表；</li><li>保留点（savepoint）: 指事务处理中设置的临时占位符（place-holder），可以对它发布回退（与回退整个事务处理不同）。</li></ul><p>begin&#x2F;start transaction 命令并不是一个事务的起点，在执行到它们之后的第一个操作 InnoDB 表的语句，事务才真正启动。</p><p>如果想要马上启动一个事务，可以使用 start transaction with consistent snapshot 这个命令。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 关闭自动提交, 针对每个连接而不是服务器的</span></span><br><span class="line"><span class="keyword">SET</span> autocommit <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">SAVEPOINT</span> delete_news_before;</span><br><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> `news`;</span><br><span class="line"><span class="keyword">SAVEPOINT</span> delete_words_before;</span><br><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> `words`;</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> delete_words_before;</span><br></pre></td></tr></table></figure><hr><h1 id="锁机制"><a href="#锁机制" class="headerlink" title="锁机制"></a>锁机制</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><h3 id="按锁的粒度-Lock-Granularity"><a href="#按锁的粒度-Lock-Granularity" class="headerlink" title="按锁的粒度 (Lock Granularity)"></a>按锁的粒度 (Lock Granularity)</h3><ul><li>全局锁: 整个数据库实例的所有表。</li><li>表级锁: 整张表。</li><li>行级锁 (InnoDB 核心特性): 单行记录（或索引记录）。</li></ul><h3 id="按访问权限分"><a href="#按访问权限分" class="headerlink" title="按访问权限分"></a>按访问权限分</h3><p>共享锁 (Shared Lock - S Lock &#x2F; 读锁)</p><ul><li>允许其他事务读取锁定的行，但不能修改。</li><li>多个事务可以同时持有同一行的 S 锁。</li><li>SELECT … LOCK IN SHARE MODE 显式获取。SELECT 在 SERIALIZABLE 隔离级别下也可能隐式获取（取决于配置）。</li></ul><p>排他锁 (Exclusive Lock - X Lock &#x2F; 写锁)</p><ul><li>阻止其他事务读取（除非是 READ UNCOMMITTED）或修改锁定的行。</li><li>一次只能有一个事务持有某一行的 X 锁。</li><li>INSERT, UPDATE, DELETE 操作会隐式获取受影响行的 X 锁。SELECT … FOR UPDATE 显式获取。</li></ul><h3 id="表级锁"><a href="#表级锁" class="headerlink" title="表级锁"></a>表级锁</h3><ul><li>表共享读锁</li><li>表独占写锁</li><li>意向锁 (Intention Lock - InnoDB特有)： 表级锁，表示事务稍后将在表中的行上请求哪种类型的锁（共享或独占）。</li><li>自增锁 (AUTO-INC Locks)： 特殊表锁，用于处理具有 AUTO_INCREMENT 列的表上的并发插入。在事务执行插入语句时持有（不是整个事务），确保自增值连续且唯一。</li><li>元数据锁 (Metadata Lock - MDL)： MySQL 5.5+引入。保护表结构（schema）。</li></ul><h3 id="行级锁"><a href="#行级锁" class="headerlink" title="行级锁"></a>行级锁</h3><p>记录锁 (Record Lock)： 锁定索引中的一条具体记录。主键或唯一索引上的等值查询通常加记录锁。</p><p>间隙锁 (Gap Lock)： 锁定索引记录之间的间隙（一个开区间），防止其他事务在这个间隙中插入新记录。这是实现 REPEATABLE READ<br>隔离级别防止幻读的关键机制之一。<br>仅作用于非唯一索引或范围查询。唯一索引的等值查询（记录存在）不需要间隙锁。</p><p>临键锁 (Next-Key Lock)： 记录锁 + 间隙锁的组合。锁定索引记录本身以及该记录之前的间隙（一个左开右闭区间）。<br>这是 InnoDB 在 REPEATABLE READ 隔离级别下默认的行锁算法。目的是解决幻读。</p><h4 id="锁定位置"><a href="#锁定位置" class="headerlink" title="锁定位置"></a>锁定位置</h4><p>锁定位置： InnoDB 的行锁是加在索引上的！<br>即使表没有显式定义索引，InnoDB 也会创建一个隐藏的聚簇索引（通常是主键）。锁是加在索引记录上的。</p><p>通过主键或唯一索引进行精确查询，锁只加在满足条件的特定行上。</p><p>通过非唯一索引进行查询，除了锁住满足条件的索引记录外，还会锁住相关的间隙（间隙锁或临键锁）。</p><p>没有使用索引的查询 (WHERE 条件无索引列)： InnoDB 无法使用行锁，会退化为锁住整个表的所有行（实际上是所有索引记录和间隙）！<br>相当于表锁的效果，并发性能急剧下降。务必避免！</p><h2 id="RR-级别在-MySQL-中通过-Next-Key-Lock-完全解决了幻读吗"><a href="#RR-级别在-MySQL-中通过-Next-Key-Lock-完全解决了幻读吗" class="headerlink" title="RR 级别在 MySQL 中通过 Next-Key Lock 完全解决了幻读吗"></a>RR 级别在 MySQL 中通过 Next-Key Lock 完全解决了幻读吗</h2><p>结论：RR 级别通过 Next-Key Lock 解决了“写操作导致的幻读”，但“读操作幻读”在特定场景下仍可能发生</p><ul><li>这取决于操作类型（读 vs 写）和语句执行方式（快照读 vs 当前读）</li></ul><p>幻读的本质</p><ul><li>指同一事务内多次查询同一范围时，后一次查询看到了前一次查询未出现的行（如新插入的行）。</li></ul><h3 id="RR-隔离级别下的“幻读漏洞”"><a href="#RR-隔离级别下的“幻读漏洞”" class="headerlink" title="RR 隔离级别下的“幻读漏洞”"></a>RR 隔离级别下的“幻读漏洞”</h3><ol><li>漏洞场景：纯读操作 + 后续写操作</li></ol><p>场景复现，前提隔离级别是RR</p><p>事务A</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> autocommit <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">25</span>;</span><br><span class="line"><span class="comment">-- 快照读</span></span><br><span class="line"><span class="comment">-- 显式等待</span></span><br><span class="line">DO SLEEP(<span class="number">5</span>);</span><br><span class="line"><span class="comment">-- 事务B 插入并提交</span></span><br><span class="line"><span class="comment">-- INSERT INTO user(username, age, description) VALUES (&#x27;幻读&#x27;, 26, &#x27;幻读888&#x27;);</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">25</span>; <span class="comment">-- 快照读</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">SET</span> description <span class="operator">=</span> <span class="string">&#x27;幻读测试&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">25</span>;</span><br><span class="line"><span class="comment">-- 更新行数据，当前读：</span></span><br><span class="line"><span class="comment">-- 此时会读到事务B插入的 &#x27;幻读&#x27;, 26,</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">where</span> age <span class="operator">&gt;</span> <span class="number">25</span>; <span class="comment">-- 快照读</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p>事务B</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> autocommit <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">begin</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span>(username, age, description)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;幻读&#x27;</span>, <span class="number">26</span>, <span class="string">&#x27;幻读888&#x27;</span>);</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><h4 id="解决方案-Next-Key-Lock-锁"><a href="#解决方案-Next-Key-Lock-锁" class="headerlink" title="解决方案 - Next-Key Lock + 锁"></a>解决方案 - Next-Key Lock + 锁</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 假设表中已有 id = 10 的记录</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> t</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="keyword">BETWEEN</span> <span class="number">5</span> <span class="keyword">AND</span> <span class="number">15</span> <span class="keyword">FOR</span></span><br><span class="line"><span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure><p>该语句会加锁区间：</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(5, 10] 和 (10, 15]</span><br></pre></td></tr></table></figure><p>从而阻止其他事务向 id &#x3D; 6, 9, 11, 13 等位置插入数据 —— 有效防止幻读。</p><hr><h1 id="数据库维护"><a href="#数据库维护" class="headerlink" title="数据库维护"></a>数据库维护</h1><h2 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h2><h3 id="备份表结构和表数据"><a href="#备份表结构和表数据" class="headerlink" title="备份表结构和表数据"></a>备份表结构和表数据</h3><ul><li>临时备份，测试</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 方法 1：使用 SQL 创建新表，只复制结构</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users_backup <span class="keyword">LIKE</span> users;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方法 2：SQL 复制结构+数据</span></span><br><span class="line"><span class="comment">-- 但注意：该方法不会复制索引、主键、自动递增等属性，仅数据和字段！</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> new_table <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> original_table;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方法 3：组合方式复制结构再导数据</span></span><br><span class="line"><span class="comment">-- 会复制索引、主键、自动递增等属性</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> new_table <span class="keyword">LIKE</span> original_table;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> new_table</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> original_table;</span><br></pre></td></tr></table></figure><ul><li>使用 mysqldump 命令（推荐正式备份）</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份单张表（含结构和数据）</span></span><br><span class="line">mysqldump -u root -p your_db original_table &gt; table_backup.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 备份整库（结构+数据）</span></span><br><span class="line">mysqldump -u root -p your_db &gt; full_backup.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只导出结构（不含数据）</span></span><br><span class="line">mysqldump -u root -p your_db original_table --no-data &gt; structure_only.sql</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只导出数据（不含结构）</span></span><br><span class="line">mysqldump -u root -p your_db original_table --no-create-info &gt; data_only.sql</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="添加字段（ADD-COLUMN）"><a href="#添加字段（ADD-COLUMN）" class="headerlink" title="添加字段（ADD COLUMN）"></a>添加字段（ADD COLUMN）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 添加一个新字段 phone，在 name 字段之后</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users</span><br><span class="line">    <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> phone <span class="type">VARCHAR</span>(<span class="number">20</span>) AFTER name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加多个字段</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users</span><br><span class="line">    <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> address    <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> created_at DATETIME <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="修改字段"><a href="#修改字段" class="headerlink" title="修改字段"></a>修改字段</h3><ul><li>MODIFY：只修改数据类型或约束，不改字段名</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 把 age 字段改为允许 NULL，且默认值为 18</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users</span><br><span class="line">    MODIFY <span class="keyword">COLUMN</span> age <span class="type">INT</span> <span class="keyword">DEFAULT</span> <span class="number">18</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>CHANGE：可以同时修改字段名和类型</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 把 name 改名为 username，数据类型不变</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users</span><br><span class="line">    CHANGE <span class="keyword">COLUMN</span> name username <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><h3 id="删除字段"><a href="#删除字段" class="headerlink" title="删除字段"></a>删除字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users</span><br><span class="line">    <span class="keyword">DROP</span></span><br><span class="line">        <span class="keyword">COLUMN</span> phone;</span><br></pre></td></tr></table></figure><h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RENAME</span><br><span class="line">    <span class="keyword">TABLE</span> users <span class="keyword">TO</span> user_accounts;</span><br></pre></td></tr></table></figure><h2 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h2><h3 id="添加普通索引"><a href="#添加普通索引" class="headerlink" title="添加普通索引"></a>添加普通索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 添加普通索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users</span><br><span class="line">    <span class="keyword">ADD</span> INDEX idx_age (age);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加唯一索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users</span><br><span class="line">    <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> INDEX idx_email (email);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加组合索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users</span><br><span class="line">    <span class="keyword">ADD</span> INDEX idx_name_age (username, age);</span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users</span><br><span class="line">    <span class="keyword">DROP</span> INDEX idx_age;</span><br></pre></td></tr></table></figure><h3 id="重命名索引（MySQL-8-0-支持）"><a href="#重命名索引（MySQL-8-0-支持）" class="headerlink" title="重命名索引（MySQL 8.0+ 支持）"></a>重命名索引（MySQL 8.0+ 支持）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users</span><br><span class="line">    RENAME INDEX idx_name_age <span class="keyword">TO</span> idx_user_age;</span><br></pre></td></tr></table></figure><hr><h1 id="数据库排查相关命令"><a href="#数据库排查相关命令" class="headerlink" title="数据库排查相关命令"></a>数据库排查相关命令</h1><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看数据库版本命令</span></span><br><span class="line"><span class="keyword">SELECT</span> VERSION();</span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;version%&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="排查事务问题"><a href="#排查事务问题" class="headerlink" title="排查事务问题"></a>排查事务问题</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看当前运行的事务</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> information_schema.innodb_trx;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看锁等待</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> sys.innodb_lock_waits;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 强制终止事务（谨慎！）</span></span><br><span class="line">KILL [trx_mysql_thread_id];</span><br></pre></td></tr></table></figure><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p>查看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看当前会话（Session）隔离级别</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@transaction</span>_isolation;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看全局（Global）默认隔离级别</span></span><br><span class="line"><span class="keyword">SELECT</span> @<span class="variable">@global</span>.transaction_isolation;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>设置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 设置当前会话隔离级别（仅对当前连接生效）</span></span><br><span class="line"><span class="keyword">SET</span> SESSION TRANSACTION ISOLATION LEVEL READ COMMITTED;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 设置全局隔离级别（需有 SUPER 权限，新连接生效）</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> TRANSACTION ISOLATION LEVEL REPEATABLE READ;</span><br></pre></td></tr></table></figure><h2 id="字符集和校对顺序"><a href="#字符集和校对顺序" class="headerlink" title="字符集和校对顺序"></a>字符集和校对顺序</h2><ul><li>显示所有可用的字符集以及每个字符集的描述和默认校对</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 显示所有可用的字符集以及每个字符集的描述和默认校对。</span></span><br><span class="line"><span class="keyword">SHOW</span></span><br><span class="line">    <span class="type">CHARACTER</span> <span class="keyword">SET</span>;</span><br></pre></td></tr></table></figure><ul><li>查看所支持校对的完整列表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看所支持校对的完整列表</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">COLLATION</span>;</span><br></pre></td></tr></table></figure><ul><li>确定所用的字符集和校对</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 为了确定所用的字符集和校对，可以使用以下语句：</span></span><br><span class="line"><span class="keyword">SHOW</span></span><br><span class="line">    VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;character%&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span></span><br><span class="line">    VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;collation%&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="是否区分大小写"><a href="#是否区分大小写" class="headerlink" title="是否区分大小写"></a>是否区分大小写</h2><ul><li>表名是否区分大小写（与操作系统有关）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;lower_case_table_names&#x27;</span>;</span><br></pre></td></tr></table></figure><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>0</td><td><strong>区分大小写</strong>（Linux 默认）</td></tr><tr><td>1</td><td><strong>不区分大小写</strong>（Windows 默认）</td></tr><tr><td>2</td><td>创建时不区分，但查询时大小写敏感（仅部分平台支持）</td></tr></tbody></table><ul><li>字符串比较是否区分大小写（与字符集排序规则有关）</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 当前数据库的排序规则</span></span><br><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;collation_database&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看某张表的字符集和排序规则</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">TABLE</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;users&#x27;</span>;</span><br><span class="line"><span class="comment">-- 查看字段的字符集和排序规则</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">FULL</span> COLUMNS <span class="keyword">FROM</span> mysql_tech.users;</span><br></pre></td></tr></table></figure><h2 id="多事务调试"><a href="#多事务调试" class="headerlink" title="多事务调试"></a>多事务调试</h2><h3 id="使用update持有相同锁"><a href="#使用update持有相同锁" class="headerlink" title="使用update持有相同锁"></a>使用update持有相同锁</h3><p>事务B, 设置手动提交，先执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">SET</span> description <span class="operator">=</span> <span class="string">&#x27;事务B锁定中&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>事务A，此时事务A会阻塞，直到事务B提交或回滚</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">SET</span> description <span class="operator">=</span> <span class="string">&#x27;事务A尝试更新&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="使用-sleep"><a href="#使用-sleep" class="headerlink" title="使用 sleep"></a>使用 sleep</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="comment">-- 显式等待</span></span><br><span class="line">DO SLEEP(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h3 id="使用-GET-LOCK-IS-USED-LOCK（不推荐用于严格事务调度）"><a href="#使用-GET-LOCK-IS-USED-LOCK（不推荐用于严格事务调度）" class="headerlink" title="使用 GET_LOCK + IS_USED_LOCK（不推荐用于严格事务调度）"></a>使用 GET_LOCK + IS_USED_LOCK（不推荐用于严格事务调度）</h3><p>事务B</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> GET_LOCK(<span class="string">&#x27;txn_lock&#x27;</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">-- 获取一个用户级锁，最多等待10秒</span></span><br></pre></td></tr></table></figure><p>事务 A</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 轮询直到事务 B 拿到锁</span></span><br><span class="line"><span class="keyword">SELECT</span> IS_USED_LOCK(<span class="string">&#x27;txn_lock&#x27;</span>);</span><br><span class="line"><span class="comment">-- 返回非 NULL 表示事务 B 拿到锁，可以继续执行</span></span><br></pre></td></tr></table></figure><hr><h1 id="视图和临时表"><a href="#视图和临时表" class="headerlink" title="视图和临时表"></a>视图和临时表</h1><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><table><thead><tr><th>特性</th><th>视图（VIEW）</th><th>临时表（TEMPORARY TABLE）</th></tr></thead><tbody><tr><td>定义</td><td>是一个虚拟表，本质上是预定义的 SELECT 查询结果集</td><td>是一个真实存在的临时表，数据存储在数据库中</td></tr><tr><td>存储</td><td>不存储数据，只保存查询定义</td><td>存储数据，实际占用空间</td></tr><tr><td>作用域</td><td>对所有用户可见，只要有权限均可访问</td><td>会话级别（session）可见，断开连接即自动删除</td></tr><tr><td>生命周期</td><td>持久存在，直到显式 DROP VIEW</td><td>只在当前数据库连接有效，断开连接即销毁</td></tr><tr><td>更新和操作</td><td>对可更新视图，可以通过视图操作底层表</td><td>可以对临时表执行任何 DML 操作（增删改查）</td></tr><tr><td>创建语法</td><td><code>CREATE VIEW view_name AS SELECT ...</code></td><td><code>CREATE TEMPORARY TABLE temp_table AS SELECT ...</code></td></tr><tr><td>性能</td><td>每次查询时执行视图定义的 SQL，实时获取数据</td><td>数据已物理存在，查询速度快，但需要额外空间存储数据</td></tr><tr><td>使用场景</td><td>简化复杂查询、权限控制、封装业务逻辑</td><td>存储中间结果、数据处理临时存储、复杂计算临时存储</td></tr><tr><td>索引</td><td>视图本身不能有索引</td><td>临时表支持索引，可以优化查询性能</td></tr></tbody></table><p>简单示例<br>视图：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> active_users <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> user_id, username</span><br><span class="line"><span class="keyword">FROM</span> users</span><br><span class="line"><span class="keyword">WHERE</span> status <span class="operator">=</span> <span class="string">&#x27;active&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询视图</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> active_users;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>临时表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> TEMPORARY <span class="keyword">TABLE</span> temp_active_users <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> user_id, username</span><br><span class="line"><span class="keyword">FROM</span> users</span><br><span class="line"><span class="keyword">WHERE</span> status <span class="operator">=</span> <span class="string">&#x27;active&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询临时表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> temp_active_users;</span><br><span class="line"><span class="comment">-- 连接关闭后，临时表自动删除</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h1 id="安全管理"><a href="#安全管理" class="headerlink" title="安全管理"></a>安全管理</h1><h2 id="创建用户-amp-设置访问权限"><a href="#创建用户-amp-设置访问权限" class="headerlink" title="创建用户 &amp; 设置访问权限"></a>创建用户 &amp; 设置访问权限</h2>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL 基础篇</title>
      <link href="/7a3baa07.html"/>
      <url>/7a3baa07.html</url>
      
        <content type="html"><![CDATA[<h1 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h1><h2 id="SQL语句执行顺序"><a href="#SQL语句执行顺序" class="headerlink" title="SQL语句执行顺序"></a>SQL语句执行顺序</h2><ul><li>WITH、FROM、ON 、JOIN、WHERE、GROUP BY、AGG_FUNC、HAVING、SELECT、UNION、DISTINCT 、ORDER BY、LIMIT。</li><li>FROM、ON 、JOIN、WHERE、GROUP BY、AGG_FUNC、HAVING、SELECT、DISTINCT 、ORDER BY、LIMIT。</li></ul><p>SQL 语句执行的逻辑顺序：（自上而下）</p><table><thead><tr><th>关键字</th><th>作用说明</th></tr></thead><tbody><tr><td><code>WITH</code>（CTE）</td><td>公共表达式（子查询临时结果集），为主查询提供中间视图。</td></tr><tr><td><code>FROM</code></td><td>确定查询数据的表或子查询来源。</td></tr><tr><td><code>JOIN</code> &#x2F; <code>ON</code></td><td>若有连接操作，执行连接并应用连接条件（<code>ON</code>）筛选。</td></tr><tr><td><code>WHERE</code></td><td>对原始表或连接结果进行<strong>行级过滤</strong>。</td></tr><tr><td><code>GROUP BY</code></td><td>将符合 <code>WHERE</code> 的结果进行分组。</td></tr><tr><td>聚合函数 <code>SUM()</code>, <code>COUNT()</code> 等</td><td>在分组后的基础上，计算聚合值。</td></tr><tr><td><code>HAVING</code></td><td>对<strong>分组结果</strong>进行过滤（区别于 <code>WHERE</code> 过滤原始行）。</td></tr><tr><td><code>SELECT</code></td><td>确定最终返回的列，包括聚合结果或字段。</td></tr><tr><td><code>DISTINCT</code></td><td>对 <code>SELECT</code> 出来的结果进行去重。</td></tr><tr><td><code>UNION</code> &#x2F; <code>UNION ALL</code></td><td>若有多个查询结果集合并，执行合并。</td></tr><tr><td><code>ORDER BY</code></td><td>对最终结果进行排序。</td></tr><tr><td><code>LIMIT</code> &#x2F; <code>OFFSET</code></td><td>限制返回结果的条数或分页。</td></tr></tbody></table><p>案例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> active_users <span class="keyword">AS</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> user_id</span><br><span class="line">                      <span class="keyword">FROM</span> orders</span><br><span class="line">                      <span class="keyword">WHERE</span> status <span class="operator">=</span> <span class="string">&#x27;PAID&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> o.status, <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> o.user_id) <span class="keyword">AS</span> user_count</span><br><span class="line"><span class="keyword">FROM</span> orders o</span><br><span class="line">         <span class="keyword">JOIN</span> active_users a <span class="keyword">ON</span> o.user_id <span class="operator">=</span> a.user_id</span><br><span class="line"><span class="keyword">WHERE</span> o.status <span class="operator">!=</span> <span class="string">&#x27;CANCEL&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> o.status</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> user_count <span class="keyword">DESC</span></span><br><span class="line">LIMIT <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h2 id="去重（DISTINCT）"><a href="#去重（DISTINCT）" class="headerlink" title="去重（DISTINCT）"></a>去重（DISTINCT）</h2><p>用于去重的关键字，常用于 SELECT 查询中，消除结果集中重复的记录。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> column1, column2</span><br><span class="line"><span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><ul><li>作用：返回结果中 column1, column2, … 组合唯一的行（重复的行只保留一条）。</li><li>位置：DISTINCT 紧跟在 SELECT 后。</li><li>作用范围：作用于 SELECT 字段组合，而不是单个字段。</li></ul><h2 id="统计行数（Count）"><a href="#统计行数（Count）" class="headerlink" title="统计行数（Count）"></a>统计行数（Count）</h2><p>COUNT() 函数用于统计行数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">count</span>(<span class="operator">*</span>), <span class="built_in">count</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">FROM</span> order_item</span><br></pre></td></tr></table></figure><h3 id="count-distinct"><a href="#count-distinct" class="headerlink" title="count + distinct"></a>count + distinct</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> orders;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 返回结果中 user_id, status 组合唯一的行（重复的行只保留一条）</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> user_id, status</span><br><span class="line"><span class="keyword">from</span> orders;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 统计每种订单状态下有多少个订单</span></span><br><span class="line"><span class="keyword">SELECT</span> status,                  <span class="comment">-- 分组字段：订单状态</span></span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> total_orders <span class="comment">-- 聚合函数：统计每种状态下的订单数量</span></span><br><span class="line"><span class="keyword">FROM</span> orders <span class="comment">-- 来源表：订单表</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> status;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 只统计 user_id NOT NULL 的记录（因为 COUNT(col) 会跳过 NULL）</span></span><br><span class="line"><span class="keyword">SELECT</span> status,</span><br><span class="line">       <span class="built_in">COUNT</span>(user_id)                                                <span class="keyword">AS</span> total_orders,</span><br><span class="line">       GROUP_CONCAT(CONCAT_WS(<span class="string">&#x27;: &#x27;</span>, status, user_id) SEPARATOR <span class="string">&#x27;, &#x27;</span>) <span class="keyword">AS</span> info</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> status;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 统计每种状态下订单总数和不同用户数一起, 同时看到 订单总数 和 用户数</span></span><br><span class="line"><span class="keyword">SELECT</span> status,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="operator">*</span>)                                                      <span class="keyword">AS</span> total_orders,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="keyword">distinct</span> user_id)                                       <span class="keyword">AS</span> distinct_users,</span><br><span class="line">       GROUP_CONCAT(CONCAT_WS(<span class="string">&#x27;: &#x27;</span>, status, user_id) SEPARATOR <span class="string">&#x27;, &#x27;</span>) <span class="keyword">AS</span> info</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> status;</span><br></pre></td></tr></table></figure><h2 id="排序（order-by）"><a href="#排序（order-by）" class="headerlink" title="排序（order by）"></a>排序（order by）</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按多个列排序并指定排序方向（正序、倒序）</span></span><br><span class="line"><span class="keyword">select</span> id, `name`, student_number</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> `name`, id <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 区分大小写和排序顺序,与mysql的配置有关</span></span><br><span class="line"><span class="comment">-- 查询最大值</span></span><br><span class="line"><span class="keyword">select</span> student_number</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> student_number <span class="keyword">desc</span></span><br><span class="line">limit <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="分组数据（group-by）"><a href="#分组数据（group-by）" class="headerlink" title="分组数据（group by）"></a>分组数据（group by）</h2><h3 id="基础案例"><a href="#基础案例" class="headerlink" title="基础案例"></a>基础案例</h3><p>是 MySQL 中用于对结果集分组的关键字，通常与聚合函数（如 COUNT()、SUM()、AVG()、MAX()、MIN()）一起使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 按产品id分组，统计每类产品有多少个</span></span><br><span class="line"><span class="comment">-- 统计每列数据，按category_id分组</span></span><br><span class="line"><span class="keyword">select</span> category_id, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> count_category</span><br><span class="line"><span class="keyword">from</span> goods</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> category_id;</span><br></pre></td></tr></table></figure><h4 id="（过滤）HAVING"><a href="#（过滤）HAVING" class="headerlink" title="（过滤）HAVING"></a>（过滤）HAVING</h4><ul><li>HAVING 是专门用来过滤聚合后的结果，不能用 WHERE 替代。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(`name`, <span class="number">1</span>, <span class="number">1</span>)                                         <span class="keyword">AS</span> first_name,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="operator">*</span>)                                                        <span class="keyword">AS</span> count_name,</span><br><span class="line">       GROUP_CONCAT(CONCAT(name, <span class="string">&#x27;: &#x27;</span>, id) <span class="keyword">ORDER</span> <span class="keyword">BY</span> id SEPARATOR <span class="string">&#x27;, &#x27;</span>) <span class="keyword">AS</span> students</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">&gt;</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> first_name</span><br><span class="line"><span class="keyword">HAVING</span> count_name <span class="operator">&gt;</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="复杂案例"><a href="#复杂案例" class="headerlink" title="复杂案例"></a>复杂案例</h3><h4 id="多字段分组-聚合-作为计算字段使用子查询"><a href="#多字段分组-聚合-作为计算字段使用子查询" class="headerlink" title="多字段分组 + 聚合 + 作为计算字段使用子查询"></a>多字段分组 + 聚合 + 作为计算字段使用子查询</h4><p>典型场景：对多个维度统计数据，比如产品+地区的销量。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> region, product, <span class="built_in">SUM</span>(amount) <span class="keyword">AS</span> total_sales</span><br><span class="line"><span class="keyword">FROM</span> sales</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> region, product</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> region, total_sales <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h4 id="分组后取每组最大（Top-1）记录"><a href="#分组后取每组最大（Top-1）记录" class="headerlink" title="分组后取每组最大（Top 1）记录"></a>分组后取每组最大（Top 1）记录</h4><p>子查询 + JOIN</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> o.<span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> orders o</span><br><span class="line">         <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> user_id, <span class="built_in">MAX</span>(amount) <span class="keyword">AS</span> max_amount</span><br><span class="line">               <span class="keyword">FROM</span> orders</span><br><span class="line">               <span class="keyword">GROUP</span> <span class="keyword">BY</span> user_id) t <span class="keyword">ON</span> o.user_id <span class="operator">=</span> t.user_id <span class="keyword">AND</span> o.amount <span class="operator">=</span> t.max_amount;</span><br></pre></td></tr></table></figure><h4 id="WITH-ROLLUP-汇总小计、总计"><a href="#WITH-ROLLUP-汇总小计、总计" class="headerlink" title="WITH ROLLUP 汇总小计、总计"></a>WITH ROLLUP 汇总小计、总计</h4><p>ROLLUP 会额外生成小计、总计行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- GROUP BY WITH ROLLUP: 按 category_id 分组统计，并添加一个汇总行（所有类别的总数量）。</span></span><br><span class="line"><span class="keyword">SELECT</span> category_id, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">AS</span> count_category</span><br><span class="line"><span class="keyword">FROM</span> goods</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> category_id</span><br><span class="line"><span class="keyword">WITH</span> <span class="keyword">ROLLUP</span>;</span><br></pre></td></tr></table></figure><h4 id="GROUP-CONCAT-聚合成列表"><a href="#GROUP-CONCAT-聚合成列表" class="headerlink" title="GROUP_CONCAT 聚合成列表"></a>GROUP_CONCAT 聚合成列表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(`name`, <span class="number">1</span>, <span class="number">1</span>)                                         <span class="keyword">AS</span> first_name,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="operator">*</span>)                                                        <span class="keyword">AS</span> count_name,</span><br><span class="line">       GROUP_CONCAT(CONCAT(name, <span class="string">&#x27;: &#x27;</span>, id) <span class="keyword">ORDER</span> <span class="keyword">BY</span> id SEPARATOR <span class="string">&#x27;, &#x27;</span>) <span class="keyword">AS</span> students</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">&gt;</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> first_name</span><br><span class="line"><span class="keyword">HAVING</span> count_name <span class="operator">&gt;</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="CASE-WHEN-条件聚合"><a href="#CASE-WHEN-条件聚合" class="headerlink" title="CASE WHEN 条件聚合"></a>CASE WHEN 条件聚合</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> user_id,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="operator">*</span>)                                         <span class="keyword">AS</span> total_orders,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> status <span class="operator">=</span> <span class="string">&#x27;PAID&#x27;</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">END</span>)      <span class="keyword">AS</span> paid_orders,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="keyword">CASE</span> <span class="keyword">WHEN</span> status <span class="operator">=</span> <span class="string">&#x27;CANCELLED&#x27;</span> <span class="keyword">THEN</span> <span class="number">1</span> <span class="keyword">END</span>) <span class="keyword">AS</span> cancelled_orders</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> user_id;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>常配合order by，因为group by 不一定有序，可能随机返回数据</li><li>GROUP BY 字段顺序影响结果</li><li>不要 SELECT DISTINCT 与 GROUP BY 混用，虽然语法允许，但逻辑重复，性能无益，应使用其一即可。</li></ul><p>聚合函数注意空值处理</p><ul><li>COUNT(column) 不计 NULL。</li><li>SUM(column) 和 AVG(column) 会跳过 NULL。</li><li>使用 COALESCE 可处理空值：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_id, <span class="built_in">SUM</span>(<span class="built_in">COALESCE</span>(salary, <span class="number">0</span>))</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br></pre></td></tr></table></figure><p>汇总</p><table><thead><tr><th>点</th><th>说明</th></tr></thead><tbody><tr><td>聚合函数配合使用</td><td>如 <code>SUM()</code>、<code>AVG()</code>、<code>COUNT()</code> 等</td></tr><tr><td><code>GROUP BY</code>字段</td><td>SELECT 中除聚合列以外的字段，<strong>必须出现在 GROUP BY 子句中</strong>（SQL_MODE 依赖）</td></tr><tr><td><code>HAVING</code> vs <code>WHERE</code></td><td><code>WHERE</code> 是在分组前过滤，<code>HAVING</code> 是在分组后过滤</td></tr><tr><td>顺序</td><td>先 <code>WHERE</code> → 再 <code>GROUP BY</code> → 再 <code>HAVING</code> → 最后 <code>ORDER BY</code></td></tr></tbody></table><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用子查询</span></span><br><span class="line">explain</span><br><span class="line"><span class="keyword">SELECT</span> goods_name,</span><br><span class="line">       supplier,</span><br><span class="line">       category_id</span><br><span class="line"><span class="keyword">FROM</span> goods</span><br><span class="line"><span class="keyword">WHERE</span> supplier <span class="keyword">IN</span> (<span class="keyword">select</span> supplier <span class="keyword">from</span> goods <span class="keyword">where</span> category_id <span class="operator">=</span> <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用子查询(临时表)</span></span><br><span class="line">explain</span><br><span class="line"><span class="keyword">SELECT</span> t.goods_name,</span><br><span class="line">       t.supplier,</span><br><span class="line">       t.category_id</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">      <span class="keyword">FROM</span> goods <span class="keyword">as</span> g2</span><br><span class="line">      <span class="keyword">where</span> g2.category_id <span class="operator">=</span> <span class="number">2</span>) <span class="keyword">as</span> t;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用 exists 子查询</span></span><br><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> goods_name,</span><br><span class="line">       supplier,</span><br><span class="line">       category_id</span><br><span class="line"><span class="keyword">FROM</span> goods <span class="keyword">as</span> g1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">exists</span>(<span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">             <span class="keyword">FROM</span> goods <span class="keyword">as</span> g2</span><br><span class="line">             <span class="keyword">WHERE</span> g2.supplier <span class="operator">=</span> g1.supplier</span><br><span class="line">               <span class="keyword">and</span> g2.category_id <span class="operator">=</span> <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 作为计算字段使用子查询</span></span><br><span class="line"><span class="keyword">SELECT</span> goods_name,</span><br><span class="line">       supplier,</span><br><span class="line">       (<span class="keyword">select</span> category_name <span class="keyword">from</span> category <span class="keyword">where</span> category.id <span class="operator">=</span> goods.category_id) <span class="keyword">as</span> category_name</span><br><span class="line"><span class="keyword">FROM</span> goods</span><br><span class="line"><span class="keyword">WHERE</span> category_id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>总结对比表</p><table><thead><tr><th>对比项</th><th><code>IN (SELECT)</code></th><th><code>EXISTS (SELECT)</code></th></tr></thead><tbody><tr><td>子查询类型</td><td>非相关子查询（物化执行）</td><td>相关子查询（每行动态执行）</td></tr><tr><td>去重</td><td>自动去重（逻辑层）</td><td>不去重（存在一条即返回 TRUE）</td></tr><tr><td>临时表</td><td>会构建临时表</td><td>不构建</td></tr><tr><td>索引使用</td><td>子查询可优化走索引</td><td>主表+子表都能利用索引</td></tr><tr><td>数据量小时优势</td><td>快（整体构造临时集合后快速比对）</td><td>稍慢（每行查子表）</td></tr><tr><td>数据量大时优势</td><td>慢（物化+大集合查找性能差）</td><td>快（存在即返回，避免全查）</td></tr><tr><td>语义</td><td>“是否属于集合”</td><td>“是否存在某种匹配”</td></tr><tr><td>推荐使用场景</td><td>子查询数据较小、字段唯一性强</td><td>子查询结果大、重复多、存在性判断为主</td></tr></tbody></table><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><h4 id="子查询内排序不会对外层生效"><a href="#子查询内排序不会对外层生效" class="headerlink" title="子查询内排序不会对外层生效"></a>子查询内排序不会对外层生效</h4><p>如果在子查询里使用了 ORDER BY，但 外层查询没有 ORDER BY 的话，最终结果并不会保证是“排序后的”。</p><p>这是因为 SQL 的“结果集顺序”只有在最外层 ORDER BY 明确指定时才有保证。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 子查询内排序不会对外层生效</span></span><br><span class="line"><span class="keyword">SELECT</span> id,</span><br><span class="line">       goods_name,</span><br><span class="line">       supplier</span><br><span class="line"><span class="keyword">FROM</span> goods <span class="keyword">as</span> g1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">exists</span>(<span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">             <span class="keyword">FROM</span> goods <span class="keyword">as</span> g2</span><br><span class="line">             <span class="keyword">WHERE</span> g2.supplier <span class="operator">=</span> g1.supplier</span><br><span class="line">               <span class="keyword">and</span> g2.category_id <span class="operator">=</span> <span class="number">3</span></span><br><span class="line">             <span class="keyword">order</span> <span class="keyword">by</span> g2.id <span class="keyword">desc</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SQL 的“结果集顺序”只有在最外层 ORDER BY 明确指定时才有保证</span></span><br><span class="line"><span class="keyword">SELECT</span> id,</span><br><span class="line">       goods_name,</span><br><span class="line">       supplier</span><br><span class="line"><span class="keyword">FROM</span> goods <span class="keyword">as</span> g1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">exists</span>(<span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">             <span class="keyword">FROM</span> goods <span class="keyword">as</span> g2</span><br><span class="line">             <span class="keyword">WHERE</span> g2.supplier <span class="operator">=</span> g1.supplier</span><br><span class="line">               <span class="keyword">and</span> g2.category_id <span class="operator">=</span> <span class="number">3</span>)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> g1.id <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure><h4 id="子查询内使用LIMIT的限制"><a href="#子查询内使用LIMIT的限制" class="headerlink" title="子查询内使用LIMIT的限制"></a>子查询内使用LIMIT的限制</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 不合法</span></span><br><span class="line"><span class="keyword">SELECT</span> id,</span><br><span class="line">       goods_name,</span><br><span class="line">       supplier,</span><br><span class="line">       category_id</span><br><span class="line"><span class="keyword">FROM</span> goods <span class="keyword">as</span> g1</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">exists</span>(<span class="keyword">SELECT</span> <span class="number">1</span></span><br><span class="line">             <span class="keyword">FROM</span> goods <span class="keyword">as</span> g2</span><br><span class="line">             <span class="keyword">WHERE</span> g2.supplier <span class="operator">=</span> g1.supplier</span><br><span class="line">               <span class="keyword">and</span> g2.category_id <span class="operator">=</span> <span class="number">3</span></span><br><span class="line">             <span class="keyword">order</span> <span class="keyword">by</span> g2.id <span class="comment">/*limit 5*/</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 合法</span></span><br><span class="line"><span class="keyword">SELECT</span> t.id,</span><br><span class="line">       t.goods_name,</span><br><span class="line">       t.supplier,</span><br><span class="line">       t.category_id</span><br><span class="line"><span class="keyword">from</span> (<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">      <span class="keyword">FROM</span> goods <span class="keyword">as</span> g2</span><br><span class="line">      <span class="keyword">where</span> g2.category_id <span class="operator">=</span> <span class="number">3</span></span><br><span class="line">      <span class="keyword">order</span> <span class="keyword">by</span> id</span><br><span class="line">      limit <span class="number">1</span>) <span class="keyword">as</span> t;</span><br></pre></td></tr></table></figure><hr><h2 id="联结表（join）"><a href="#联结表（join）" class="headerlink" title="联结表（join）"></a>联结表（join）</h2><h3 id="自然联结"><a href="#自然联结" class="headerlink" title="自然联结"></a>自然联结</h3><ul><li>笛卡儿积（cartesianproduct） : 没有联结条件的表关系返回的结果为笛卡儿积。检索出的行的数目将是第一个表中的行数乘以第二个表中的行数。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 自然联结</span></span><br><span class="line"><span class="keyword">SELECT</span> g.<span class="operator">*</span>,</span><br><span class="line">       c.category_desc</span><br><span class="line"><span class="keyword">FROM</span> goods <span class="keyword">AS</span> g,</span><br><span class="line">     category <span class="keyword">AS</span> c</span><br><span class="line"><span class="keyword">WHERE</span> g.category_id <span class="operator">=</span> c.id; <span class="comment">-- 联结条件</span></span><br></pre></td></tr></table></figure><h3 id="内部联结"><a href="#内部联结" class="headerlink" title="内部联结"></a>内部联结</h3><ul><li>每个内部联结都是自然联结, 避免缺失连接条件（如 g1.supplier &#x3D; g2.supplier），导致产生 笛卡尔积</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 内部联结</span></span><br><span class="line"><span class="keyword">SELECT</span> g.<span class="operator">*</span>,</span><br><span class="line">       c.category_desc</span><br><span class="line"><span class="keyword">FROM</span> goods <span class="keyword">AS</span> g,</span><br><span class="line">     <span class="keyword">inner</span></span><br><span class="line">         <span class="keyword">join</span> category <span class="keyword">as</span> c <span class="keyword">on</span> g.category_id <span class="operator">=</span> c.id</span><br></pre></td></tr></table></figure><h3 id="外部联结"><a href="#外部联结" class="headerlink" title="外部联结"></a>外部联结</h3><p>与内部联结关联两个表中的行不同的是，外部联结还包括没有关联行的行。在使用OUTER JOIN 语法时，必须使用RIGHT 或LEFT</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 左外部联结，小表驱动大表</span></span><br><span class="line"><span class="keyword">SELECT</span> goods_name,</span><br><span class="line">       category_desc</span><br><span class="line"><span class="keyword">FROM</span> goods</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> category <span class="keyword">ON</span> category.id <span class="operator">=</span> goods.category_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> goods_name;</span><br></pre></td></tr></table></figure><h3 id="sql-join-图"><a href="#sql-join-图" class="headerlink" title="sql-join 图"></a>sql-join 图</h3><p><img src="/image/code-adventure/mysql/sql-join.png" alt="sql-join"></p><p>假设有两个表：</p><p>表 A（左表）</p><p>表 B（右表）</p><p>每种 JOIN 类型表示的是：从 A 和 B 中选出哪些记录。</p><table><thead><tr><th>JOIN 类型</th><th>描述</th><th>图示概念（A 和 B 的集合关系）</th></tr></thead><tbody><tr><td><code>INNER JOIN</code></td><td>只保留两个表中都存在的匹配记录</td><td>A ∩ B（交集）</td></tr><tr><td><code>LEFT JOIN</code></td><td>保留左表所有记录，右表没有匹配则为 NULL</td><td>A ∪ (A ∩ B)，即 A 全部 + 匹配 B 的部分</td></tr><tr><td><code>RIGHT JOIN</code></td><td>保留右表所有记录，左表没有匹配则为 NULL</td><td>B ∪ (A ∩ B)，即 B 全部 + 匹配 A 的部分</td></tr><tr><td><code>FULL OUTER JOIN</code></td><td>A 和 B 所有记录，没有匹配的补 NULL</td><td>A ∪ B（并集）</td></tr><tr><td><code>LEFT SEMI JOIN</code></td><td>保留 A 中“有匹配”的记录，不显示 B 的字段</td><td>A 中能匹配到 B 的部分</td></tr><tr><td><code>LEFT ANTI JOIN</code></td><td>保留 A 中“没有匹配”的记录</td><td>A 中不能匹配到 B 的部分</td></tr><tr><td><code>CROSS JOIN</code></td><td>笛卡尔积：A 的每行都与 B 的每行组合</td><td>A × B（每行两两组合）</td></tr></tbody></table><ul><li>MySQL 不支持 FULL OUTER JOIN，可以用 UNION 模拟；</li><li>SEMI &#x2F; ANTI JOIN 是逻辑概念，MySQL 会通过 EXISTS 或 NOT EXISTS 来模拟。</li></ul><p>实际语法示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- INNER JOIN, 等价于 JOIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line">         <span class="keyword">INNER</span> <span class="keyword">JOIN</span> B <span class="keyword">ON</span> A.id <span class="operator">=</span> B.a_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- LEFT JOIN, 等价于 LEFT OUTER JOIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B <span class="keyword">ON</span> A.id <span class="operator">=</span> B.a_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- RIGHT JOIN</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line">         <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B <span class="keyword">ON</span> A.id <span class="operator">=</span> B.a_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- FULL OUTER JOIN (MySQL不支持，可用 UNION)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> B <span class="keyword">ON</span> A.id <span class="operator">=</span> B.a_id</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line">         <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> B <span class="keyword">ON</span> A.id <span class="operator">=</span> B.a_id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SEMI JOIN (用 EXISTS 实现), A 中有 B 中没有的行</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> B <span class="keyword">WHERE</span> A.id <span class="operator">=</span> B.a_id);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ANTI JOIN (用 NOT EXISTS 实现), A 中没有 B 中有的行</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> A</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> <span class="number">1</span> <span class="keyword">FROM</span> B <span class="keyword">WHERE</span> A.id <span class="operator">=</span> B.a_id);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="用自联结而不用子查询"><a href="#用自联结而不用子查询" class="headerlink" title="用自联结而不用子查询"></a>用自联结而不用子查询</h3><h4 id="建表语句"><a href="#建表语句" class="headerlink" title="建表语句"></a>建表语句</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `goods`</span><br><span class="line">(</span><br><span class="line">    `id`          <span class="type">bigint</span>(<span class="number">0</span>) UNSIGNED                                            <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">    `goods_name`  <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品名称&#x27;</span>,</span><br><span class="line">    `supplier`    <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;供货商&#x27;</span>,</span><br><span class="line">    `category_id` <span class="type">int</span>(<span class="number">0</span>)                                                        <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品种类&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">    KEY `key_category_id` (`category_id`) <span class="keyword">USING</span> BTREE COMMENT <span class="string">&#x27;分类id索引&#x27;</span></span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4</span><br><span class="line">  <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci</span><br><span class="line">  ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `category`</span><br><span class="line">(</span><br><span class="line">    `id`            <span class="type">bigint</span>(<span class="number">0</span>) UNSIGNED                                            <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">    `category_name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分类名称&#x27;</span>,</span><br><span class="line">    `category_desc` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分类描述&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4</span><br><span class="line">  <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci</span><br><span class="line">  ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br></pre></td></tr></table></figure><h4 id="两种实现方式"><a href="#两种实现方式" class="headerlink" title="两种实现方式"></a>两种实现方式</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用子查询</span></span><br><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> goods_name,</span><br><span class="line">       supplier</span><br><span class="line"><span class="keyword">FROM</span> goods <span class="keyword">as</span> g1</span><br><span class="line"><span class="keyword">WHERE</span> g1.supplier <span class="keyword">IN</span> (<span class="keyword">SELECT</span> g2.supplier</span><br><span class="line">                      <span class="keyword">FROM</span> goods <span class="keyword">as</span> g2</span><br><span class="line">                      <span class="keyword">WHERE</span> g2.category_id <span class="operator">=</span> <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- IN (子查询) 会自动对子查询结果去重</span></span><br><span class="line"><span class="keyword">SELECT</span> goods_name,</span><br><span class="line">       supplier</span><br><span class="line"><span class="keyword">FROM</span> goods <span class="keyword">as</span> g1</span><br><span class="line"><span class="keyword">WHERE</span> g1.supplier <span class="keyword">IN</span> (<span class="string">&#x27;美团&#x27;</span>, <span class="string">&#x27;美团&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用自联结</span></span><br><span class="line"><span class="comment">-- 注意点 1. 避免缺失连接条件（如 g1.supplier = g2.supplier），导致产生 笛卡尔积</span></span><br><span class="line"><span class="comment">-- 注意点 2. 加上 DISTINCT 避免重复 supplier（如某供货商有多条匹配记录）</span></span><br><span class="line">EXPLAIN</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> g1.goods_name, g1.supplier</span><br><span class="line"><span class="keyword">FROM</span> goods g1</span><br><span class="line">         <span class="keyword">JOIN</span> goods g2</span><br><span class="line">              <span class="keyword">ON</span> g1.supplier <span class="operator">=</span> g2.supplier</span><br><span class="line"><span class="keyword">WHERE</span> g2.category_id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="sql执行计划"><a href="#sql执行计划" class="headerlink" title="sql执行计划"></a>sql执行计划</h4><ul><li>使用子查询</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| id | `select_type` | table         | partitions | type    | `possible_keys`       | key                    | `key_len` | ref                       | rows | filtered | Extra       |</span><br><span class="line">|:---|:--------------|:--------------|:-----------|:--------|:----------------------|:-----------------------|:----------|:--------------------------|:-----|:---------|:------------|</span><br><span class="line">| 1  | SIMPLE        | g1            | null       | ALL     | null                  | null                   | null      | null                      | 4    | 100      | Using where |</span><br><span class="line">| 1  | SIMPLE        | `&lt;subquery2&gt;` | null       | eq\_ref | `&lt;auto_distinct_key&gt;` | `&lt;auto_distinct_key&gt;  ` | 1023      | `mysql_tech.g1.supplier    ` | 1    | 100      | null        |</span><br><span class="line">| 2  | MATERIALIZED  | g2            | null       | ref     | `key_category_id`     | `key_category_id`      | 5         | const                     | 2    | 100      | null        |</span><br></pre></td></tr></table></figure><ul><li>使用自联结</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">| id | `select_type` | table | partitions | type | `possible_keys`   | key               | `key_len` | ref   | rows | filtered | Extra                                        |</span><br><span class="line">|:---|:--------------|:------|:-----------|:-----|:------------------|:------------------|:----------|:------|:-----|:---------|:---------------------------------------------|</span><br><span class="line">| 1  | SIMPLE        | g2    | null       | ref  | `key_category_id` | `key_category_id` | 4         | const | 2    | 100      | Using index                                  |</span><br><span class="line">| 1  | SIMPLE        | g1    | null       | ALL  | null              | null              | null      | null  | 5    | 20       | `Using where; Using join buffer (hash join)` |</span><br></pre></td></tr></table></figure><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><h5 id="使用子查询"><a href="#使用子查询" class="headerlink" title="使用子查询"></a>使用子查询</h5><ul><li>子查询: 使用 key_category_id 索引过滤 category_id&#x3D;2 的供应商（rows&#x3D;2），并物化为临时表，效率较高。</li><li>主查询 g1 对 goods 表进行全表扫描（type&#x3D;ALL），因为 supplier 字段无索引，导致逐行过滤（Using where）对每行做 IN<br>判断（在临时表中是否存在该 supplier）。</li></ul><p>✅ 优势</p><ul><li>使用了子查询物化（MATERIALIZED），子查询只执行一次，效率比嵌套子查询好。</li><li>临时表自动优化去重</li><li>结构清晰，业务含义直观。</li></ul><p>❌ 劣势</p><ul><li>主查询全表扫描 (type &#x3D; ALL)，因为 supplier 无索引，全表扫描在大数据量时性能差。</li><li>物化临时表有内存&#x2F;磁盘开销</li><li>IN (…) 子查询较大时，判断效率下降（虽然 MySQL 内部会优化，但不如 JOIN 高效）。</li></ul><h4 id="优化建议"><a href="#优化建议" class="headerlink" title="优化建议"></a>优化建议</h4><p>创建必要索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- supplier 是连接条件关键字段</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_supplier <span class="keyword">ON</span> goods (supplier);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- category_id 已有索引，无需重复创建</span></span><br><span class="line"><span class="comment">-- 若查询仅需 category_id 和 supplier 且 JOIN 频繁，可考虑联合索引</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_supplier_category <span class="keyword">ON</span> goods (supplier, category_id);</span><br></pre></td></tr></table></figure><p>总结</p><table><thead><tr><th>建议</th><th>说明</th></tr></thead><tbody><tr><td>✅ 使用自联结代替子查询</td><td>性能更优，JOIN 可走索引</td></tr><tr><td>✅ 添加 <code>supplier</code> 索引</td><td>无此索引时无法避免全表扫描</td></tr><tr><td>✅ 子查询适合数据量小场景</td><td>大数据量建议使用 JOIN 替代</td></tr><tr><td>✅ 避免笛卡尔积写法</td><td>联结必须使用连接条件如 <code>g1.supplier = g2.supplier</code></td></tr></tbody></table><ul><li>子查询适合小结果集过滤，如 IN (10个以内)</li><li>自联结适合“基于属性等值查找”，如 supplier 作为连接字段时配合索引使用。</li><li>如有性能问题，考虑写法变更为 JOIN + DISTINCT，避免重复结果。</li></ul><h2 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h2><h3 id="使用UNION"><a href="#使用UNION" class="headerlink" title="使用UNION"></a>使用UNION</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> goods</span><br><span class="line"><span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> goods</span><br><span class="line"><span class="keyword">where</span> category_id <span class="operator">&gt;</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用UNION ALL</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> goods</span><br><span class="line"><span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">select</span> id</span><br><span class="line"><span class="keyword">from</span> goods</span><br><span class="line"><span class="keyword">where</span> category_id <span class="operator">&gt;</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>在使用UNION 时，重复的行被自动取消。</li><li>如果想返回所有匹配行，可使用UNION ALL。</li><li>UNION 中的每个查询必须包含相同的列、表达式或聚集函数（不过各个列不需要以相同的次序列出）。</li><li>列数据类型必须兼容：类型不必完全相同，但必须是DBMS可以隐含地转换的类型（例如，不同的数值类型或不同的日期类型）。</li><li>对组合查询结果排序，只能使用一条ORDER BY 子句，它必须出现在最后一条SELECT语句之后。</li></ol><p>错误示例</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- [21000][1222] The used SELECT statements have a different number of columns</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> goods</span><br><span class="line"><span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">select</span> id</span><br><span class="line"><span class="keyword">from</span> goods</span><br><span class="line"><span class="keyword">where</span> category_id <span class="operator">&gt;</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- [42000][1064] You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;UNION&#x27; at line 2</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> goods</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">&gt;</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> goods_name</span><br><span class="line">    <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> goods</span><br><span class="line"><span class="keyword">WHERE</span> category_id <span class="operator">&lt;</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> id;</span><br></pre></td></tr></table></figure><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h3><table><thead><tr><th>函数</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>CONCAT(a, b)</code></td><td>字符串拼接</td><td><code>CONCAT(&#39;Hello&#39;, &#39;World&#39;) → HelloWorld</code></td></tr><tr><td><code>LENGTH(s)</code></td><td>字节长度（中文占 3 字节）</td><td><code>LENGTH(&#39;你好&#39;) → 6</code></td></tr><tr><td><code>CHAR_LENGTH(s)</code></td><td>字符长度</td><td><code>CHAR_LENGTH(&#39;你好&#39;) → 2</code></td></tr><tr><td><code>UPPER(s)</code></td><td>转为大写</td><td><code>UPPER(&#39;abc&#39;) → ABC</code></td></tr><tr><td><code>LOWER(s)</code></td><td>转为小写</td><td><code>LOWER(&#39;ABC&#39;) → abc</code></td></tr><tr><td><code>SUBSTRING(s, from, len)</code></td><td>字符串截取</td><td><code>SUBSTRING(&#39;abcdef&#39;, 2, 3) → bcd</code></td></tr><tr><td><code>TRIM(s)</code></td><td>去除首尾空格</td><td><code>TRIM(&#39; abc &#39;) → abc</code></td></tr><tr><td><code>REPLACE(s, old, new)</code></td><td>替换子串</td><td><code>REPLACE(&#39;a-b-c&#39;, &#39;-&#39;, &#39;,&#39;) → a,b,c</code></td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- CONCAT: 连接字符串</span></span><br><span class="line"><span class="comment">-- 如果其中任意一个参数为 NULL，结果就是 NULL。</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;World&#x27;</span>, <span class="string">&#x27;!&#x27;</span>) <span class="keyword">AS</span> result1;</span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="keyword">NULL</span>, <span class="string">&#x27;text&#x27;</span>) <span class="keyword">AS</span> result3;</span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="keyword">NULL</span>, <span class="keyword">NULL</span>) <span class="keyword">AS</span> result4;</span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, IFNULL(<span class="keyword">NULL</span>, <span class="string">&#x27;B&#x27;</span>)) <span class="keyword">AS</span> result5;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- CONCAT_WS:  连接字符串，并添加分隔符</span></span><br><span class="line"><span class="comment">-- 忽略 NULL 值（不同与 CONCAT）</span></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT_WS(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;Hello&#x27;</span>, <span class="string">&#x27;My&#x27;</span>, <span class="string">&#x27;World&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> CONCAT_WS(<span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;First&#x27;</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;Last&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h3><table><thead><tr><th>函数</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>ABS(x)</code></td><td>绝对值</td><td><code>ABS(-5) → 5</code></td></tr><tr><td><code>CEIL(x)</code> &#x2F; <code>CEILING(x)</code></td><td>向上取整</td><td><code>CEIL(2.3) → 3</code></td></tr><tr><td><code>FLOOR(x)</code></td><td>向下取整</td><td><code>FLOOR(2.9) → 2</code></td></tr><tr><td><code>ROUND(x, d)</code></td><td>四舍五入保留 d 位小数</td><td><code>ROUND(3.1415, 2) → 3.14</code></td></tr><tr><td><code>MOD(x, y)</code></td><td>取模</td><td><code>MOD(10, 3) → 1</code></td></tr><tr><td><code>RAND()</code></td><td>生成 0 到 1 的随机数</td><td><code>RAND() → 0.6257</code></td></tr></tbody></table><h3 id="日期时间函数"><a href="#日期时间函数" class="headerlink" title="日期时间函数"></a>日期时间函数</h3><table><thead><tr><th>函数</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>NOW()</code></td><td>当前时间（带日期）</td><td><code>NOW() → 2025-05-31 10:00:00</code></td></tr><tr><td><code>CURDATE()</code></td><td>当前日期</td><td><code>CURDATE() → 2025-05-31</code></td></tr><tr><td><code>CURTIME()</code></td><td>当前时间</td><td><code>CURTIME() → 10:00:00</code></td></tr><tr><td><code>DATE_FORMAT(dt, format)</code></td><td>日期格式化</td><td><code>DATE_FORMAT(NOW(), &#39;%Y-%m-%d&#39;) → 2025-05-31</code></td></tr><tr><td><code>DATEDIFF(d1, d2)</code></td><td>两日期相差天数</td><td><code>DATEDIFF(&#39;2025-06-01&#39;, &#39;2025-05-31&#39;) → 1</code></td></tr><tr><td><code>TIMESTAMPDIFF(unit, d1, d2)</code></td><td>相差的年&#x2F;月&#x2F;日等</td><td><code>TIMESTAMPDIFF(MONTH, &#39;2024-01-01&#39;, &#39;2025-01-01&#39;) → 12</code></td></tr><tr><td><code>ADDDATE(date, n)</code></td><td>日期加 n 天</td><td><code>ADDDATE(&#39;2025-05-31&#39;, 5) → 2025-06-05</code></td></tr></tbody></table><h3 id="条件函数"><a href="#条件函数" class="headerlink" title="条件函数"></a>条件函数</h3><table><thead><tr><th>函数</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td><code>IF(expr, a, b)</code></td><td>条件为 true 返回 a，否则返回 b</td><td><code>IF(score &gt; 60, &#39;及格&#39;, &#39;不及格&#39;)</code></td></tr><tr><td><code>IFNULL(x, y)</code></td><td>x 为 NULL 返回 y</td><td><code>IFNULL(username, &#39;未知&#39;)</code></td></tr><tr><td><code>NULLIF(x, y)</code></td><td>如果 x&#x3D;y，则返回 NULL，否则返回 x</td><td><code>NULLIF(1, 1) → NULL</code></td></tr><tr><td><code>CASE WHEN ... THEN ... ELSE ... END</code></td><td>多条件判断</td><td>用法见上条内容</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 根据订单状态生成中文描述</span></span><br><span class="line"><span class="keyword">SELECT</span> id,</span><br><span class="line">       status,</span><br><span class="line">       <span class="keyword">CASE</span> status</span><br><span class="line">           <span class="keyword">WHEN</span> <span class="string">&#x27;PAID&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;已付款&#x27;</span></span><br><span class="line">           <span class="keyword">WHEN</span> <span class="string">&#x27;CANCEL&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;已取消&#x27;</span></span><br><span class="line">           <span class="keyword">WHEN</span> <span class="string">&#x27;PENDING&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;待处理&#x27;</span></span><br><span class="line">           <span class="keyword">ELSE</span> <span class="string">&#x27;未知状态&#x27;</span></span><br><span class="line">           <span class="keyword">END</span> <span class="keyword">AS</span> status_desc</span><br><span class="line"><span class="keyword">FROM</span> orders;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h1><h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 单条插入</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (id, name, age)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;Alice&#x27;</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--批量</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (id, name, age)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;Alice&#x27;</span>, <span class="number">25</span>),</span><br><span class="line">       (<span class="number">3</span>, <span class="string">&#x27;Alice&#x27;</span>, <span class="number">25</span>);</span><br></pre></td></tr></table></figure><h2 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> users</span><br><span class="line"><span class="keyword">SET</span> age <span class="operator">=</span> <span class="number">26</span></span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><blockquote><p>注意：不加 WHERE 会更新整张表！</p></blockquote><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> users</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除整张表</span></span><br><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> users</span><br><span class="line"><span class="keyword">WHERE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除整张表, 更高效但不可回滚，不触发 DELETE 触发器。</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> users;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM 知识提升</title>
      <link href="/d5d7710f.html"/>
      <url>/d5d7710f.html</url>
      
        <content type="html"><![CDATA[<h1 id="JIT优化"><a href="#JIT优化" class="headerlink" title="JIT优化"></a>JIT优化</h1><ul><li>解释器（Interpreter）：逐行解释执行字节码，启动快但慢。</li><li>JIT 编译器：热点代码在运行时被编译为本地机器码，提高性能。</li><li>JIT 并不会编译所有代码，而是采用 热点探测 + 编译 策略</li></ul><p>热点代码识别方式</p><ul><li>方法调用计数（方法调用次数）</li><li>回边计数（Back Edge Counting）：判断循环次数</li><li>内联调用深度</li></ul><h2 id="JIT-常见优化技术"><a href="#JIT-常见优化技术" class="headerlink" title="JIT 常见优化技术"></a>JIT 常见优化技术</h2><p>方法内联 、 逃逸分析 、循环展开、循环优化 、 死代码消除 、 常量折叠、公共子表达式消除</p><h3 id="逃逸分析（Escape-Analysis）的优化"><a href="#逃逸分析（Escape-Analysis）的优化" class="headerlink" title="逃逸分析（Escape Analysis）的优化"></a>逃逸分析（Escape Analysis）的优化</h3><p>现代JVM（如HotSpot）在运行时通过<strong>逃逸分析</strong>判断对象的生命周期是否仅限于当前方法或线程：</p><p><strong>若对象未逃逸，JVM可能应用以下优化：</strong></p><p><strong>标量替换（Scalar Replacement）</strong><br>将对象拆解为基本类型（如<code>int</code>、<code>long</code>），直接在栈上分配其字段，避免创建完整对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例：Point对象被拆解为两个int变量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Point</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 未逃逸</span></span><br><span class="line">    System.out.println(p.x + p.y); <span class="comment">// 优化为：int x=1, y=2;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>栈上分配（Stack Allocation）</strong><br>直接将对象分配在栈帧中，随方法结束自动销毁（无需GC介入）。<br><em>注：HotSpot JVM主要使用标量替换，栈上分配实际较少使用。</em></p><p><strong>锁消除（Lock Elision）</strong>：移除未逃逸对象的同步锁</p><h2 id="Java中的对象一定在堆上分配内存吗"><a href="#Java中的对象一定在堆上分配内存吗" class="headerlink" title="Java中的对象一定在堆上分配内存吗"></a>Java中的对象一定在堆上分配内存吗</h2><p>在Java中，<strong>对象通常（且绝大多数情况下）在堆（Heap）上分配内存</strong>，这是Java内存模型的基本规则。</p><p>但现代JVM（如HotSpot）会通过_逃逸分析（Escape Analysis）_ 等优化技术，在特定条件下将对象拆解或直接分配在栈（Stack）上，从而避免堆分配的开销。</p><h1 id="JVM如何判断对象是否存活"><a href="#JVM如何判断对象是否存活" class="headerlink" title="JVM如何判断对象是否存活"></a>JVM如何判断对象是否存活</h1><h3 id="两种算法"><a href="#两种算法" class="headerlink" title="两种算法"></a>两种算法</h3><h4 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h4><ul><li>每个对象维护一个引用计数器，有引用时加 1，引用失效时减 1，为 0 表示对象可回收。</li><li>无法解决循环引用问题，因此 <strong>HotSpot JVM 不使用它。</strong></li></ul><h4 id="可达性分析法"><a href="#可达性分析法" class="headerlink" title="可达性分析法"></a>可达性分析法</h4><p>从“GC Roots”出发，沿着对象引用链向下搜索，能到达的对象都是“存活的”；反之则是“不可达”。</p><p>GC Roots 是一组特殊的对象作为根节点，它们永远是“存活的”</p><table><thead><tr><th>来源类型</th><th>描述</th></tr></thead><tbody><tr><td><strong>虚拟机栈中的引用</strong></td><td>方法区中的局部变量表、参数等（即：栈帧中的引用）</td></tr><tr><td><strong>方法区中的类静态属性引用的对象</strong></td><td><code>static</code> 修饰的引用变量</td></tr><tr><td><strong>方法区中常量引用</strong></td><td><code>final</code> 修饰的引用，或字符串常量池</td></tr><tr><td><strong>JNI 引用（本地方法栈）</strong></td><td>本地代码（如 C&#x2F;C++）引用的对象</td></tr><tr><td><strong>活动线程对象自身</strong></td><td>所有正在运行的线程对象</td></tr></tbody></table><h3 id="对象不可达-≠-马上回收（“两次判死”机制）"><a href="#对象不可达-≠-马上回收（“两次判死”机制）" class="headerlink" title="对象不可达 ≠ 马上回收（“两次判死”机制）"></a>对象不可达 ≠ 马上回收（“两次判死”机制）</h3><p>JVM 判断对象是否存活的全过程</p><ul><li>使用<strong>可达性分析</strong>法判断引用链是否连接到 GC Roots</li><li>如果不可达，查看是否实现 <code>finalize()</code></li><li>如果实现且未执行过，则进入 F-Queue 调用 <code>finalize()</code></li><li>finalize 后如果仍不可达，则对象被回收</li></ul><h3 id="三色标记法"><a href="#三色标记法" class="headerlink" title="三色标记法"></a>三色标记法</h3><table><thead><tr><th><strong>方面</strong></th><th>说明</th></tr></thead><tbody><tr><td><strong>三色分类</strong></td><td>白（未访问）&#x2F;灰（待处理）&#x2F;黑（处理完成）</td></tr><tr><td><strong>目的</strong></td><td>支持并发标记时的正确 GC</td></tr><tr><td><strong>问题</strong></td><td>并发引用变更可能误回收</td></tr><tr><td><strong>解决方案</strong></td><td>写屏障（插入&#x2F;删除），保持引用快照一致</td></tr><tr><td><strong>应用</strong></td><td>CMS、G1、ZGC、Shenandoah 等现代 GC 收集器</td></tr></tbody></table><h1 id="什么是Stop-The-World"><a href="#什么是Stop-The-World" class="headerlink" title="什么是Stop The World"></a><strong>什么是Stop The World</strong></h1><h2 id="哪些操作会触发-Stop-The-World"><a href="#哪些操作会触发-Stop-The-World" class="headerlink" title="哪些操作会触发 Stop The World"></a>哪些操作会触发 Stop The World</h2><table><thead><tr><th>操作类型</th><th>是否触发 STW</th><th>说明</th></tr></thead><tbody><tr><td><strong>Minor GC</strong>（年轻代回收）</td><td>✅ 是</td><td>一般耗时较短，依然会暂停所有线程</td></tr><tr><td><strong>Major GC &#x2F; Full GC</strong>（老年代或整堆）</td><td>✅ 是</td><td>通常时间更长，对应用影响大</td></tr><tr><td><strong>类元数据卸载（Class Unloading）</strong></td><td>✅ 是</td><td>扫描和卸载类信息</td></tr><tr><td><strong>JVM 诊断（如 Heap Dump）</strong></td><td>✅ 是</td><td>比如 <code>jmap -dump</code></td></tr><tr><td><strong>Thread Dump &#x2F; SafePoint 操作</strong></td><td>✅ 是</td><td>比如 <code>jstack</code> 时触发</td></tr><tr><td><strong>JIT 编译</strong></td><td>有时是</td><td>某些阶段也可能会暂停线程</td></tr></tbody></table><h1 id="JVM-的垃圾回收（GC）算法"><a href="#JVM-的垃圾回收（GC）算法" class="headerlink" title="JVM 的垃圾回收（GC）算法"></a>JVM 的垃圾回收（GC）算法</h1><h2 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h2><table><thead><tr><th>算法名称</th><th>核心原理</th><th>优缺点</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>标记-清除（Mark-Sweep）</strong></td><td>+ 标记存活对象   + 清除未标记兑现内存</td><td>缺点：<br/>+ <strong>内存碎片</strong>：产生不连续内存空间<br/>+ <strong>STW（Stop-The-World）</strong>：全程暂停用户线程</td><td>CMS 回收器的老年代回收阶段</td></tr><tr><td><strong>复制算法（Copying）</strong></td><td>+ 将内存分为 <strong>From</strong> 和 <strong>To</strong> 两区   + 将存活对象复制到 To 区，清空 From 区</td><td>优点：无碎片、高效（仅复制存活对象）   缺点：<strong>内存利用率仅 50%</strong></td><td>新生代回收常用 ，速度快   Serial、ParNew、Parallel Scavenge</td></tr><tr><td><strong>标记-整理（Mark-Compact）</strong></td><td>+ 标记存活对象   + 将存活对象向内存一端移动，清理边界外内存</td><td><strong>优点</strong>：避免碎片，内存连续   <strong>缺点</strong>：移动对象成本高（STW 时间更长）</td><td>老年代回收器常用，碎片少   Serial Old、Parallel Old</td></tr></tbody></table><ul><li><strong>标记</strong>：遍历 GC Roots（栈引用、静态变量等），标记所有可达对象。</li></ul><h2 id="分代收集（Generational-Collection）"><a href="#分代收集（Generational-Collection）" class="headerlink" title="分代收集（Generational Collection）"></a><strong>分代收集（Generational Collection）</strong></h2><p><strong>核心思想</strong>：根据对象存活时间划分内存区域，针对性使用算法。</p><h3 id="堆为什么分代？"><a href="#堆为什么分代？" class="headerlink" title="堆为什么分代？"></a>堆为什么分代？</h3><p>java中大部分对象都是朝生夕死的，同时也会有部分对象持久存在。如果把这两部分对象放到一起分析和回收，效率太低。通过对象存活时间划分内存区域，可以显著改善系统性能。</p><h3 id="内存分区"><a href="#内存分区" class="headerlink" title="内存分区"></a>内存分区</h3><table><thead><tr><th><strong>区域</strong></th><th><strong>特点</strong></th><th><strong>适用算法</strong></th></tr></thead><tbody><tr><td><strong>新生代</strong></td><td>对象存活时间短（98% 快速回收）</td><td><strong>复制算法</strong></td></tr><tr><td><strong>老年代</strong></td><td>对象存活时间长</td><td><strong>标记-清除&#x2F;整理</strong></td></tr></tbody></table><h3 id="新生代常用回收器"><a href="#新生代常用回收器" class="headerlink" title="新生代常用回收器"></a>新生代常用回收器</h3><table><thead><tr><th>回收器</th><th>特点</th></tr></thead><tbody><tr><td><strong>Serial</strong></td><td>单线程，简单高效（Client 模式常用）</td></tr><tr><td><strong>ParNew</strong></td><td>多线程版 Serial（配合 CMS）</td></tr><tr><td><strong>Parallel Scavenge</strong></td><td>吞吐量优先（配合 Parallel Old）</td></tr><tr><td><strong>G1 Young</strong></td><td>G1 的年轻代分区 GC</td></tr></tbody></table><h3 id="老年代常用回收器"><a href="#老年代常用回收器" class="headerlink" title="老年代常用回收器"></a>老年代常用回收器</h3><table><thead><tr><th>回收器</th><th>特点</th></tr></thead><tbody><tr><td><strong>Serial Old</strong></td><td>单线程标记-整理</td></tr><tr><td><strong>Parallel Old</strong></td><td>多线程标记-整理，吞吐优先</td></tr><tr><td><strong>CMS（Concurrent Mark-Sweep）</strong></td><td>并发标记，低停顿，已被 G1 替代</td></tr><tr><td><strong>G1 Old</strong></td><td>分区化回收，适用于大堆，低停顿目标</td></tr><tr><td><strong>ZGC &#x2F; Shenandoah</strong></td><td>超低延迟，适合响应时延敏感应用</td></tr></tbody></table><h2 id="对象从新生代到老年代的生命周期"><a href="#对象从新生代到老年代的生命周期" class="headerlink" title="对象从新生代到老年代的生命周期"></a>对象从新生代到老年代的生命周期</h2><p>Java 堆内存通常被划分为 新生代（Young Generation） 和 老年代（Old Generation），这两部分采用了不同的垃圾回收器和策略，适配各自对象的生命周期特点。</p><h3 id="1-对象创建：分配在新生代-Eden-区"><a href="#1-对象创建：分配在新生代-Eden-区" class="headerlink" title="1. 对象创建：分配在新生代 Eden 区"></a><strong>1. 对象创建：分配在新生代 Eden 区</strong></h3><ul><li><strong>触发条件</strong>：<code>new Object()</code></li><li><strong>内存分配</strong>：<ul><li>优先在 <strong>Eden 区</strong>分配（占用 <code>Eden</code> 空间）。</li><li>若 Eden 空间不足，触发 <strong>Minor GC</strong>。</li></ul></li></ul><h3 id="2-第一次-Minor-GC：存活对象进入-Survivor-区"><a href="#2-第一次-Minor-GC：存活对象进入-Survivor-区" class="headerlink" title="2. 第一次 Minor GC：存活对象进入 Survivor 区"></a><strong>2. 第一次 Minor GC：存活对象进入 Survivor 区</strong></h3><ul><li><strong>触发条件</strong>：Eden 区满时触发 Minor GC。</li><li><strong>复制过程</strong>：<ol><li>扫描 Eden + Survivor From 区的存活对象。</li><li>将存活对象复制到 <strong>Survivor To 区</strong>（年龄 Age&#x3D;1）。</li><li>清空 Eden + Survivor From 区。</li></ol></li><li><strong>Survivor 区结构</strong>：<ul><li>两个等大区域（S0 和 S1），每次 GC 后互换角色（From ↔ To）。</li></ul></li><li><strong>对象年龄（Age）</strong>：<ul><li>每熬过一次 Minor GC，年龄 +1（存储在对象头中）。</li></ul></li></ul><h3 id="3-在-Survivor-区多次存活"><a href="#3-在-Survivor-区多次存活" class="headerlink" title="3. 在 Survivor 区多次存活"></a><strong>3. 在 Survivor 区多次存活</strong></h3><ul><li><strong>重复过程</strong>：<ul><li>每次 Minor GC 后，存活对象在 S0 和 S1 间复制。</li><li>年龄持续增加（直到达到阈值）。</li></ul></li><li><strong>动态年龄判定</strong>：<ul><li>若某年龄对象的总大小 &gt; Survivor 区的 50%，则 <strong>≥该年龄的对象直接晋升老年代</strong>。</li><li>_例：Survivor 区 100MB，年龄3的对象总大小 60MB → 所有年龄≥3的对象晋升_。</li></ul></li></ul><h3 id="4-晋升老年代的条件"><a href="#4-晋升老年代的条件" class="headerlink" title="4. 晋升老年代的条件"></a><strong>4. 晋升老年代的条件</strong></h3><p>满足以下任一条件时，对象进入老年代：</p><table><thead><tr><th><strong>条件</strong></th><th><strong>说明</strong></th><th><strong>触发场景</strong></th></tr></thead><tbody><tr><td><strong>年龄阈值</strong></td><td>对象年龄 ≥ <code>MaxTenuringThreshold</code>   （默认 15）</td><td>长期存活的缓存对象</td></tr><tr><td><strong>大对象直接分配</strong></td><td>对象大小 &gt; <code>-XX:PretenureSizeThreshold</code>   （默认 0，由回收器决定）</td><td>大数组（如 10MB 的 <code>byte[]</code>   ）</td></tr><tr><td><strong>动态年龄判定</strong></td><td>Survivor 区中同年龄对象总大小 &gt; Survivor 区的 50%</td><td>短期产生大量存活对象</td></tr><tr><td><strong>分配担保失败</strong></td><td>Minor GC 后 Survivor 空间不足，且老年代空间不足，对象直接进入老年代</td><td>高频创建大对象</td></tr><tr><td><strong>Survivor 空间不足</strong></td><td>Minor GC 时存活对象大小 &gt; Survivor 区容量</td><td>未达年龄阈值但 Survivor 已满</td></tr></tbody></table><h3 id="5-老年代的对象生命周期"><a href="#5-老年代的对象生命周期" class="headerlink" title="5. 老年代的对象生命周期"></a><strong>5. 老年代的对象生命周期</strong></h3><ul><li><strong>存储位置</strong>：老年代（Old Generation）</li><li><strong>回收机制</strong>：<ul><li><strong>Major GC&#x2F;Full GC</strong>：扫描整个堆（新生代+老年代+元空间），耗时长（秒级 STW）。</li><li>触发条件：老年代空间不足（<code>java.lang.OutOfMemoryError: Java heap space</code>）。</li></ul></li><li><strong>回收算法</strong>：<ul><li>CMS：并发标记清除（避免长时间 STW）。</li><li>G1&#x2F;ZGC：并发标记整理（低延迟）。</li></ul></li><li><strong>终结</strong>：<ul><li>对象无引用时被标记为垃圾，GC 回收内存。</li></ul></li></ul><h3 id="生命周期流程图"><a href="#生命周期流程图" class="headerlink" title="生命周期流程图"></a><strong>生命周期流程图</strong></h3><p>JVM 中一次完整的 GC 流程是怎样的</p><p><img src="/image/code-adventure/jvm/%E5%AF%B9%E8%B1%A1%E4%BB%8E%E6%96%B0%E7%94%9F%E4%BB%A3%E5%88%B0%E8%80%81%E5%B9%B4%E4%BB%A3.jpg" alt="对象从新生代到老年代"></p><h2 id="Major-GC-和-Full-GC"><a href="#Major-GC-和-Full-GC" class="headerlink" title="Major GC 和 Full GC"></a><strong>Major GC</strong> 和 <strong>Full GC</strong></h2><p>在 Java 垃圾回收中，<strong>Major GC</strong> 和 <strong>Full GC</strong> 是两个容易混淆但实际有本质区别的概念。以下是清晰对比和深度解析：</p><table><thead><tr><th><strong>特性</strong></th><th><strong>Major GC</strong></th><th><strong>Full GC</strong></th></tr></thead><tbody><tr><td><strong>回收范围</strong></td><td><strong>仅老年代</strong></td><td><strong>整个堆 + 元空间</strong></td></tr><tr><td><strong>触发条件</strong></td><td>老年代空间不足</td><td>堆&#x2F;元空间不足、System.gc() 等</td></tr><tr><td><strong>STW 时间</strong></td><td>通常较短（CMS 并发）</td><td>较长（秒级，整堆回收）</td></tr><tr><td><strong>回收器行为</strong></td><td>取决于回收器（如 CMS 并发）</td><td>所有回收器均暂停所有线程</td></tr><tr><td><strong>关联性</strong></td><td>可能单独发生</td><td>可能包含 Major GC + Minor GC</td></tr></tbody></table><h3 id="Major-GC：老年代专属回收"><a href="#Major-GC：老年代专属回收" class="headerlink" title="Major GC：老年代专属回收"></a><strong>Major GC：老年代专属回收</strong></h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a><strong>定义</strong></h4><ul><li><strong>仅回收老年代</strong>（Old Generation），不涉及新生代（Young Generation）和元空间（Metaspace）。</li><li>是 <strong>分代模型下的特定行为</strong>（如 CMS、Parallel Old 等回收器）。</li></ul><h4 id="触发条件"><a href="#触发条件" class="headerlink" title="触发条件"></a><strong>触发条件</strong></h4><ol><li>老年代空间不足（例如：晋升对象过多、大对象直接分配）。</li><li>分配担保失败（Minor GC 前预测老年代空间不足）。</li></ol><h3 id="Full-GC：整堆回收的“终极手段”"><a href="#Full-GC：整堆回收的“终极手段”" class="headerlink" title="Full GC：整堆回收的“终极手段”"></a><strong>Full GC：整堆回收的“终极手段”</strong></h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a><strong>定义</strong></h4><ul><li><strong>回收整个堆（新生代 + 老年代）+ 元空间</strong>。</li><li><strong>全局 STW（Stop-The-World）</strong>，暂停所有应用线程。</li></ul><h4 id="触发条件-1"><a href="#触发条件-1" class="headerlink" title="触发条件"></a><strong>触发条件</strong></h4><ol><li><strong>老年代空间不足</strong>：Major GC 后仍无法满足分配。</li><li><strong>元空间不足</strong>：类加载过多（如动态代理滥用）。</li><li><strong>显式调用</strong>：<code>System.gc()</code>（可通过 <code>-XX:+DisableExplicitGC</code> 禁用）。</li><li><strong>分配担保失败</strong>：Minor GC 后 Survivor 放不下，老年代也放不下。</li><li><strong>Heap Dump 操作</strong>：手动或 OOM 时的快照生成。</li></ol><h4 id="回收器行为对比"><a href="#回收器行为对比" class="headerlink" title="回收器行为对比"></a><strong>回收器行为对比</strong></h4><table><thead><tr><th><strong>回收器</strong></th><th><strong>Full GC 行为</strong></th><th><strong>STW 时间</strong></th></tr></thead><tbody><tr><td><strong>Serial GC</strong></td><td>标记-整理整个堆</td><td>长（秒级）</td></tr><tr><td><strong>Parallel GC</strong></td><td>多线程标记-整理（吞吐优先）</td><td>较长</td></tr><tr><td><strong>CMS</strong></td><td>退化为 <strong>Serial Old</strong>（单线程标记-整理）→ <strong>灾难性停顿</strong></td><td>极长（10s+）</td></tr><tr><td><strong>G1</strong></td><td>退化为单线程 <strong>Serial Old</strong>（JDK 10 前）→ 应极力避免</td><td>极长</td></tr><tr><td><strong>ZGC&#x2F;Shenandoah</strong></td><td><strong>无 Full GC 概念</strong>（全程并发回收）</td><td>&lt;1ms（无 STW）</td></tr></tbody></table><p>💡 <strong>关键点</strong>：CMS&#x2F;G1 的 Full GC 是<strong>故障回退机制</strong>，表明并发回收失败。</p><h1 id="内存泄漏（Memory-Leak）和内存溢（OutOfMemory）"><a href="#内存泄漏（Memory-Leak）和内存溢（OutOfMemory）" class="headerlink" title="内存泄漏（Memory Leak）和内存溢（OutOfMemory）"></a>内存泄漏（Memory Leak）和内存溢（OutOfMemory）</h1><p>是两种不同的内存问题，<strong>本质区别在于：泄漏是内存无法回收的慢性病，溢出是内存不足的急性崩溃</strong>。</p><h2 id="内存泄漏（Memory-Leak）"><a href="#内存泄漏（Memory-Leak）" class="headerlink" title="内存泄漏（Memory Leak）"></a><strong>内存泄漏（Memory Leak）</strong></h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a><strong>定义</strong></h3><p><strong>对象不再被使用，但GC无法回收</strong>，导致内存被无效占用。</p><h3 id="根本原因"><a href="#根本原因" class="headerlink" title="根本原因"></a><strong>根本原因</strong></h3><ul><li><strong>对象被意外持有</strong>：<ul><li>静态集合类（如 <code>static Map</code>）持续添加元素未清除。</li><li>未关闭资源（<code>Connection</code>、<code>Stream</code>）导致关联对象无法回收。</li><li>监听器&#x2F;回调未注销（如事件监听器）。</li></ul></li><li><strong>内部类隐式引用</strong>：非静态内部类持有外部类引用（如Handler导致Activity泄漏）。</li><li><strong>缓存未清理</strong>：缓存策略缺失（如无LRU淘汰机制）。</li></ul><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a><strong>特征</strong></h3><ul><li><strong>症状隐蔽</strong>：进程内存缓慢增长（如每天增长1%）。</li><li><strong>长期影响</strong>：持续消耗内存，最终触发内存溢出。</li><li><strong>示例代码</strong>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeakDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;<span class="type">byte</span>[]&gt; LEAK_LIST = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">leak</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            LEAK_LIST.add(<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span> <span class="number">1024</span>]); <span class="comment">// 持续泄漏</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="诊断工具"><a href="#诊断工具" class="headerlink" title="诊断工具"></a><strong>诊断工具</strong></h3><ul><li><code>jmap -histo:live &lt;pid&gt;</code>：查看对象实例数。</li><li>MAT (Memory Analyzer)：分析堆转储（Heap Dump）中的GC Roots引用链。</li><li><strong>VisualVM</strong>：实时监控堆内存趋势。</li></ul><h2 id="内存溢出（OutOfMemory-OOM）"><a href="#内存溢出（OutOfMemory-OOM）" class="headerlink" title="内存溢出（OutOfMemory, OOM）"></a><strong>内存溢出（OutOfMemory, OOM）</strong></h2><h4 id="定义-3"><a href="#定义-3" class="headerlink" title="定义"></a><strong>定义</strong></h4><p><strong>JVM 内存耗尽，无法分配新对象</strong>，触发 <code>java.lang.OutOfMemoryError</code>。</p><h3 id="直接原因"><a href="#直接原因" class="headerlink" title="直接原因"></a><strong>直接原因</strong></h3><ul><li><strong>堆空间不足</strong>：<ul><li>内存泄漏积累到临界点。</li><li>高并发场景突发大对象分配（如报表导出）。</li></ul></li><li><strong>元空间不足</strong>：动态生成类过多（如CGLib代理）。</li><li><strong>线程栈溢出</strong>：<code>-Xss</code> 设置过小或递归过深（<code>StackOverflowError</code>是OOM子类）。</li><li><strong>直接内存不足</strong>：NIO的 <code>ByteBuffer.allocateDirect()</code> 超出 <code>-XX:MaxDirectMemorySize</code>。</li></ul><h3 id="特征-1"><a href="#特征-1" class="headerlink" title="特征"></a><strong>特征</strong></h3><ul><li><strong>突发崩溃</strong>：服务瞬间不可用。</li><li><strong>明确错误</strong>：JVM 抛出 <code>OutOfMemoryError</code>。</li><li><strong>日志示例</strong>：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java.lang.OutOfMemoryError:</span><br><span class="line">Java heap</span><br><span class="line">space <span class="comment">// 堆溢出</span></span><br><span class="line">java.lang.OutOfMemoryError:Metaspace      <span class="comment">// 元空间溢出</span></span><br><span class="line">java.lang.OutOfMemoryError:</span><br><span class="line">Direct buffer</span><br><span class="line">memory <span class="comment">// 直接内存溢出</span></span><br></pre></td></tr></table></figure><h2 id="核心区别对比表"><a href="#核心区别对比表" class="headerlink" title="核心区别对比表"></a><strong>核心区别对比表</strong></h2><table><thead><tr><th><strong>维度</strong></th><th><strong>内存泄漏</strong></th><th><strong>内存溢出</strong></th></tr></thead><tbody><tr><td><strong>本质问题</strong></td><td>对象无法回收（垃圾变伪垃圾）</td><td>内存空间不足</td></tr><tr><td><strong>触发结果</strong></td><td>内存逐步耗尽 → 最终导致OOM</td><td>直接抛出 <code>OutOfMemoryError</code></td></tr><tr><td><strong>时间特征</strong></td><td><strong>慢性过程</strong>（可能持续数天）</td><td><strong>急性发作</strong>（瞬时崩溃）</td></tr><tr><td><strong>可恢复性</strong></td><td>需重启或修复代码</td><td>可能通过扩容临时缓解</td></tr><tr><td><strong>错误日志</strong></td><td>无直接错误（直到引发OOM）</td><td>明确抛出OOM异常</td></tr><tr><td><strong>主要场景</strong></td><td>静态集合、未关闭资源、缓存失控</td><td>大对象分配、内存泄漏积累、高并发</td></tr></tbody></table><h1 id="内存泄漏-和-大对象占用-排查"><a href="#内存泄漏-和-大对象占用-排查" class="headerlink" title="内存泄漏 和 大对象占用 排查"></a><strong>内存泄漏</strong> 和 <strong>大对象占用 排查</strong></h1><p>获取堆转储（Heap Dump）</p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jcmd &lt;pid&gt; GC.heap<span class="built_in">_</span>dump ./a.hprof</span><br></pre></td></tr></table></figure><p>使用 MAT 打开分析 <code>.hprof</code></p><h3 id="Memory-Analyzer-1-11-0-Release（支持JDK8）"><a href="#Memory-Analyzer-1-11-0-Release（支持JDK8）" class="headerlink" title="Memory Analyzer 1.11.0 Release（支持JDK8）"></a>Memory Analyzer 1.11.0 Release（支持JDK8）</h3><p><a href="https://www.eclipse.org/downloads/download.php?file=/mat/1.11.0/rcp/MemoryAnalyzer-1.11.0.20201202-win32.win32.x86_64.zip">https://www.eclipse.org/downloads/download.php?file=/mat/1.11.0/rcp/MemoryAnalyzer-1.11.0.20201202-win32.win32.x86_64.zip</a></p><p>打开文件</p><ul><li>启动 MAT</li><li>菜单栏：<code>File -&gt; Open Heap Dump</code>，选择 <code>.hprof</code> 文件</li></ul><p>初步分析选择（建议如下）：</p><ul><li><code>Leak Suspects Report</code>（推荐）：自动生成可疑内存泄漏报告</li><li>或选择 <code>Histogram</code> 查看对象分布</li></ul><p>常见视图说明</p><table><thead><tr><th>视图名称</th><th>说明</th></tr></thead><tbody><tr><td><strong>Histogram</strong></td><td>显示各类对象数量和总大小，支持按类名搜索与分组</td></tr><tr><td><strong>Dominator Tree</strong></td><td>按“支配者”分析内存归属，帮助发现大对象引用链（泄漏入口）</td></tr><tr><td><strong>Top Consumers</strong></td><td>哪些对象占用了最多内存</td></tr><tr><td><strong>Leak Suspects</strong></td><td>自动分析内存泄漏的报告，推荐先看此视图</td></tr><tr><td><strong>Path To GC Roots</strong></td><td>查看对象为何未被 GC 回收（谁还引用它）</td></tr><tr><td><strong>Object Inspector</strong></td><td>查看某个对象的字段值、类型和关联对象</td></tr></tbody></table><p>在使用 <strong>Eclipse MAT（Memory Analyzer Tool）</strong> 分析 Java 堆内存时，两个最关键的概念是：</p><h2 id="🌱-1-Shallow-Heap（浅堆大小）"><a href="#🌱-1-Shallow-Heap（浅堆大小）" class="headerlink" title="🌱 1. Shallow Heap（浅堆大小）"></a>🌱 1. <strong>Shallow Heap（浅堆大小）</strong></h2><p>表示 <strong>一个对象本身占用的内存大小</strong>，<strong>不包括它引用的其它对象</strong>。</p><ul><li>通常包括对象头（对象元信息）+ 基本字段（如 <code>int</code>、<code>long</code> 等）+ 引用字段（仅引用地址）。</li><li>例如：<ul><li>一个 <code>Object</code> 占 16 bytes（在 64 位 JVM 开启压缩指针时）。</li><li>一个 <code>User</code> 对象有 3 个字段（2 个基本类型 + 1 个引用），其 <code>shallow heap</code> 可能是 24 bytes。</li></ul></li></ul><p>📌 类似于：</p><p>“我自己身体有多重，不管我背了几个人。”</p><hr><h2 id="🌳-2-Retained-Heap（保留堆大小）"><a href="#🌳-2-Retained-Heap（保留堆大小）" class="headerlink" title="🌳 2. Retained Heap（保留堆大小）"></a>🌳 2. <strong>Retained Heap（保留堆大小）</strong></h2><p>表示 <strong>某个对象被 GC Root 保留时，会连带保留下来的所有对象所占内存总和</strong>。</p><ul><li>换句话说：<ul><li>如果这个对象被 GC 回收掉，它所能引用到的所有对象（即依赖它活着的）<strong>也会被一并回收</strong>，这部分内存称为其 Retained Heap。</li></ul></li><li>Retained Heap &#x3D; <strong>Shallow Heap + 所有无法独立存活的下游对象的 Shallow Heap 总和</strong></li></ul><p>📌 类似于：</p><p>“我如果死了，还会拖死多少人？”</p><h1 id="判断两个类是否为“同一个类”的标准"><a href="#判断两个类是否为“同一个类”的标准" class="headerlink" title="判断两个类是否为“同一个类”的标准"></a>判断两个类是否为“同一个类”的标准</h1><table><thead><tr><th>条件</th><th>说明</th></tr></thead><tbody><tr><td><strong>类的完全限定名（Fully Qualified Name）相同</strong></td><td>即包名 + 类名一致，例如 <code>com.example.MyClass</code></td></tr><tr><td><strong>由同一个类加载器（ClassLoader）加载</strong></td><td>即使类名一致，如果是由不同的类加载器加载，也视为不同类</td></tr><tr><td><strong>类签名一致</strong></td><td>字段、方法等签名一致（编译后的 class 结构兼容）</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">URL</span> <span class="variable">classUrl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;path/to/classes&quot;</span>).toURI().toURL();</span><br><span class="line"></span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">loader1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;classUrl&#125;);</span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">loader2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;classUrl&#125;);</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; class1 = loader1.loadClass(<span class="string">&quot;com.example.MyClass&quot;</span>);</span><br><span class="line">        Class&lt;?&gt; class2 = loader2.loadClass(<span class="string">&quot;com.example.MyClass&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(class1 == class2); <span class="comment">// false</span></span><br><span class="line">        System.out.println(class1.equals(class2)); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="类的生命周期-amp-类加载过程"><a href="#类的生命周期-amp-类加载过程" class="headerlink" title="类的生命周期 &amp; 类加载过程"></a>类的生命周期 &amp; <strong>类加载过程</strong></h1><p>在 JVM 中，<strong>类的生命周期</strong>是指一个类从被加载进内存、到被使用、最后被卸载的整个过程。这个过程由 JVM 管理，主要涉及以下7个阶段</p><table><thead><tr><th>阶段</th><th>简要说明</th></tr></thead><tbody><tr><td>1️⃣ 加载（Loading）</td><td>+  通过类加载器（ClassLoader）读取 <code>.class</code> 文件并转为二进制数据，生成 <code>Class</code> 对象。     +  不一定从磁盘加载，也可能来自网络、数据库、内存中（自定义类加载器）</td></tr><tr><td>2️⃣ 验证（Verification）</td><td>校验字节码的合法性、安全性、格式等</td></tr><tr><td>3️⃣ 准备（Preparation）</td><td>+ 为 <code>static</code> 字段分配内存，设置为默认值   + static int count &#x3D; 10; 此时只是 count&#x3D;0</td></tr><tr><td>4️⃣ 解析（Resolution）</td><td>把符号引用（常量池中的类、方法、字段）转为直接引用</td></tr><tr><td>5️⃣ 初始化（Initialization）</td><td>+ 执行静态代码块、静态字段的初始化赋值。     + <strong>线程安全</strong>：JVM 加锁保证只执行一次</td></tr><tr><td>6️⃣ 使用（Using）</td><td>调用类方法、访问静态变量&#x2F;字段、创建实例、反射操作时，类才真正被“用”起来。</td></tr><tr><td>7️⃣ 卸载（Unloading）</td><td>1. 类所有实例已被 GC   2. 加载该类的 <code>ClassLoader</code> 已被 GC   3. 类对应的 <code>Class</code> 对象无任何引用（包括反射）</td></tr></tbody></table><p><img src="/image/code-adventure/jvm/%E7%B1%BB%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.jpg" alt="类的生命周期"></p><p>在 Java 中，<strong>类加载过程</strong>是指 JVM 将 <code>.class</code> 文件加载到内存，并将其转化为<code>Class</code>对象的全过程。这是类生命周期的前半部分，主要涉及前5个步骤</p><h2 id="类何时被初始化？"><a href="#类何时被初始化？" class="headerlink" title="类何时被初始化？"></a>类何时被初始化？</h2><p>JVM 规定了几种“主动使用”会触发初始化：</p><table><thead><tr><th>触发行为</th><th>是否初始化</th></tr></thead><tbody><tr><td>访问静态字段（非 final）</td><td>✅ 是</td></tr><tr><td>调用类的静态方法</td><td>✅ 是</td></tr><tr><td>使用 <code>Class.forName()</code> 加载类</td><td>✅ 是</td></tr><tr><td>子类初始化，父类也会先初始化</td><td>✅ 是</td></tr><tr><td>new 一个类对象</td><td>✅ 是</td></tr><tr><td>数组引用类（如 <code>A[] arr = new A[10]</code>）</td><td>❌ 否</td></tr><tr><td>获取 Class 对象（<code>A.class</code>）</td><td>❌ 否</td></tr></tbody></table><h2 id="什么是符号引用（Symbolic-Reference）？"><a href="#什么是符号引用（Symbolic-Reference）？" class="headerlink" title="什么是符号引用（Symbolic Reference）？"></a>什么是符号引用（Symbolic Reference）？</h2><p>在 <code>.class</code> 字节码中，类、字段、方法的引用 <strong>不是用内存地址表示的</strong>，而是用一种<strong>逻辑名称</strong>表示，叫做<strong>符号引用</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">user.</span><br><span class="line"></span><br><span class="line">getName();</span><br></pre></td></tr></table></figure><p>在编译后的字节码中：</p><ul><li><code>User</code> 是类的 <strong>全限定名字符串</strong>：<code>com/example/User</code></li><li><code>getName</code> 是方法名和描述符：<code>getName()Ljava/lang/String;</code></li></ul><p>它们以字符串形式保存在 class 文件的 <strong>常量池</strong> 中（<code>Constant Pool</code>），这就是“符号引用”。</p><h2 id="什么是直接引用（Direct-Reference）？"><a href="#什么是直接引用（Direct-Reference）？" class="headerlink" title="什么是直接引用（Direct Reference）？"></a>什么是直接引用（Direct Reference）？</h2><p>解析完成后，JVM 将这些符号引用解析为直接引用：</p><blockquote><p>直接引用是指向类或成员在内存中具体地址或结构的引用，通常是指向方法区中类结构的指针。</p></blockquote><p>比如：</p><ul><li>指向已加载类的 <code>Class</code> 对象的引用</li><li>方法或字段的偏移量、内存地址等</li></ul><p>这样以后执行方法调用、访问字段时就可以直接定位，提高性能。</p><h2 id="为什么要做解析？"><a href="#为什么要做解析？" class="headerlink" title="为什么要做解析？"></a>为什么要做解析？</h2><p>JVM 在类加载时不能立即将所有依赖类都加载进来（性能、懒加载考虑），所以符号引用是必须的。而在实际运行时：</p><ul><li>需要将“字符串描述的类名” → 解析成内存中的 Class 对象</li><li>方法&#x2F;字段名 → 变为实际的方法地址或方法表索引</li></ul><p>否则 JVM 无法执行这些调用。</p><h1 id="类加载器与双亲委派"><a href="#类加载器与双亲委派" class="headerlink" title="类加载器与双亲委派"></a>类加载器与双亲委派</h1><p><img src="/image/code-adventure/jvm/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E4%B8%8E%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE.jpg" alt="类加载器与双亲委派"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// 1. 检查是否已加载</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 2. 委托父加载器</span></span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="literal">null</span>) &#123;</span><br><span class="line">                    c = parent.loadClass(name, <span class="literal">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 3. 父类无法加载时自己加载</span></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">                c = findClass(name);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="如何破坏双亲委派"><a href="#如何破坏双亲委派" class="headerlink" title="如何破坏双亲委派"></a>如何破坏双亲委派</h2><p>虽然双亲委派是默认机制，但在某些特定场景中<strong>必须打破它</strong>，例如：</p><ul><li>动态加载插件（每个插件有独立的类）</li><li>热部署（新类覆盖旧类）</li><li>加载第三方库中版本冲突的类</li></ul><p>破坏方式一：重写 <code>loadClass()</code> 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="type">boolean</span> resolve) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 不委托父类，直接自己加载</span></span><br><span class="line">        <span class="keyword">if</span> (name.startsWith(<span class="string">&quot;com.myplugin.&quot;</span>)) &#123;</span><br><span class="line">            <span class="type">byte</span>[] data = loadClassData(name);</span><br><span class="line">            <span class="keyword">return</span> defineClass(name, data, <span class="number">0</span>, data.length);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.loadClass(name, resolve); <span class="comment">// 其他类继续委托</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以通过对某些类指定前缀，阻止委派加载，实现“选择性破坏”。</p><p>破坏方式二：用 URLClassLoader 自定义加载路径</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">URLClassLoader</span> <span class="variable">pluginLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;plugins/plugin1.jar&quot;</span>).toURI().toURL()&#125;,</span><br><span class="line">        <span class="literal">null</span> <span class="comment">// 设置 parent 为 null，完全破坏双亲委派</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这样加载器没有父类，任何类都靠它自己加载。</p><p>破坏方式三：SPI 加载机制中的破坏</p><p>Java SPI（<code>ServiceLoader</code>）加载服务时会使用线程上下文类加载器 <code>Thread.currentThread().getContextClassLoader()</code>，而非<br>AppClassLoader，从而避免双亲委派，加载用户自定义实现类。</p><h1 id="方法区、永久代、元空间"><a href="#方法区、永久代、元空间" class="headerlink" title="方法区、永久代、元空间"></a>方法区、永久代、元空间</h1><h2 id="方法区（Method-Area）——-JVM-规范定义"><a href="#方法区（Method-Area）——-JVM-规范定义" class="headerlink" title="方法区（Method Area）—— JVM 规范定义"></a><strong>方法区（Method Area）—— JVM 规范定义</strong></h2><ul><li><strong>定义</strong>：<br>方法区是 <strong>JVM 规范中定义的一个逻辑内存区域</strong>（类似“接口”），用于存储：<ul><li>类的元数据（Class 元信息：类名、字段、方法、常量池等）</li><li>静态变量（<code>static</code>）</li><li>JIT 编译后的代码缓存</li><li>运行时常量池（Runtime Constant Pool）</li></ul></li><li><strong>特点</strong>：<ul><li>所有线程共享。</li><li>是 <strong>规范层面的概念</strong>，不规定具体实现方式。</li></ul></li></ul><h2 id="永久代（Permanent-Generation）——-HotSpot-的具体实现"><a href="#永久代（Permanent-Generation）——-HotSpot-的具体实现" class="headerlink" title="永久代（Permanent Generation）—— HotSpot 的具体实现"></a><strong>永久代（Permanent Generation）—— HotSpot 的具体实现</strong></h2><ul><li><strong>定义</strong>：<br>永久代是 <strong>HotSpot 虚拟机（JDK 8 之前）对方法区的具体实现</strong>（类似“实现类”）。</li></ul><h2 id="元空间（Metaspace）——-JDK-8-及之后的实现"><a href="#元空间（Metaspace）——-JDK-8-及之后的实现" class="headerlink" title="元空间（Metaspace）—— JDK 8 及之后的实现"></a><strong>元空间（Metaspace）—— JDK 8 及之后的实现</strong></h2><ul><li><strong>取代永久代</strong>：JDK 8 起，HotSpot <strong>移除了永久代</strong>，改用 <strong>元空间（Metaspace）</strong> 作为方法区的实现。</li><li><strong>优势</strong>：<ul><li><strong>避免 OOM</strong>：本地内存理论上只受系统资源限制。</li><li><strong>自动扩容</strong>：无需手动设置大小（除非主动限制）。</li><li><strong>垃圾回收优化</strong>：由元空间自己的垃圾回收器处理，与堆 GC 解耦。</li></ul></li></ul><h2 id="核心变化"><a href="#核心变化" class="headerlink" title="核心变化"></a><strong>核心变化</strong></h2><table><thead><tr><th align="left"><strong>特性</strong></th><th align="left"><strong>永久代</strong></th><th align="left"><strong>元空间</strong></th></tr></thead><tbody><tr><td align="left"><strong>存储位置</strong></td><td align="left">JVM 堆内存中</td><td align="left"><strong>本地内存（Native Memory）</strong></td></tr><tr><td align="left"><strong>内存管理</strong></td><td align="left">JVM 管理</td><td align="left"><strong>操作系统自动管理</strong></td></tr><tr><td align="left"><strong>溢出错误</strong></td><td align="left"><code>OutOfMemoryError: PermGen</code></td><td align="left"><code>OutOfMemoryError: Metaspace</code></td></tr><tr><td align="left"><strong>大小限制</strong></td><td align="left">固定大小（需手动调优）</td><td align="left"><strong>默认无上限</strong>（受物理内存限制）</td></tr><tr><td align="left"><strong>调优参数</strong></td><td align="left"><code>-XX:PermSize</code>   &#x2F; <code>MaxPermSize</code></td><td align="left"><code>-XX:MetaspaceSize</code>   &#x2F; <code>MaxMetaspaceSize</code></td></tr></tbody></table><h1 id="强引用、软引用、弱引用和虚引用"><a href="#强引用、软引用、弱引用和虚引用" class="headerlink" title="强引用、软引用、弱引用和虚引用"></a>强引用、软引用、弱引用和虚引用</h1><p>在 Java 中，引用类型分为四种：<strong>强引用（StrongReference）</strong>、<strong>软引用（SoftReference）</strong>、<strong>弱引用（WeakReference）</strong> 和<br><em>虚引用（PhantomReference）</em>_<strong>。它们体现了对象被垃圾回收（GC）时的</strong>__可达性强弱_，对内存管理、缓存设计、资源释放等场景非常关键。</p><table><thead><tr><th>引用类型</th><th>回收条件</th><th>常见用途</th><th>是否影响 GC 回收</th><th>是否可通过引用访问对象</th></tr></thead><tbody><tr><td><strong>强引用</strong></td><td>永远不会被 GC 主动回收（除非引用断开）</td><td>普通对象引用</td><td>✅ 无法回收</td><td>✅ 可以</td></tr><tr><td><strong>软引用</strong></td><td><strong>内存不足时</strong> 被 GC 回收</td><td>缓存（如图片、数据）</td><td>⚠️ 低内存时回收</td><td>✅ 可以</td></tr><tr><td><strong>弱引用</strong></td><td>下一次 GC 就会被回收</td><td>ThreadLocal、类缓存清理等</td><td>✅ 一定回收</td><td>✅ 可以（短暂）</td></tr><tr><td><strong>虚引用</strong></td><td>被创建后立即会被 GC 回收，无 get() 方法</td><td>跟踪对象回收、清理资源</td><td>✅ 一定回收</td><td>❌ 不可以（get 返回 null）</td></tr></tbody></table><h1 id="常见启动参数解析"><a href="#常见启动参数解析" class="headerlink" title="常见启动参数解析"></a>常见启动参数解析</h1><h2 id="内存区域大小相关"><a href="#内存区域大小相关" class="headerlink" title="内存区域大小相关"></a>内存区域大小相关</h2><h3 id="Xms、-Xmx"><a href="#Xms、-Xmx" class="headerlink" title="-Xms、-Xmx"></a>-Xms、-Xmx</h3><p>分别设置 JVM 堆内存的初始大小 (-Xms) 和 最大大小 (-Xmx)。</p><ul><li><p>设置相同值置相同值： (强烈推荐) 避免堆在运行时动态扩展，防止扩展操作带来的额外GC停顿。</p></li><li><p>通常建议不超过物理内存的50%-70%，留给操作系统和其他进程。</p></li><li><p>通过监控工具 (jstat, VisualVM, JMC, Prometheus+Grafana) 观察应用稳定运行后（尤其是经过压测后）的 老年代使用量 和 Full GC<br>后的堆使用量。</p></li><li><p>-Xmx 应至少比观察到的 老年代稳定使用量 高出 20%-30%，以容纳临时对象和避免频繁 Full GC。-Xms 直接等于 -Xmx。</p></li></ul><h3 id="Xmn-x2F-XX-NewSize-和-XX-MaxNewSize"><a href="#Xmn-x2F-XX-NewSize-和-XX-MaxNewSize" class="headerlink" title="-Xmn &#x2F; -XX:NewSize 和 -XX:MaxNewSize"></a>-Xmn &#x2F; -XX:NewSize 和 -XX:MaxNewSize</h3><ul><li>Xmn: 同时设置年轻代的初始和最大大小（推荐方式）。</li><li>XX:NewSize 和 -XX:MaxNewSize: 分别设置初始和最大年轻代大小（通常设置相同值）。</li></ul><p>-Xmn显式指定： (推荐) 当你知道应用的对象分配速率和生命周期特点时，优先使用。</p><p>较大的年轻代：适合大量短生命周期对象的应用 (-Xmn 接近 -Xmx 的 1&#x2F;3 到 1&#x2F;2) 。</p><ul><li>好处：减少对象过早晋升到老年代，降低 Full GC 频率。</li><li>坏处：单次 Minor GC 时间可能变长（需要复制的存活对象更多）。</li></ul><p>较小的年轻代：适合对象生命周期较长或对 Minor GC 停顿极其敏感的应用 (-Xmn 接近 -Xmx 的 1&#x2F;4 或更小)</p><ul><li>好处：单次 Minor GC 时间短。</li><li>坏处：对象晋升老年代更快，增加 Full GC 频率。</li></ul><p>如何确定大小？ 监控年轻代 GC 频率、晋升到老年代的对象速率。目标是让绝大多数对象在年轻代的 Minor GC 中就被回收掉，避免频繁Full<br>GC。</p><p>同时要保证 Minor GC 的停顿时间在可接受范围内（通常几十到几百毫秒）。</p><h3 id="XX-NewRatio"><a href="#XX-NewRatio" class="headerlink" title="-XX:NewRatio"></a>-XX:NewRatio</h3><p>是 JVM 中用于控制 老年代（Old Generation）与新生代（Young Generation）大小比例 的参数，主要用于整体堆内存结构的分布优化。</p><p>-XX:NewRatio&#x3D;N 表示：老年代与新生代的内存比例是 N:1。 默认值通常是 2（老年代：年轻代&#x3D;2:1）。</p><p>假设：</p><ul><li>JVM 堆总大小为 -Xms &#x3D; -Xmx &#x3D; 800MB</li><li>设置了：-XX:NewRatio&#x3D;2<br>则：</li><li>新生代（Young Gen）占 800 &#x2F; (2+1) &#x3D; 266MB</li><li>老年代（Old Gen）占 800 - 266 &#x3D; 534MB</li></ul><h3 id="XX-SurvivorRatio"><a href="#XX-SurvivorRatio" class="headerlink" title="-XX:SurvivorRatio"></a>-XX:SurvivorRatio</h3><p>设置 Eden 区与一个 Survivor 区的比例</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-XX:SurvivorRatio=8</span><br></pre></td></tr></table></figure><p>表示 Eden:S0:S1 &#x3D; 8:1:1</p><ul><li>新生代总共被分为 8+1+1 &#x3D; 10 份；</li><li>Eden 占 8&#x2F;10；</li><li>每个 Survivor 区占 1&#x2F;10。</li></ul><p>增大 Eden</p><ul><li>适合对象分配速率极高且绝大多数对象都是朝生夕死的应用，减少 Minor GC 频率。</li><li>风险是如果 Survivor 相对太小，Minor GC 后存活的对象可能无法完全放入 Survivor，会直接晋升到老年代。</li></ul><p>减小 Eden</p><ul><li>适合对象存活率较高的应用。给 Survivor 更多空间，让对象能在 Survivor 区经历更多次 GC 才晋升，减少不必要的晋升。</li><li>坏处是 Minor GC 会更频繁（因为 Eden 小了）</li></ul><p>例如</p><ul><li><p>Survivor 区经常接近满 (&gt;90%): 增大 Survivor (减小 SurvivorRatio 值)</p></li><li><p>在 Minor GC 后发现有对象因为 Survivor 空间不足直接晋升: 增大年轻代 (-Xmn)</p></li></ul><h3 id="XX-MetaspaceSize-和-XX-MaxMetaspaceSize-Java-8"><a href="#XX-MetaspaceSize-和-XX-MaxMetaspaceSize-Java-8" class="headerlink" title="-XX:MetaspaceSize 和 -XX:MaxMetaspaceSize (Java 8+)"></a>-XX:MetaspaceSize 和 -XX:MaxMetaspaceSize (Java 8+)</h3><p>设置 元空间 (Metaspace) 的初始大小 (-XX:MetaspaceSize) 和最大大小 (-XX:MaxMetaspaceSize)。</p><ul><li><p>元空间存储类元数据信息（取代了 Java 8 之前的永久代 PermGen）。</p></li><li><p><code>-XX:MaxMetaspaceSize</code>: 强烈建议在生产环境设置！ 避免元空间无限增长导致系统内存耗尽。取值根据应用加载的类数量确定。</p></li><li><p>对于大型应用或频繁动态生成类（如 Groovy, Spring AOP 代理）的应用，可能需要设置较大值（如 256m, 512m, 1g）。</p></li></ul><p>监控元空间使用量 (jstat -gcmetacapacity) 是确定合理上限的关键。</p><h2 id="垃圾收集器选择与相关参数"><a href="#垃圾收集器选择与相关参数" class="headerlink" title="垃圾收集器选择与相关参数"></a>垃圾收集器选择与相关参数</h2><h3 id="CMS-收集器关键参数"><a href="#CMS-收集器关键参数" class="headerlink" title="CMS 收集器关键参数"></a>CMS 收集器关键参数</h3><h4 id="XX-UseParNewGC-XX-UseConcMarkSweepGC"><a href="#XX-UseParNewGC-XX-UseConcMarkSweepGC" class="headerlink" title="-XX:+UseParNewGC + -XX:+UseConcMarkSweepGC"></a>-XX:+UseParNewGC + -XX:+UseConcMarkSweepGC</h4><p>ParNew 负责年轻代 (并行复制)，CMS 负责老年代（并发标记清除）。核心目标是降低老年代 GC 的停顿时间。适用于Web应用、服务端等对响应时间敏感的场景。</p><p>注意：CMS 在 JDK 9 被标记为 Deprecated，在 JDK 14 中被移除。</p><h4 id="XX-CMSInitiatingOccupancyFraction"><a href="#XX-CMSInitiatingOccupancyFraction" class="headerlink" title="-XX:CMSInitiatingOccupancyFraction"></a>-XX:CMSInitiatingOccupancyFraction</h4><p>设置老年代空间使用率达到多少百分比时，开始 CMS 并发收集周期。</p><p><strong>必须配合 -XX:+UseCMSInitiatingOccupancyOnly</strong>: 确保仅根据老年代占用率触发 CMS，而不是 JVM 自行判断的其他启发式规则。</p><p>场景与取值</p><p>默认值 (68)： 比较保守。</p><ul><li>调高 (70-80)</li></ul><p>如果应用老年代增长缓慢且 Full GC 频率很低，可以调高以延迟 CMS 启动，减少并发收集的开销。<br>如果老年代增长过快，在 CMS 完成前就满了，会触发“Concurrent Mode Failure”，退化为 Serial Old GC 进行 Full GC，停顿时间很长。</p><ul><li>调低 (60-70)</li></ul><p>如果老年代增长很快或经常发生 “Concurrent Mode Failure”，需要调低此值，让 CMS 更早启动，预留更多空间给浮动垃圾。<br>坏处： CMS 启动更频繁，并发收集开销增加。</p><h3 id="G1-收集器关键参数"><a href="#G1-收集器关键参数" class="headerlink" title="G1 收集器关键参数"></a>G1 收集器关键参数</h3><h4 id="XX-MaxGCPauseMillis"><a href="#XX-MaxGCPauseMillis" class="headerlink" title="-XX:MaxGCPauseMillis"></a>-XX:MaxGCPauseMillis</h4><p>期望达到的最大 GC 停顿时间目标（毫秒）。这不是一个硬性保证，而是 G1 努力的方向。G1 会根据这个目标自动调整其他参数（如每次回收的<br>Region 数量）。</p><p>场景与取值：</p><p>默认值 (200ms)： 适用于大多数对延迟有一定要求但不是极致的场景。</p><ul><li>调低 (50-150ms)</li></ul><p>对延迟要求更高的应用。G1会尝试做更多工作（如更早开始回收、每次回收更少的Region）来满足更短的停顿目标。可能导致GC频率增加，总体吞吐量下降。</p><ul><li>调高 (200-500ms)</li></ul><p>对吞吐量更敏感，可以容忍稍长停顿的应用。G1 会减少 GC 开销，提升吞吐量。</p><p>根据应用的 SLA (服务等级协议) 要求设定。需要监控实际停顿时间 (-Xlog:gc* 或 jstat -gc) 是否达标。</p><h4 id="XX-InitiatingHeapOccupancyPercent"><a href="#XX-InitiatingHeapOccupancyPercent" class="headerlink" title="-XX:InitiatingHeapOccupancyPercent"></a>-XX:InitiatingHeapOccupancyPercent</h4><p>设置整个堆的使用率达到多少百分比时，开始并发标记周期。</p><p>场景与取值： 类似 CMS 的 CMSInitiatingOccupancyFraction，但针对整个堆。</p><p>默认值 (45)： 比较保守。</p><ul><li>调高 (50-60)</li></ul><p>如果堆使用率增长缓慢且混合GC能有效回收，可以调高以减少并发标记开销。坏处：如果堆增长过快，在标记完成前空间不足，会触发FullGC。</p><ul><li>调低 (35-45)</li></ul><p>如果堆增长很快或经常发生 Full GC (尤其是因为分配失败引发的)，需要调低此值让并发标记更早开始。坏处：并发标记更频繁，开销增加。</p><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM 知识梳理</title>
      <link href="/e3f46350.html"/>
      <url>/e3f46350.html</url>
      
        <content type="html"><![CDATA[<p>oracle官方文档：<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/index.html">https://docs.oracle.com/javase/specs/jvms/se8/html/index.html</a></p><h1 id="JVM运行时内存区域"><a href="#JVM运行时内存区域" class="headerlink" title="JVM运行时内存区域"></a>JVM运行时内存区域</h1><p><img src="/image/code-adventure/jvm/JVM%E8%BF%90%E8%A1%8C%E6%97%B6%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F.jpg" alt="JVM运行时内存区域"></p><h1 id="堆外内存"><a href="#堆外内存" class="headerlink" title="堆外内存"></a>堆外内存</h1><p><strong>堆外内存</strong>是指<strong>不在 JVM 堆空间内</strong>，但仍由应用程序控制和使用的内存区域。它不受 JVM 垃圾回收器（GC）直接管理。  *<em>JVM<br>不负责释放<br><strong><strong>，需</strong></strong>手动释放。</em>*</p><table><thead><tr><th>特征</th><th>说明</th></tr></thead><tbody><tr><td><strong>不受 GC 控制</strong></td><td>避免频繁 GC、减少 GC 停顿，适合缓存&#x2F;大对象</td></tr><tr><td><strong>生命周期可控</strong></td><td>需程序员手动分配和释放</td></tr><tr><td><strong>跨进程&#x2F;跨语言共享困难</strong></td><td>但适合本地通信或 JNI 交互</td></tr><tr><td><strong>常驻内存</strong></td><td>通常更靠近系统内存，回收更精细化</td></tr></tbody></table><table><thead><tr><th>使用场景</th><th>示例</th></tr></thead><tbody><tr><td><strong>高性能缓存系统</strong></td><td>Netty 的 <code>ByteBuf</code>、MapDB、ChronicleMap</td></tr><tr><td><strong>避免 GC 开销</strong></td><td>高频数据存取、缓存热点数据</td></tr><tr><td><strong>处理大对象或大文件</strong></td><td>零拷贝、文件映射、NIO buffer</td></tr><tr><td><strong>与本地代码交互</strong></td><td>JNI &#x2F; DirectBuffer &#x2F; Unsafe &#x2F; mmap</td></tr></tbody></table><p>常见使用方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocateDirect(<span class="number">1024</span>);</span><br></pre></td></tr></table></figure><ul><li><strong>作用</strong>：直接分配堆外内存（Direct Memory）</li><li><strong>特点</strong>：由 OS 管理，GC 不会回收；性能优于堆内 NIO buffer</li><li><strong>释放</strong>：JVM 在不确定时间回收（或使用反射+Cleaner 手动回收）</li></ul><h1 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h1><h2 id="StackOverflowError"><a href="#StackOverflowError" class="headerlink" title="StackOverflowError"></a><code>StackOverflowError</code></h2><p>当线程的栈空间用完时，JVM 抛出 <code>StackOverflowError</code>。</p><h3 id="📌-常见触发场景"><a href="#📌-常见触发场景" class="headerlink" title="📌 常见触发场景"></a>📌 常见触发场景</h3><ol><li>无限递归调用</li><li>过深的调用链</li><li>每个栈帧占用过多局部变量（导致单方法调用就耗尽栈）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StackOverflowDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">recursive</span><span class="params">()</span> &#123;</span><br><span class="line">        recursive(); <span class="comment">// 无限递归</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        recursive();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>JVM 调优参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Xss256k  #设置单线程栈空间大小（默认 1M 左右）</span><br></pre></td></tr></table></figure><ul><li>减小 <code>-Xss</code> 会使一个线程栈帧更小，从而支持更多线程；</li><li>增大 <code>-Xss</code> 会支持更深的方法调用链，但线程数减少。</li></ul><h2 id="OutOfMemoryError（OOM）"><a href="#OutOfMemoryError（OOM）" class="headerlink" title="OutOfMemoryError（OOM）"></a><code>OutOfMemoryError</code>（OOM）</h2><p>JVM 无法为对象分配足够的内存空间时，抛出 <code>OutOfMemoryError</code>。它不是一种错误，而是内存分配失败的信号。</p><h3 id="📌-常见类型"><a href="#📌-常见类型" class="headerlink" title="📌 常见类型"></a>📌 常见类型</h3><table><thead><tr><th>类型</th><th>出现场景</th><th>原因</th><th><strong>解决方案</strong></th></tr></thead><tbody><tr><td><code>Java heap space</code></td><td>创建大量对象、集合过大</td><td>堆内存不足</td><td>1. 增大堆：-Xmx4g   2. 修复内存泄漏（如误用静态集合）</td></tr><tr><td><code>GC overhead limit exceeded</code></td><td>GC 花太多时间回收很少内存</td><td>内存紧张反复 GC</td><td>设置出现 OOM 自动 dump ，配合内存监控和堆转储分析</td></tr><tr><td><code>Metaspace</code>（JDK8+）</td><td>频繁加载新类、类信息泄露</td><td>元空间爆满</td><td>1. 增大元空间：-XX:MaxMetaspaceSize&#x3D;256m   2. 检查动态类生成（如反射、CGLIB）</td></tr><tr><td><code>Direct buffer memory</code></td><td>使用 NIO 分配堆外内存过多</td><td>超出 <code>-XX:MaxDirectMemorySize</code></td><td><code>-XX:MaxDirectMemorySize</code>调大</td></tr><tr><td><code>unable to create new native thread</code></td><td>线程数太多</td><td>OS 限制或 native 内存不足</td><td>1. 减少线程数   2. 调小 -Xss（谨慎使用）</td></tr><tr><td><code>Requested array size exceeds VM limit</code></td><td>申请数组过大</td><td>超过最大限制（如 2GB 限制）</td><td>拆分数据或检查计算逻辑</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeapOOM</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">1024</span>]); <span class="comment">// 不断分配 1MB</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>JVM 调优参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-Xms256m -Xmx256m        #设置堆大小</span><br><span class="line">-XX:MaxMetaspaceSize=64m #元空间限制</span><br><span class="line">-XX:MaxDirectMemorySize=64m #直接内存限制</span><br></pre></td></tr></table></figure><h3 id="常见触发场景"><a href="#常见触发场景" class="headerlink" title="常见触发场景"></a>常见触发场景</h3><table><thead><tr><th>场景</th><th>说明</th></tr></thead><tbody><tr><td><strong>无限增长的数据结构</strong></td><td>如 List、Map 没有限制持续添加元素</td></tr><tr><td><strong>缓存滥用</strong></td><td>缓存没有淘汰机制</td></tr><tr><td><strong>对象生命周期太长</strong></td><td>很少有对象被回收</td></tr><tr><td><strong>大对象&#x2F;死循环</strong></td><td>循环中创建大对象（如 byte[1024*1024]）</td></tr><tr><td><strong>低效GC策略</strong></td><td>不合理的垃圾收集器配置</td></tr><tr><td><strong>堆内存过小</strong></td><td><code>-Xmx</code>设置过低</td></tr><tr><td><strong>内存泄漏</strong></td><td>某些对象无法释放（如 ThreadLocal 泄漏）   对象持续增长无法回收（如静态Map未清理）</td></tr></tbody></table><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a><strong>解决方案</strong></h3><h4 id="紧急处理（临时）"><a href="#紧急处理（临时）" class="headerlink" title="紧急处理（临时）"></a>紧急处理（临时）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 禁用GC超限检查（仅临时测试用，不解决根本问题）</span></span><br><span class="line">java -XX:-UseGCOverheadLimit -jar your_app.jar</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增大堆内存（示例：设置4G堆）</span></span><br><span class="line">java -Xms1g -Xmx4g -jar your_app.jar</span><br></pre></td></tr></table></figure><h4 id="根本性修复"><a href="#根本性修复" class="headerlink" title="根本性修复"></a>根本性修复</h4><p>定位内存泄漏，用工具分析堆转储：</p><ul><li><strong>Eclipse MAT</strong><br>：查看 <code>Dominator Tree</code><br>找到占用最大的对象</li><li><strong>VisualVM</strong>：检查对象增长趋势</li></ul><p><strong>修复代码漏洞</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 案例：修复静态Map泄漏</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeakFix</span> &#123;</span><br><span class="line">    <span class="comment">// 错误：静态集合未清理 → 改用WeakHashMap</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Key, Value&gt; cache = <span class="keyword">new</span> <span class="title class_">WeakHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 或添加定期清理逻辑</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">clearCache</span><span class="params">()</span> &#123;</span><br><span class="line">        cache.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>优化数据存储</strong></p><ul><li>避免用 <code>List</code>&#x2F;<code>Map</code><br>存储海量数据 → 改用数据库或分片存储</li><li>用 <code>Stream</code><br>处理大文件替代全量加载</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误：Files.readAllLines() 加载大文件</span></span><br><span class="line"><span class="comment">// 正确：流式处理</span></span><br><span class="line"><span class="keyword">try</span>(Stream&lt;String&gt; lines = Files.lines(Paths.get(<span class="string">&quot;large.txt&quot;</span>)))&#123;</span><br><span class="line">        lines.</span><br><span class="line"></span><br><span class="line">filter(line -&gt;line.</span><br><span class="line"></span><br><span class="line">contains(<span class="string">&quot;key&quot;</span>)).</span><br><span class="line"></span><br><span class="line">forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调整GC策略</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到G1收集器（适合大堆内存）</span></span><br><span class="line">java -XX:+UseG1GC -Xmx4g ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调整G1关键参数（根据机器配置）</span></span><br><span class="line">-XX:G1NewSizePercent=30 </span><br><span class="line">-XX:MaxGCPauseMillis=200</span><br></pre></td></tr></table></figure><h3 id="预防措施"><a href="#预防措施" class="headerlink" title="预防措施"></a><strong>预防措施</strong></h3><ul><li><strong>监控GC行为</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#打印GC详情</span><br><span class="line">java -Xlog:gc*-</span><br><span class="line">jar your_app.jar</span><br><span class="line"></span><br><span class="line">#或使用JConsole/VisualVM实时监控</span><br></pre></td></tr></table></figure><ul><li><strong>压力测试</strong><br>：用JMeter模拟高负载，提前暴露问题</li><li><strong>内存限制</strong><br>：容器环境（如Docker）需同步调整 <code>-Xmx</code><br>和容器内存上限</li></ul><h2 id="诊断建议"><a href="#诊断建议" class="headerlink" title="诊断建议"></a>诊断建议</h2><table><thead><tr><th>工具</th><th>用途</th></tr></thead><tbody><tr><td><code>jstack</code></td><td>打印线程栈，查看栈溢出原因</td></tr><tr><td><code>jmap -heap</code></td><td>查看堆使用情况</td></tr><tr><td><code>VisualVM</code> &#x2F; <code>MAT</code></td><td>分析堆转储文件，定位 OOM 源头</td></tr><tr><td><code>-XX:+HeapDumpOnOutOfMemoryError</code></td><td>出现 OOM 自动 dump 内存</td></tr></tbody></table><h1 id="GC收集器"><a href="#GC收集器" class="headerlink" title="GC收集器"></a>GC收集器</h1><p>选择垃圾回收器</p><table><thead><tr><th>收集器名称</th><th>类型</th><th>特点</th><th>JDK 支持版本</th><th>适用场景</th></tr></thead><tbody><tr><td><strong>Serial GC</strong></td><td>单线程</td><td>简单、停顿时间长</td><td>JDK 1.2+</td><td>小内存、客户端应用</td></tr><tr><td><strong>ParNew GC</strong></td><td>多线程</td><td>Serial 的并行版</td><td>JDK 1.4+</td><td>配合 CMS 使用</td></tr><tr><td><strong>Parallel GC（吞吐量优先）</strong></td><td>多线程</td><td>默认收集器，关注吞吐量</td><td>JDK 1.5+</td><td>高吞吐、无实时性要求</td></tr><tr><td><strong>CMS（Concurrent Mark Sweep）</strong></td><td>并发</td><td>低延迟，响应快，老年代并发回收，   并发标记清除，低停顿</td><td>JDK 1.5+（JDK 14 废弃）</td><td>适合 Web 服务（如电商）</td></tr><tr><td><strong>G1（Garbage First）</strong></td><td>并发+分区</td><td>预测停顿时间、堆切分为 Region</td><td>JDK 7u4+（JDK 9 默认）</td><td>大内存场景、可预测停顿</td></tr><tr><td><strong>ZGC（Z Garbage Collector）</strong></td><td>并发</td><td>极低延迟（&lt;10ms），支持 TB 级堆</td><td>JDK 11+</td><td>大数据、低延迟要求</td></tr></tbody></table><h1 id="JVM参数"><a href="#JVM参数" class="headerlink" title="JVM参数"></a>JVM参数</h1><h2 id="三种类型"><a href="#三种类型" class="headerlink" title="三种类型"></a>三种类型</h2><h3 id="标准参数（-）"><a href="#标准参数（-）" class="headerlink" title="标准参数（-）"></a><strong>标准参数（-）</strong></h3><p>这些参数由 Java 官方规范定义，适用于所有 JVM 实现，通常以 <code>-</code> 开头。</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-classpath</code> 或 <code>-cp</code></td><td>设置类路径</td></tr><tr><td><code>-D&lt;name&gt;=&lt;value&gt;</code></td><td>设置系统属性</td></tr><tr><td><code>-version</code></td><td>查看当前 JVM 版本</td></tr><tr><td><code>-jar</code></td><td>运行可执行 JAR 包</td></tr><tr><td><code>-X</code></td><td>查看所有非标准参数</td></tr><tr><td><code>-help</code></td><td>显示帮助信息</td></tr></tbody></table><h3 id="非标准参数（-X）"><a href="#非标准参数（-X）" class="headerlink" title="非标准参数（-X）"></a>非标准参数（-X）</h3><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-Xms&lt;size&gt;</code></td><td>初始堆大小</td></tr><tr><td><code>-Xmx&lt;size&gt;</code></td><td>最大堆大小</td></tr><tr><td><code>-Xmn&lt;size&gt;</code></td><td>新生代大小</td></tr><tr><td><code>-Xss&lt;size&gt;</code></td><td>每个线程栈大小</td></tr><tr><td><code>-Xloggc:&lt;file&gt;</code></td><td>将 GC 日志输出到文件</td></tr><tr><td><code>-XshowSettings</code></td><td>显示 JVM 配置</td></tr></tbody></table><h3 id="高级参数（-XX）"><a href="#高级参数（-XX）" class="headerlink" title="高级参数（-XX）"></a><strong>高级参数（-XX）</strong></h3><p>这也是非标准化参数，相对来说不稳定，随着JVM版本的变化可能会发生变化，主要用于JVM调优和debug。</p><p>该参数的书写形式又分为两大类：</p><h4 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h4><p>格式：-XX:[+-] 表示启用或者禁用name属性。</p><p>例子：-XX:+UseG1GC（表示启用G1垃圾收集器）</p><h4 id="Key-Value类型"><a href="#Key-Value类型" class="headerlink" title="Key-Value类型"></a>Key-Value类型</h4><p>格式：-XX:&#x3D; 表示name的属性值为value。</p><p>例子：-XX:MaxGCPauseMillis&#x3D;500（表示设置GC的最大停顿时间是500ms）</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td><code>-XX:+UseG1GC</code></td><td>启用 G1 垃圾回收器</td></tr><tr><td><code>-XX:+PrintGCDetails</code></td><td>打印详细 GC 日志</td></tr><tr><td><code>-XX:+HeapDumpOnOutOfMemoryError</code></td><td>OOM 时生成 heap dump</td></tr><tr><td><code>-XX:MaxMetaspaceSize=256m</code></td><td>设置元空间上限</td></tr><tr><td><code>-XX:+UseCompressedOops</code></td><td>启用对象指针压缩（默认启用）</td></tr><tr><td><code>-XX:+UnlockExperimentalVMOptions</code></td><td>解锁实验参数（如使用 ZGC）</td></tr></tbody></table><h1 id="JVM启动参数"><a href="#JVM启动参数" class="headerlink" title="JVM启动参数"></a>JVM启动参数</h1><h2 id="堆内存设置（控制堆结构）"><a href="#堆内存设置（控制堆结构）" class="headerlink" title="堆内存设置（控制堆结构）"></a>堆内存设置（控制堆结构）</h2><table><thead><tr><th>参数</th><th>说明</th><th>常用值</th><th>适用场景</th></tr></thead><tbody><tr><td><code>-Xms</code></td><td>初始堆大小</td><td>与 <code>-Xmx</code> 一致</td><td>避免扩容带来的 Full GC</td></tr><tr><td><code>-Xmx</code></td><td>最大堆大小</td><td>如 <code>2g</code>, <code>4g</code>, <code>8g</code></td><td>根据业务内存压力设定</td></tr><tr><td><code>-Xmn</code></td><td>新生代大小</td><td>如 <code>512m</code>, <code>1g</code></td><td>请求频繁、短命对象多的应用</td></tr><tr><td><code>-XX:NewRatio</code></td><td>老年代:新生代比例</td><td>默认 <code>2</code>；推荐 <code>1~4</code></td><td>控制新老代比，无 <code>-Xmn</code> 时生效</td></tr><tr><td><code>-XX:SurvivorRatio</code></td><td>Eden 与 Survivor 比</td><td>默认 <code>8</code>，可调 <code>6~10</code></td><td>Survivor 不足时调小此值</td></tr><tr><td><code>-XX:MaxTenuringThreshold</code></td><td>对象在 Survivor 区存活几次后晋升老年代</td><td><code>1~15</code>（默认 <code>15</code>）</td><td>短命对象多时建议设小，避免 Survivor 溢出</td></tr></tbody></table><h2 id="GC-策略与相关参数"><a href="#GC-策略与相关参数" class="headerlink" title="GC 策略与相关参数"></a>GC 策略与相关参数</h2><table><thead><tr><th>参数</th><th>说明</th><th>建议值</th><th>适用场景</th></tr></thead><tbody><tr><td><code>-XX:+UseG1GC</code></td><td>使用 G1 收集器</td><td>✅ 推荐</td><td>大堆、响应敏感场景</td></tr><tr><td><code>-XX:+UseZGC</code></td><td>使用 ZGC</td><td>✅ 新版本</td><td>超低延迟（&lt;10ms），大内存场景</td></tr><tr><td><code>-XX:+UseParallelGC</code></td><td>吞吐优先</td><td>适合计算型任务</td><td></td></tr><tr><td><code>-XX:+UseSerialGC</code></td><td>单线程 GC</td><td>嵌入式、低资源环境</td><td></td></tr><tr><td><code>-XX:MaxGCPauseMillis</code></td><td>G1 GC 最大暂停时间期望</td><td>目标如 <code>200</code> 毫秒</td><td>G1 调优核心参数</td></tr><tr><td><code>-XX:G1HeapRegionSize</code></td><td>G1 分区粒度</td><td><code>1m</code>, <code>2m</code>, <code>4m</code> 等</td><td>堆大时设置大粒度（4g 以上设 4m）</td></tr><tr><td><code>-XX:InitiatingHeapOccupancyPercent</code></td><td>G1 触发并发 GC 阈值</td><td>默认 <code>45</code>，推荐 <code>30~40</code></td><td>降低 Full GC 触发概率</td></tr></tbody></table><h2 id="诊断与稳定性参数"><a href="#诊断与稳定性参数" class="headerlink" title="诊断与稳定性参数"></a>诊断与稳定性参数</h2><table><thead><tr><th>参数</th><th>说明</th><th>用途</th></tr></thead><tbody><tr><td><code>-XX:+PrintGCDetails</code></td><td>打印 GC 详情</td><td>分析 GC 情况</td></tr><tr><td><code>-XX:+PrintGCDateStamps</code></td><td>打印时间戳</td><td>精准定位 GC 时间</td></tr><tr><td><code>-Xloggc:&lt;file&gt;</code></td><td>GC 日志输出路径</td><td>GC 分析工具输入</td></tr><tr><td><code>-XX:+HeapDumpOnOutOfMemoryError</code></td><td>OOM 时导出堆快照</td><td>内存泄漏排查</td></tr><tr><td><code>-XX:HeapDumpPath=&lt;file&gt;</code></td><td>OOM dump 文件路径</td><td>搭配上面参数使用</td></tr><tr><td><code>-XX:+UseContainerSupport</code></td><td>支持容器内资源限制</td><td>默认开启（JDK10+）</td></tr></tbody></table><h1 id="JDK8场景"><a href="#JDK8场景" class="headerlink" title="JDK8场景"></a>JDK8场景</h1><p>构建gc代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.jdk8.tech.jvm.gc_tech;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Luis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2025/06/04 12:14</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GcDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">_1MB</span> <span class="operator">=</span> <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 用于填充Eden的对象列表</span></span><br><span class="line">        List&lt;<span class="type">byte</span>[]&gt; edenContainer = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;开始填充Eden区...&quot;</span>);</span><br><span class="line">        <span class="comment">// 持续分配对象</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// 分配一个0.5MB - 1.5MB大小的对象 (避免全是相同大小,日志几乎相同)</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">500</span> * <span class="number">1024</span> + random.nextInt(<span class="number">1024</span> * <span class="number">1024</span>);</span><br><span class="line">            <span class="comment">// 持有引用，防止立即被回收</span></span><br><span class="line">            edenContainer.add(<span class="keyword">new</span> <span class="title class_">byte</span>[size]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟一点点业务逻辑，稍微减慢分配速度，更贴近真实场景</span></span><br><span class="line">            Thread.sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 可选：定期移除部分引用，让部分对象可回收（模拟部分短命对象）</span></span><br><span class="line">            <span class="keyword">if</span> (edenContainer.size() % <span class="number">100</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 移除列表前50个元素的引用 (让它们在下文GC中可回收)</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span> &amp;&amp; !edenContainer.isEmpty(); i++) &#123;</span><br><span class="line">                    edenContainer.remove(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>添加jvm启动命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># for idea vm</span><br><span class="line">-Xms512m</span><br><span class="line">-Xmx512m</span><br><span class="line">-Xmn128m</span><br><span class="line">-XX:SurvivorRatio=8</span><br><span class="line">-XX:+UseParNewGC</span><br><span class="line">-XX:+UseConcMarkSweepGC</span><br><span class="line">-XX:CMSInitiatingOccupancyFraction=75</span><br><span class="line">-XX:+PrintGCDetails</span><br><span class="line">-XX:+PrintGCDateStamps</span><br><span class="line">-Xloggc:gc.log</span><br><span class="line"></span><br><span class="line"># for jar</span><br><span class="line">java -Xms512m -Xmx512m \ # 堆总大小512MB</span><br><span class="line">     -Xmn256m            \ # 新生代256MB (Eden + S0 + S1)</span><br><span class="line">     -XX:SurvivorRatio=8 \ # Eden:S0:S1 = 8:1:1 (Eden~204.8MB, S0/S1~25.6MB)</span><br><span class="line">     -XX:+UseParNewGC    \ # 新生代使用ParNew</span><br><span class="line">     -XX:+UseConcMarkSweepGC \ # 老年代使用CMS</span><br><span class="line">     -XX:CMSInitiatingOccupancyFraction=75 \ # 老年代使用75%时启动CMS</span><br><span class="line">     -XX:+UseCMSInitiatingOccupancyOnly \ # 仅根据占用率触发CMS</span><br><span class="line">     -XX:+PrintGCDetails \ # 打印详细GC日志</span><br><span class="line">     -XX:+PrintGCDateStamps \ # 打印GC发生时间</span><br><span class="line">     -XX:+PrintTenuringDistribution \ # 打印晋升年龄信息</span><br><span class="line">     -Xloggc:gc.log      \ # 将GC日志输出到gc.log</span><br><span class="line">     -XX:+DisableExplicitGC \ # 禁止System.gc()干扰</span><br><span class="line">     -jar demo-luis.jar</span><br></pre></td></tr></table></figure><p>gc部分日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">Java HotSpot(TM) 64-Bit Server VM (25.202-b08) for windows-amd64 JRE (1.8.0_202-b08), built on Dec 15 2018 19:54:30 by &quot;java_re&quot; with MS VC++ 10.0 (VS2010)</span><br><span class="line">Memory: 4k page, physical 33363252k(16577640k free), swap 39130420k(12508580k free)</span><br><span class="line">CommandLine flags: -XX:CMSInitiatingOccupancyFraction=75 -XX:InitialHeapSize=536870912 -XX:MaxHeapSize=536870912 -XX:MaxNewSize=134217728 -XX:NewSize=134217728 -XX:OldPLABSize=16 -XX:+PrintGC -XX:+PrintGCDateStamps -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:SurvivorRatio=8 -XX:+UseCMSInitiatingOccupancyOnly -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseConcMarkSweepGC -XX:-UseLargePagesIndividualAllocation -XX:+UseParNewGC </span><br><span class="line">2025-06-04T12:27:23.753+0800: 0.169: [GC (Allocation Failure) 2025-06-04T12:27:23.753+0800: 0.170: [ParNew: 104876K-&gt;12778K(118016K), 0.0163323 secs] 104876K-&gt;51738K(511232K), 0.0164134 secs] [Times: user=0.00 sys=0.00, real=0.02 secs] </span><br><span class="line">2025-06-04T12:27:23.880+0800: 0.297: [GC (Allocation Failure) 2025-06-04T12:27:23.880+0800: 0.297: [ParNew: 116554K-&gt;13050K(118016K), 0.0284856 secs] 155514K-&gt;141179K(511232K), 0.0285187 secs] [Times: user=0.06 sys=0.02, real=0.03 secs] </span><br><span class="line">2025-06-04T12:27:24.026+0800: 0.443: [GC (Allocation Failure) 2025-06-04T12:27:24.026+0800: 0.443: [ParNew: 117547K-&gt;12861K(118016K), 0.0274540 secs] 245676K-&gt;228752K(511232K), 0.0274894 secs] [Times: user=0.05 sys=0.03, real=0.03 secs] </span><br><span class="line">2025-06-04T12:27:24.172+0800: 0.589: [GC (Allocation Failure) 2025-06-04T12:27:24.172+0800: 0.589: [ParNew: 117126K-&gt;12795K(118016K), 0.0144786 secs] 333017K-&gt;266179K(511232K), 0.0145109 secs] [Times: user=0.01 sys=0.00, real=0.01 secs] </span><br><span class="line">2025-06-04T12:27:24.307+0800: 0.724: [GC (Allocation Failure) 2025-06-04T12:27:24.307+0800: 0.724: [ParNew: 117465K-&gt;12893K(118016K), 0.0179375 secs] 370849K-&gt;312796K(511232K), 0.0179793 secs] [Times: user=0.02 sys=0.00, real=0.02 secs] </span><br><span class="line">2025-06-04T12:27:24.325+0800: 0.742: [GC (CMS Initial Mark) [1 CMS-initial-mark: 299903K(393216K)] 313996K(511232K), 0.0001349 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">2025-06-04T12:27:24.325+0800: 0.742: [CMS-concurrent-mark-start]</span><br><span class="line">2025-06-04T12:27:24.325+0800: 0.742: [CMS-concurrent-mark: 0.000/0.000 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">2025-06-04T12:27:24.325+0800: 0.742: [CMS-concurrent-preclean-start]</span><br><span class="line">2025-06-04T12:27:24.326+0800: 0.743: [CMS-concurrent-preclean: 0.000/0.000 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">2025-06-04T12:27:24.326+0800: 0.743: [CMS-concurrent-abortable-preclean-start]</span><br><span class="line">2025-06-04T12:27:24.445+0800: 0.861: [GC (Allocation Failure) 2025-06-04T12:27:24.445+0800: 0.861: [ParNew: 117642K-&gt;12925K(118016K), 0.0192145 secs] 417545K-&gt;359678K(511232K), 0.0192600 secs] [Times: user=0.00 sys=0.00, real=0.02 secs] </span><br><span class="line">2025-06-04T12:27:24.464+0800: 0.881: [CMS-concurrent-abortable-preclean: 0.000/0.138 secs] [Times: user=0.00 sys=0.00, real=0.14 secs] </span><br><span class="line">2025-06-04T12:27:24.464+0800: 0.881: [GC (CMS Final Remark) [YG occupancy: 13523 K (118016 K)]2025-06-04T12:27:24.464+0800: 0.881: [Rescan (parallel) , 0.0004817 secs]2025-06-04T12:27:24.464+0800: 0.881: [weak refs processing, 0.0000105 secs]2025-06-04T12:27:24.464+0800: 0.881: [class unloading, 0.0001355 secs]2025-06-04T12:27:24.464+0800: 0.881: [scrub symbol table, 0.0001910 secs]2025-06-04T12:27:24.464+0800: 0.882: [scrub string table, 0.0000666 secs][1 CMS-remark: 346752K(393216K)] 360275K(511232K), 0.0009259 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">2025-06-04T12:27:24.465+0800: 0.882: [CMS-concurrent-sweep-start]</span><br><span class="line">2025-06-04T12:27:24.465+0800: 0.882: [CMS-concurrent-sweep: 0.000/0.000 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">2025-06-04T12:27:24.465+0800: 0.882: [CMS-concurrent-reset-start]</span><br><span class="line">2025-06-04T12:27:24.466+0800: 0.883: [CMS-concurrent-reset: 0.001/0.001 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">2025-06-04T12:27:24.580+0800: 0.997: [GC (Allocation Failure) 2025-06-04T12:27:24.580+0800: 0.997: [ParNew: 116700K-&gt;12917K(118016K), 0.0079314 secs] 210742K-&gt;160642K(511232K), 0.0079722 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] </span><br><span class="line">2025-06-04T12:27:24.697+0800: 1.114: [GC (Allocation Failure) 2025-06-04T12:27:24.697+0800: 1.114: [ParNew: 117278K-&gt;13019K(118016K), 0.0148061 secs] 265003K-&gt;209342K(511232K), 0.0148437 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] </span><br><span class="line">2025-06-04T12:27:24.827+0800: 1.244: [GC (Allocation Failure) 2025-06-04T12:27:24.827+0800: 1.244: [ParNew: 117829K-&gt;12799K(118016K), 0.0058725 secs] 314153K-&gt;258724K(511232K), 0.0059129 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] </span><br><span class="line">2025-06-04T12:27:24.959+0800: 1.376: [GC (Allocation Failure) 2025-06-04T12:27:24.959+0800: 1.376: [ParNew: 117566K-&gt;13016K(118016K), 0.0070007 secs] 363491K-&gt;315011K(511232K), 0.0070522 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] </span><br><span class="line">2025-06-04T12:27:24.965+0800: 1.383: [GC (CMS Initial Mark) [1 CMS-initial-mark: 301994K(393216K)] 315720K(511232K), 0.0001801 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">2025-06-04T12:27:24.965+0800: 1.383: [CMS-concurrent-mark-start]</span><br><span class="line">2025-06-04T12:27:24.967+0800: 1.384: [CMS-concurrent-mark: 0.001/0.001 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">2025-06-04T12:27:24.967+0800: 1.384: [CMS-concurrent-preclean-start]</span><br><span class="line">2025-06-04T12:27:24.967+0800: 1.384: [CMS-concurrent-preclean: 0.000/0.000 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">2025-06-04T12:27:24.967+0800: 1.384: [CMS-concurrent-abortable-preclean-start]</span><br><span class="line">2025-06-04T12:27:25.091+0800: 1.508: [GC (Allocation Failure) 2025-06-04T12:27:25.091+0800: 1.508: [ParNew: 116822K-&gt;12800K(118016K), 0.0073121 secs] 418817K-&gt;372648K(511232K), 0.0073478 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] </span><br><span class="line">2025-06-04T12:27:25.098+0800: 1.515: [CMS-concurrent-abortable-preclean: 0.001/0.131 secs] [Times: user=0.00 sys=0.00, real=0.13 secs] </span><br><span class="line">2025-06-04T12:27:25.098+0800: 1.515: [GC (CMS Final Remark) [YG occupancy: 14025 K (118016 K)]2025-06-04T12:27:25.099+0800: 1.515: [Rescan (parallel) , 0.0003286 secs]2025-06-04T12:27:25.099+0800: 1.516: [weak refs processing, 0.0000050 secs]2025-06-04T12:27:25.099+0800: 1.516: [class unloading, 0.0001736 secs]2025-06-04T12:27:25.099+0800: 1.516: [scrub symbol table, 0.0002183 secs]2025-06-04T12:27:25.099+0800: 1.516: [scrub string table, 0.0000787 secs][1 CMS-remark: 359847K(393216K)] 373872K(511232K), 0.0008354 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">2025-06-04T12:27:25.099+0800: 1.516: [CMS-concurrent-sweep-start]</span><br><span class="line">2025-06-04T12:27:25.100+0800: 1.516: [CMS-concurrent-sweep: 0.000/0.000 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">2025-06-04T12:27:25.100+0800: 1.516: [CMS-concurrent-reset-start]</span><br><span class="line">2025-06-04T12:27:25.100+0800: 1.517: [CMS-concurrent-reset: 0.000/0.000 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line">2025-06-04T12:27:25.219+0800: 1.636: [GC (Allocation Failure) 2025-06-04T12:27:25.219+0800: 1.636: [ParNew: 117623K-&gt;12593K(118016K), 0.0076113 secs] 232551K-&gt;196120K(511232K), 0.0076467 secs] [Times: user=0.03 sys=0.00, real=0.01 secs] </span><br><span class="line">Heap</span><br><span class="line"> par new generation   total 118016K, used 61904K [0x00000000e0000000, 0x00000000e8000000, 0x00000000e8000000)</span><br><span class="line">  eden space 104960K,  46% used [0x00000000e0000000, 0x00000000e3027a68, 0x00000000e6680000)</span><br><span class="line">  from space 13056K,  96% used [0x00000000e6680000, 0x00000000e72cc660, 0x00000000e7340000)</span><br><span class="line">  to   space 13056K,   0% used [0x00000000e7340000, 0x00000000e7340000, 0x00000000e8000000)</span><br><span class="line"> concurrent mark-sweep generation total 393216K, used 183527K [0x00000000e8000000, 0x0000000100000000, 0x0000000100000000)</span><br><span class="line"> Metaspace       used 3747K, capacity 4604K, committed 4864K, reserved 1056768K</span><br><span class="line">  class space    used 409K, capacity 428K, committed 512K, reserved 1048576K</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="CommandLine-flags"><a href="#CommandLine-flags" class="headerlink" title="CommandLine flags"></a>CommandLine flags</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">堆配置：</span><br><span class="line">  - 总堆：512MB (536,870,912B)</span><br><span class="line">  - 新生代：128MB (134,217,728B)</span><br><span class="line">    - Eden：104,960KB (128MB × 8/10)</span><br><span class="line">    - Survivor ×2：各13,056KB (128MB × 1/10)</span><br><span class="line">  - 老年代：384MB (393,216KB)</span><br><span class="line">GC策略：</span><br><span class="line">  - 新生代：ParNew (并行复制)</span><br><span class="line">  - 老年代：CMS (并发标记清除)</span><br><span class="line">触发条件：</span><br><span class="line">  - CMS在75<span class="comment">%老年代占用时触发 (393,216KB × 0.75 = 294,912KB)</span></span><br></pre></td></tr></table></figure><h2 id="新生代GC"><a href="#新生代GC" class="headerlink" title="新生代GC"></a>新生代GC</h2><p>日志解析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2025-06-04T12:27:23.753+0800:</span><br><span class="line">0.169:</span><br><span class="line">[GC (Allocation Failure)</span><br><span class="line">2025-06-04T12:27:23.753+0800: 0.170:</span><br><span class="line">[ParNew: 104876K-&gt;12778K(118016K), 0.0163323 secs] </span><br><span class="line">104876K-&gt;51738K(511232K), 0.0164134 secs]</span><br><span class="line">[Times: user=0.00 sys=0.00, real=0.02 secs] </span><br></pre></td></tr></table></figure><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td><code>2025-06-04T12:27:23.753+0800</code></td><td>日志时间戳，表示发生 GC 的<strong>实际日期和时间</strong>。</td></tr><tr><td><code>0.169</code></td><td>从 JVM 启动以来的时间（单位：秒），即在启动后 <strong>0.169 秒时</strong>发生 GC。</td></tr><tr><td><code>[GC (Allocation Failure)</code></td><td>GC 类型为 <strong>Minor GC</strong>，原因是内存分配失败（Eden 区不足）。</td></tr><tr><td><code>2025-06-04T12:27:23.753+0800: 0.170:</code></td><td>再次打印时间戳，重复信息，有时用于记录多线程 GC 内部时间点。</td></tr><tr><td><code>[ParNew: 104876K-&gt;12778K(118016K)</code></td><td><strong>ParNew 新生代 GC 详细信息</strong>：   <br/>• GC 前使用 <code>104876K</code>  <br/>• GC 后剩 <code>12778K</code>  <br/>• 新生代总大小 <code>118016K</code></td></tr><tr><td><code>0.0163323 secs]</code></td><td>这一阶段 GC 耗时约 <code>16.3 毫秒</code>。</td></tr><tr><td><code>104876K-&gt;51738K(511232K)</code></td><td>整个堆（包括新生代 + 老年代）变化：  <br/> • GC 前总使用 <code>104876K</code>   <br/>• GC 后总使用 <code>51738K</code>   <br/>• 总堆大小为 <code>511232K</code></td></tr><tr><td><code>0.0164134 secs]</code></td><td>总的 GC 耗时（包括从新生代复制到老年代的时间）约 <code>16.4 毫秒</code>。</td></tr><tr><td><code>[Times: user=0.00 sys=0.00, real=0.02 secs]</code></td><td>GC 线程的 CPU 使用时间：   <br/>• <code>user</code>: 用户态线程时间   <br/>• <code>sys</code>: 内核态线程时间   <br/>• <code>real</code>: 实际时间（挂钟时间）为 <code>0.02 秒</code></td></tr></tbody></table><h2 id="老年代GC"><a href="#老年代GC" class="headerlink" title="老年代GC"></a>老年代GC</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># CMS GC 的第一阶段：初始标记。此阶段会 STW（Stop-The-World），标记从 GC Roots 可达的老年代对象。</span><br><span class="line">2025-06-04T12:27:24.325+0800: 0.742: [GC (CMS Initial Mark) [1 CMS-initial-mark: 299903K(393216K)] 313996K(511232K), 0.0001349 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line"></span><br><span class="line"># CMS 并发标记阶段开始。该阶段不会 STW，GC 线程会并发地遍历对象图。</span><br><span class="line">2025-06-04T12:27:24.325+0800: 0.742: [CMS-concurrent-mark-start]</span><br><span class="line"></span><br><span class="line"># CMS 的 并发标记阶段结束，耗时接近 0，说明要么没啥可标记的，要么系统负载极低，速度非常快。</span><br><span class="line">2025-06-04T12:27:24.325+0800: 0.742: [CMS-concurrent-mark: 0.000/0.000 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line"></span><br><span class="line"># 并发预清理阶段：GC 会尝试处理 minor GC 后新产生的垃圾（避免最终 remark STW 负担过重）。这一步耗时极短，表示垃圾量不大。</span><br><span class="line">2025-06-04T12:27:24.325+0800: 0.742: [CMS-concurrent-preclean-start]</span><br><span class="line">2025-06-04T12:27:24.326+0800: 0.743: [CMS-concurrent-preclean: 0.000/0.000 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line"></span><br><span class="line"># 可中断预清理阶段开始：CMS 在等待触发 Final Remark 前，反复尝试进一步清理垃圾，可以被打断（如遇 Allocation Failure）。</span><br><span class="line">2025-06-04T12:27:24.326+0800: 0.743: [CMS-concurrent-abortable-preclean-start]</span><br><span class="line"></span><br><span class="line"># 分配失败（新对象没地方放），触发了 minor GC（年轻代 GC）</span><br><span class="line"># # 这次 Allocation Failure 导致终止了 CMS 的 abortable preclean，转入 Final Remark。</span><br><span class="line">2025-06-04T12:27:24.445+0800: 0.861: [GC (Allocation Failure) 2025-06-04T12:27:24.445+0800: 0.861: [ParNew: 117642K-&gt;12925K(118016K), 0.0192145 secs] 417545K-&gt;359678K(511232K), 0.0192600 secs] [Times: user=0.00 sys=0.00, real=0.02 secs] </span><br><span class="line"></span><br><span class="line"># 可中断预清理阶段结束，总耗时 138ms，说明预清理尝试了多轮，最终被 allocation failure 中断。</span><br><span class="line">2025-06-04T12:27:24.464+0800: 0.881: [CMS-concurrent-abortable-preclean: 0.000/0.138 secs] [Times: user=0.00 sys=0.00, real=0.14 secs] </span><br><span class="line"></span><br><span class="line"># CMS GC 的 最终标记阶段（Final Remark），STW。子阶段细节后面介绍</span><br><span class="line">2025-06-04T12:27:24.464+0800: 0.881: [GC (CMS Final Remark) [YG occupancy: 13523 K (118016 K)]2025-06-04T12:27:24.464+0800: 0.881: [Rescan (parallel) , 0.0004817 secs]2025-06-04T12:27:24.464+0800: 0.881: [weak refs processing, 0.0000105 secs]2025-06-04T12:27:24.464+0800: 0.881: [class unloading, 0.0001355 secs]2025-06-04T12:27:24.464+0800: 0.881: [scrub symbol table, 0.0001910 secs]2025-06-04T12:27:24.464+0800: 0.882: [scrub string table, 0.0000666 secs][1 CMS-remark: 346752K(393216K)] 360275K(511232K), 0.0009259 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line"></span><br><span class="line"># 并发清除阶段：回收 unreachable 的老年代对象空间。完成得几乎瞬间，说明老年代垃圾量少或刚被清理过。</span><br><span class="line">2025-06-04T12:27:24.465+0800: 0.882: [CMS-concurrent-sweep-start]</span><br><span class="line">2025-06-04T12:27:24.465+0800: 0.882: [CMS-concurrent-sweep: 0.000/0.000 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line"></span><br><span class="line"># CMS GC 结束，重置 GC 状态，为下一次 GC 做准备。</span><br><span class="line">2025-06-04T12:27:24.465+0800: 0.882: [CMS-concurrent-reset-start]</span><br><span class="line">2025-06-04T12:27:24.466+0800: 0.883: [CMS-concurrent-reset: 0.001/0.001 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br></pre></td></tr></table></figure><h3 id="GC-的-初始标记参数解析"><a href="#GC-的-初始标记参数解析" class="headerlink" title="GC 的 初始标记参数解析"></a>GC 的 初始标记参数解析</h3><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td><code>GC (CMS Initial Mark)</code></td><td>CMS GC 的第一阶段：<strong>初始标记</strong>。此阶段会 STW（Stop-The-World），标记从 GC Roots 可达的老年代对象。</td></tr><tr><td><code>1 CMS-initial-mark: 299903K(393216K)</code></td><td>老年代（CMS）中已有对象为 <code>299903K</code>，总容量为 <code>393216K</code>。</td></tr><tr><td><code>313996K(511232K)</code></td><td>整个堆（包括年轻代）当前占用 <code>313996K</code>，堆总容量为 <code>511232K</code>。</td></tr><tr><td><code>0.0001349 secs</code></td><td>初始标记耗时极短，仅 <code>0.13ms</code>，说明堆对象不多，系统空闲度较高。</td></tr><tr><td>[Times: user&#x3D;0.00 sys&#x3D;0.00, real&#x3D;0.00 secs]</td><td>用户态 CPU 时间（线程并发运行）。      内核态 CPU 时间。      实际墙上时间（即 STW 时间）。此处为 0.00 秒，说明极其短暂，甚至小于 1ms。</td></tr></tbody></table><h3 id="GC-的-最终标记阶段"><a href="#GC-的-最终标记阶段" class="headerlink" title="GC 的 最终标记阶段"></a>GC 的 最终标记阶段</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2025-06-04T12:27:24.464+0800: 0.881: </span><br><span class="line">[GC (CMS Final Remark) </span><br><span class="line">    # 子阶段</span><br><span class="line">    [YG occupancy: 13523 K (118016 K)]2025-06-04T12:27:24.464+0800: 0.881: </span><br><span class="line">    [Rescan (parallel) , 0.0004817 secs]2025-06-04T12:27:24.464+0800: 0.881: </span><br><span class="line">    [weak refs processing, 0.0000105 secs]2025-06-04T12:27:24.464+0800: 0.881: </span><br><span class="line">    [class unloading, 0.0001355 secs]2025-06-04T12:27:24.464+0800: 0.881: </span><br><span class="line">    [scrub symbol table, 0.0001910 secs]2025-06-04T12:27:24.464+0800: 0.882: </span><br><span class="line">    [scrub string table, 0.0000666 secs]</span><br><span class="line">[1 CMS-remark: 346752K(393216K)] </span><br><span class="line">360275K(511232K), </span><br><span class="line">0.0009259 secs] </span><br><span class="line">[Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="最终标记阶段（Final-Remark）-参数解析"><a href="#最终标记阶段（Final-Remark）-参数解析" class="headerlink" title="最终标记阶段（Final Remark） 参数解析"></a>最终标记阶段（Final Remark） 参数解析</h4><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td><code>GC (CMS Final Remark)</code></td><td>表示是 CMS GC 的 <strong>Final Remark（最终标记）</strong>阶段，STW。用于补充并发标记期间对象引用关系的变化。</td></tr><tr><td><code>[1 CMS-remark: 346752K(393216K)]</code></td><td>老年代中可达对象 <code>346752K</code>，老年代总容量 <code>393216K</code>。这是最终标记完后存活的对象。</td></tr><tr><td><code>360275K(511232K)</code></td><td>整个堆（young + old）占用 <code>360275K</code>，总容量 <code>511232K</code>。</td></tr><tr><td><code>0.0009259 secs</code></td><td>本次 Final Remark 总耗时不到 1ms，表现极好。</td></tr></tbody></table><h4 id="子阶段"><a href="#子阶段" class="headerlink" title="子阶段"></a>子阶段</h4><table><thead><tr><th>子阶段</th><th>说明</th></tr></thead><tbody><tr><td>YG occupancy: 13523 K (118016 K)</td><td>年轻代使用情况：共 <code>118016K</code>，已使用 <code>13523K</code>，剩余大约 <code>104493K</code>。</td></tr><tr><td>[Rescan (parallel), 0.0004817 secs]</td><td><code>Rescan</code>   多线程重新标记 CMS Root Set 中的引用变化（避免误判 GC Roots）。   耗时不到 0.5ms，说明对象变化较少，GC Root 数量不大。</td></tr><tr><td><code>weak refs processing, 0.0000105 secs</code></td><td>清理 <code>WeakReference</code> 等引用对象。耗时非常短，说明弱引用数量很少。</td></tr><tr><td><code>class unloading, 0.0001355 secs</code></td><td>卸载没有引用的类（class loader）。耗时约 0.13ms，说明当前无大量动态加载&#x2F;卸载行为。</td></tr><tr><td><code>scrub symbol table</code> &#x2F; <code>scrub string table</code></td><td>清理常量池&#x2F;字符串表中已无引用的项。</td></tr></tbody></table><p><strong>CMS流程</strong>：<br>初始标记（STW）→ 并发标记 → 预清理 → 可中止预清理 → 最终标记（STW）→ 并发清除 → 重置。</p><h2 id="关键GC事件分析"><a href="#关键GC事件分析" class="headerlink" title="关键GC事件分析"></a>关键GC事件分析</h2><h3 id="阶段1：快速填充期（0-169s-0-724s）"><a href="#阶段1：快速填充期（0-169s-0-724s）" class="headerlink" title="阶段1：快速填充期（0.169s - 0.724s）"></a>阶段1：快速填充期（0.169s - 0.724s）</h3><p>连续发生Minor GC (ParNew)，对象快速晋升老年代</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0.169s: [ParNew: 104876K-&gt;12778K] 堆: 104876K-&gt;51738K </span><br><span class="line">  → 老年代占用: 51,738K - 12,778K = 38,960K</span><br><span class="line"></span><br><span class="line">0.297s: [ParNew: 116554K-&gt;13050K] 堆: 155514K-&gt;141179K </span><br><span class="line">  → 老年代占用: 141,179K - 13,050K = 128,129K (+89,169K)</span><br><span class="line"></span><br><span class="line">0.724s: [ParNew: 117465K-&gt;12893K] 堆: 370849K-&gt;312796K </span><br><span class="line">  → 老年代占用: 312,796K - 12,893K = 299,903K (已达阈值76.3%)</span><br></pre></td></tr></table></figure><ul><li><strong>5次Minor GC</strong> 后老年代从 0K → <strong>299,903K</strong></li><li>晋升速率：<strong>≈60MB&#x2F;秒</strong></li><li>触发CMS条件：299,903K &gt; 294,912K (75%)</li></ul><h3 id="阶段2：第一次CMS周期（0-742s-0-883s）"><a href="#阶段2：第一次CMS周期（0-742s-0-883s）" class="headerlink" title="阶段2：第一次CMS周期（0.742s - 0.883s）"></a>阶段2：第一次CMS周期（0.742s - 0.883s）</h3><p>并发标记清理，清理后老年代明显下降</p><h1 id="END"><a href="#END" class="headerlink" title="END"></a>END</h1>]]></content>
      
      
      <categories>
          
          <category> JVM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Junit5、Mockito3</title>
      <link href="/aefb5c52.html"/>
      <url>/aefb5c52.html</url>
      
        <content type="html"><![CDATA[<h1 id="Junit5"><a href="#Junit5" class="headerlink" title="Junit5"></a>Junit5</h1><blockquote><p>官方文档: <a href="https://junit.org/junit5/docs/current/user-guide/#overview">https://junit.org/junit5/docs/current/user-guide/#overview</a></p></blockquote><h2 id="什么是-JUnit-5？"><a href="#什么是-JUnit-5？" class="headerlink" title="什么是 JUnit 5？"></a>什么是 JUnit 5？</h2><p>与以前版本的 JUnit 不同，JUnit 5 由来自三个不同子项目的几个不同模块组成。</p><blockquote><p>JUnit 5 &#x3D; JUnit Platform + JUnit Jupiter + JUnit Vintage</p></blockquote><p>JUnit 平台作为在 JVM 上启动测试框架的基础。它还定义了TestEngine用于开发在平台上运行的测试框架的 API。此外，该平台提供了一个<br>控制台启动器以从命令行启动平台，并提供JUnit 平台套件引擎以使用平台上的一个或多个测试引擎运行自定义测试套件。流行的<br>IDE（参见IntelliJ IDEA、 Eclipse、NetBeans和 Visual Studio Code）和构建工具（参见Gradle、 Maven和蚂蚁）。</p><p>JUnit Jupiter是用于在 JUnit 5 中编写测试和扩展的编程模型和 扩展模型的组合。Jupiter 子项目提供了一个TestEngine用于在平台上运行基于<br>Jupiter 的测试。</p><p>JUnit Vintage提供了一个TestEngine用于在平台上运行基于 JUnit 3 和 JUnit 4 的测试。它需要 JUnit 4.12 或更高版本出现在类路径或模块路径上。</p><h3 id="支持的-Java-版本"><a href="#支持的-Java-版本" class="headerlink" title="支持的 Java 版本"></a>支持的 Java 版本</h3><p>JUnit 5 在运行时需要 Java 8（或更高版本）。但是，您仍然可以测试使用以前版本的 JDK 编译的代码。</p><hr><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>JUnit Jupiter 支持以下用于配置测试和扩展框架的注解。</p><p>除非另有说明，否则所有核心注释都位于模块中的<code>org.junit.jupiter.api</code>包中<code>junit-jupiter-api</code>。</p><table><thead><tr><th align="left">注解</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>@Test</code></td><td align="left">表示方法是测试方法。与 JUnit 4 的<code>@Test</code>注释不同，此注释不声明任何属性，因为 JUnit Jupiter 中的测试扩展基于它们自己的专用注释进行操作。此类方法将被<em>继承</em>，除非它们被<em>覆盖</em>。</td></tr><tr><td align="left"><code>@ParameterizedTest</code></td><td align="left">表示方法是<a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests">参数化测试</a>。此类方法将被<em>继承</em>，除非它们被<em>覆盖</em>。</td></tr><tr><td align="left"><code>@RepeatedTest</code></td><td align="left">表示方法是<a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-repeated-tests">重复测试</a>的测试模板。此类方法将被<em>继承</em>，除非它们被<em>覆盖</em>。</td></tr><tr><td align="left"><code>@TestFactory</code></td><td align="left">表示方法是<a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-dynamic-tests">动态测试</a>的测试工厂。此类方法将被<em>继承</em>，除非它们被<em>覆盖</em>。</td></tr><tr><td align="left"><code>@TestTemplate</code></td><td align="left">表示方法是<a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-templates">测试用例的模板，设计用于根据注册</a><a href="https://junit.org/junit5/docs/current/user-guide/#extensions-test-templates">提供者</a>返回的调用上下文的数量多次调用。此类方法将被<em>继承</em>，除非它们被<em>覆盖</em>。</td></tr><tr><td align="left"><code>@TestClassOrder</code></td><td align="left">用于配置注解测试类中测试类的<a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-execution-order-classes">测试类执行顺序。</a><code>@Nested</code>这样的注解是<em>继承</em>的。</td></tr><tr><td align="left"><code>@TestMethodOrder</code></td><td align="left">用于配置注解测试类的<a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-execution-order-methods">测试方法执行顺序</a>；类似于 JUnit 4 的<code>@FixMethodOrder</code>. 这样的注解是<em>继承</em>的。</td></tr><tr><td align="left"><code>@TestInstance</code></td><td align="left">用于为带注释的测试类配置<a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-instance-lifecycle">测试实例生命周期。</a>这样的注解是<em>继承</em>的。</td></tr><tr><td align="left"><code>@DisplayName</code></td><td align="left">声明测试类或测试方法的自定义<a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-display-names">显示名称。</a>此类注释不会被<em>继承</em>。</td></tr><tr><td align="left"><code>@DisplayNameGeneration</code></td><td align="left">为测试类声明自定义<a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-display-name-generator">显示名称生成器。</a>这样的注解是<em>继承</em>的。</td></tr><tr><td align="left"><code>@BeforeEach</code></td><td align="left">表示被注解的方法应该在当前类中的<strong>每个</strong>, , , 或方法<em>之前执行；</em> 类似于 JUnit 4 的. 此类方法是<em>继承</em>的——除非它们被<em>覆盖</em>或<em>取代</em>（即，仅根据签名进行替换，而不考虑 Java 的可见性规则）。 <code>@Test``@RepeatedTest``@ParameterizedTest``@TestFactory``@Before</code></td></tr><tr><td align="left"><code>@AfterEach</code></td><td align="left">表示被注解的方法应该在当前类中的<strong>每个</strong>, , , 或方法<em>之后执行；</em> 类似于 JUnit 4 的. 此类方法是<em>继承</em>的——除非它们被<em>覆盖</em>或<em>取代</em>（即，仅根据签名进行替换，而不考虑 Java 的可见性规则）。 <code>@Test``@RepeatedTest``@ParameterizedTest``@TestFactory``@After</code></td></tr><tr><td align="left"><code>@BeforeAll</code></td><td align="left">表示被注解的方法应该在当前类中的<strong>所有</strong>, , , 和方法<em>之前执行；</em> 类似于 JUnit 4 的. 此类方法是<em>继承</em>的——除非它们被<em>隐藏</em>、<em>覆盖</em>或<em>取代</em>（即，仅基于签名替换，而不考虑 Java 的可见性规则）——并且必须是，除非使用“每类”<a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-instance-lifecycle">测试实例生命周期</a>。 <code>@Test``@RepeatedTest``@ParameterizedTest``@TestFactory``@BeforeClass``static</code></td></tr><tr><td align="left"><code>@AfterAll</code></td><td align="left">表示被注解的方法应该在当前类中的<strong>所有</strong>, , , 和方法<em>之后执行；</em> 类似于 JUnit 4 的. 此类方法是<em>继承</em>的——除非它们被<em>隐藏</em>、<em>覆盖</em>或<em>取代</em>（即，仅基于签名替换，而不考虑 Java 的可见性规则）——并且必须是，除非使用“每类”<a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-instance-lifecycle">测试实例生命周期</a>。 <code>@Test``@RepeatedTest``@ParameterizedTest``@TestFactory``@AfterClass``static</code></td></tr><tr><td align="left"><code>@Nested</code></td><td align="left">表示被注释的类是一个非静态的<a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-nested">嵌套测试类</a>。在 Java 8 到 Java 15 中，<code>@BeforeAll</code>除非使用“每类”<a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-instance-lifecycle">测试实例生命周期</a><code>@AfterAll</code>，否则不能直接在测试类中使用方法。从 Java 16 开始，可以使用任一测试实例生命周期模式在测试类中声明方法。此类注释不会被<em>继承</em>。<code>@Nested``@BeforeAll``@AfterAll``static``@Nested</code></td></tr><tr><td align="left"><code>@Tag</code></td><td align="left">用于在类或方法级别声明<a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-tagging-and-filtering">过滤测试的标签；</a>类似于 TestNG 中的测试组或 JUnit 4 中的类别。此类注释在类级别<em>继承</em>，但不在方法级别继承。</td></tr><tr><td align="left"><code>@Disabled</code></td><td align="left">用于<a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-disabling">禁用</a>测试类或测试方法；类似于 JUnit 4 的<code>@Ignore</code>. 此类注释不会被<em>继承</em>。</td></tr><tr><td align="left"><code>@Timeout</code></td><td align="left">如果测试、测试工厂、测试模板或生命周期方法的执行超过给定持续时间，则用于使测试、测试工厂、测试模板或生命周期方法失败。这样的注解是<em>继承</em>的。</td></tr><tr><td align="left"><code>@ExtendWith</code></td><td align="left">用于以<a href="https://junit.org/junit5/docs/current/user-guide/#extensions-registration-declarative">声明方式注册扩展</a>。这样的注解是<em>继承</em>的。</td></tr><tr><td align="left"><code>@RegisterExtension</code></td><td align="left">用于通过字段以<a href="https://junit.org/junit5/docs/current/user-guide/#extensions-registration-programmatic">编程方式注册扩展。</a>这些字段是<em>继承</em>的，除非它们被<em>隐藏</em>。</td></tr><tr><td align="left"><code>@TempDir</code></td><td align="left">用于在生命周期方法或测试方法中通过字段注入或参数注入提供<a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-built-in-extensions-TempDirectory">临时目录；</a>位于<code>org.junit.jupiter.api.io</code>包中。</td></tr></tbody></table><p>代码演示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.junit5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.fail;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assumptions.assumeTrue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StandardTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">initAll</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">succeedingTest</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">failingTest</span><span class="params">()</span> &#123;</span><br><span class="line">        fail(<span class="string">&quot;a failing test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Disabled(&quot;for demonstration purposes&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">skippedTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// not executed</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">abortedTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 假设为真</span></span><br><span class="line">        assumeTrue(<span class="string">&quot;abc&quot;</span>.contains(<span class="string">&quot;Z&quot;</span>));</span><br><span class="line">        fail(<span class="string">&quot;test should have been aborted&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterAll</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">tearDownAll</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="测试类和方法"><a href="#测试类和方法" class="headerlink" title="测试类和方法"></a>测试类和方法</h2><p>测试方法和生命周期方法可以在当前测试类中本地声明、从超类继承或从接口继承（请参阅 <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-interfaces-and-default-methods">测试接口和默认方法</a><br>）。此外，测试方法和生命周期方法不得<code>abstract</code>也不得返回值（<code>@TestFactory</code> 需要返回值的方法除外）。</p><ul><li><p>类和方法可见性测试类、测试方法和生命周期方法不需要是<code>public</code>，但它们<em>不能</em>是<code>private</code>。</p></li><li><p>通常建议省略<code>public</code><br>测试类、测试方法和生命周期方法的修饰符，除非有这样做的技术原因——例如，当一个测试类被另一个包中的测试类扩展时。创建类和方法的另一个技术原因<code>public</code><br>是在使用 Java 模块系统时简化模块路径上的测试。</p></li></ul><p>下面的测试类演示了<code>@Test</code><br>方法的使用和所有支持的生命周期方法。有关运行时语义的更多信息，请参阅 <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-execution-order">测试执行顺序</a><br>和 <a href="https://junit.org/junit5/docs/current/user-guide/#extensions-execution-order-wrapping-behavior">回调的包装行为</a>。</p><p>一个标准的测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.junit5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.fail;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assumptions.assumeTrue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T1_StandardTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">initAll</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">succeedingTest</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">failingTest</span><span class="params">()</span> &#123;</span><br><span class="line">        fail(<span class="string">&quot;a failing test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Disabled(&quot;for demonstration purposes&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">skippedTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// not executed</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">abortedTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 假设为真</span></span><br><span class="line">        assumeTrue(<span class="string">&quot;abc&quot;</span>.contains(<span class="string">&quot;Z&quot;</span>));</span><br><span class="line">        fail(<span class="string">&quot;test should have been aborted&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterAll</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">tearDownAll</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="显示名称"><a href="#显示名称" class="headerlink" title="显示名称"></a>显示名称</h2><p>测试类和测试方法可以通过<code>@DisplayName</code>空格、特殊字符甚至表情符号来声明自定义显示名称，这些名称将显示在测试报告中以及由测试运行程序和<br>IDE 显示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.junit5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DisplayName;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DisplayName(&quot;A special test case&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T2_DisplayNameDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;Custom test name containing spaces&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testWithDisplayNameContainingSpaces</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;╯°□°）╯&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testWithDisplayNameContainingSpecialCharacters</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;😱&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testWithDisplayNameContainingEmoji</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><p>JUnit Jupiter 附带了许多 JUnit 4 拥有的断言方法，并添加了一些非常适合与 Java 8 lambda 一起使用的断言方法。所有 JUnit<br>Jupiter 断言都是类中的<code>static</code>方法<code>org.junit.jupiter.api.Assertions</code>。</p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">multiply</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a * b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a / b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">subtract</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>断言</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.junit5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.luis.domain.Calculator;</span><br><span class="line"><span class="keyword">import</span> cn.luis.domain.Person;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.time.Duration.ofMillis;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.time.Duration.ofMinutes;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T3_AssertionsDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Calculator</span> <span class="variable">calculator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jane&quot;</span>, <span class="string">&quot;Doe&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">standardAssertions</span><span class="params">()</span> &#123;</span><br><span class="line">    assertEquals(<span class="number">2</span>, calculator.add(<span class="number">1</span>, <span class="number">1</span>));</span><br><span class="line">    assertEquals(<span class="number">4</span>, calculator.multiply(<span class="number">2</span>, <span class="number">2</span>), <span class="string">&quot;不相等&quot;</span>);</span><br><span class="line">    assertTrue(<span class="string">&#x27;a&#x27;</span> &lt; <span class="string">&#x27;b&#x27;</span>, () -&gt; <span class="string">&quot;延迟计算&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">groupedAssertions</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 在分组断言中，将执行所有断言，并将一起报告所有故障。</span></span><br><span class="line">    assertAll(<span class="string">&quot;person&quot;</span>,</span><br><span class="line">            () -&gt; assertEquals(<span class="string">&quot;Jane&quot;</span>, person.getFirstName()),</span><br><span class="line">            () -&gt; assertEquals(<span class="string">&quot;Doe&quot;</span>, person.getLastName())</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">dependentAssertions</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 在代码块中，如果断言失败，将跳过同一块中的后续代码。</span></span><br><span class="line">    assertAll(<span class="string">&quot;properties&quot;</span>,</span><br><span class="line">            () -&gt; &#123;</span><br><span class="line">              <span class="type">String</span> <span class="variable">firstName</span> <span class="operator">=</span> person.getFirstName();</span><br><span class="line">              assertNotNull(firstName);</span><br><span class="line"></span><br><span class="line">              <span class="comment">// 仅当上一个断言有效时才执行。</span></span><br><span class="line">              assertAll(<span class="string">&quot;first name&quot;</span>,</span><br><span class="line">                      () -&gt; assertTrue(firstName.startsWith(<span class="string">&quot;J&quot;</span>)),</span><br><span class="line">                      () -&gt; assertTrue(firstName.endsWith(<span class="string">&quot;e&quot;</span>))</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">            () -&gt; &#123;</span><br><span class="line">              <span class="comment">// 分组断言，因此独立于名字断言的结果进行处理。</span></span><br><span class="line">              <span class="type">String</span> <span class="variable">lastName</span> <span class="operator">=</span> person.getLastName();</span><br><span class="line">              assertNotNull(lastName);</span><br><span class="line"></span><br><span class="line">              <span class="comment">// Executed only if the previous assertion is valid.</span></span><br><span class="line">              assertAll(<span class="string">&quot;last name&quot;</span>,</span><br><span class="line">                      () -&gt; assertTrue(lastName.startsWith(<span class="string">&quot;D&quot;</span>)),</span><br><span class="line">                      () -&gt; assertTrue(lastName.endsWith(<span class="string">&quot;e&quot;</span>))</span><br><span class="line">              );</span><br><span class="line">            &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">exceptionTesting</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Exception</span> <span class="variable">exception</span> <span class="operator">=</span> assertThrows(ArithmeticException.class, () -&gt;</span><br><span class="line">            calculator.divide(<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    assertEquals(<span class="string">&quot;/ by zero&quot;</span>, exception.getMessage());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">timeoutNotExceeded</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// T以下断言成功。</span></span><br><span class="line">    assertTimeout(ofMinutes(<span class="number">2</span>), () -&gt; &#123;</span><br><span class="line">      <span class="comment">// 执行耗时不到 2 分钟的任务。</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">timeoutNotExceededWithResult</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 以下断言成功，并返回提供的对象。</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">actualResult</span> <span class="operator">=</span> assertTimeout(ofMinutes(<span class="number">2</span>), () -&gt; &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;a result&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    assertEquals(<span class="string">&quot;a result&quot;</span>, actualResult);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">timeoutNotExceededWithMethod</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 以下断言调用方法引用并返回一个对象。</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">actualGreeting</span> <span class="operator">=</span> assertTimeout(ofMinutes(<span class="number">2</span>), T3_AssertionsDemo::greeting);</span><br><span class="line">    assertEquals(<span class="string">&quot;Hello, World!&quot;</span>, actualGreeting);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">timeoutExceeded</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// The following assertion fails with an error message similar to:</span></span><br><span class="line">    <span class="comment">// execution exceeded timeout of 10 ms by 91 ms</span></span><br><span class="line">    assertTimeout(ofMillis(<span class="number">10</span>), () -&gt; &#123;</span><br><span class="line">      <span class="comment">// Simulate task that takes more than 10 ms.</span></span><br><span class="line">      Thread.sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">timeoutExceededWithPreemptiveTermination</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// The following assertion fails with an error message similar to:</span></span><br><span class="line">    <span class="comment">// execution timed out after 10 ms</span></span><br><span class="line">    assertTimeoutPreemptively(ofMillis(<span class="number">10</span>), () -&gt; &#123;</span><br><span class="line">      <span class="comment">// Simulate task that takes more than 10 ms.</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">1</span>).await();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">greeting</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">assertWithHamcrestMatcher</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 第三方断言库 hamcrest</span></span><br><span class="line">    assertThat(calculator.subtract(<span class="number">4</span>, <span class="number">1</span>), is(equalTo(<span class="number">3</span>)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三方断言库"><a href="#第三方断言库" class="headerlink" title="第三方断言库"></a>第三方断言库</h3><p>尽管 JUnit Jupiter 提供的断言工具足以满足许多测试场景，但有时仍 需要或需要更强大的功能和附加功能，例如<em>匹配器。</em><br>在这种情况下，JUnit<br>团队建议使用第三方断言库，如<a href="https://joel-costigliola.github.io/assertj/">AssertJ</a>、<a href="https://hamcrest.org/JavaHamcrest/">Hamcrest</a>、<a href="https://truth.dev/">Truth</a><br>等。开发人员因此可以自由选择使用他们选择的断言库。</p><p>例如，<em>匹配器</em>和流畅的 API 的组合可用于使断言更具描述性和可读性。但是，JUnit Jupiter 的<code>org.junit.jupiter.api.Assertions</code><br>类没有提供 <a href="https://junit.org/junit4/javadoc/latest/org/junit/Assert.html#assertThat"><code>assertThat()</code></a> 像 JUnit<br>4<code>org.junit.Assert</code>类中接受 Hamcrest<br>的方法<a href="https://junit.org/junit4/javadoc/latest/org/hamcrest/Matcher.html"><code>Matcher</code></a>。相反，鼓励开发人员使用第三方断言库提供的对匹配器的内置支持。</p><hr><h2 id="假设"><a href="#假设" class="headerlink" title="假设"></a>假设</h2><p>JUnit Jupiter 附带了 JUnit 4 提供的假设方法的一个子集，并添加了一些非常适合与 Java 8 lambda 表达式和方法引用一起使用的方法。所有<br>JUnit Jupiter 假设都是 <code>org.junit.jupiter.api.Assumptions</code>类中的静态方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.junit5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.luis.domain.Calculator;</span><br><span class="line"><span class="keyword">import</span> cn.luis.domain.Person;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assumptions.assumeTrue;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assumptions.assumingThat;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * assumeTrue:如果表达式的计算结果为false，则test将暂停并变为 已忽略，表示该测试不应运行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T4_AssumptionsDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Calculator</span> <span class="variable">calculator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jane&quot;</span>, <span class="string">&quot;Doe&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">testOnlyOnCiServer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// true</span></span><br><span class="line">    assumeTrue(<span class="string">&quot;Jane&quot;</span>.equals(person.getFirstName()));</span><br><span class="line">    <span class="comment">// 测试的其余部分</span></span><br><span class="line">    assertEquals(<span class="number">2</span>, calculator.divide(<span class="number">4</span>, <span class="number">2</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">testOnlyOnDeveloperWorkstation</span><span class="params">()</span> &#123;</span><br><span class="line">    assumeTrue(<span class="string">&quot;DEV&quot;</span>.equals(System.getenv(<span class="string">&quot;ENV&quot;</span>)),</span><br><span class="line">            () -&gt; <span class="string">&quot;中止测试：不在开发人员工作站上&quot;</span>);</span><br><span class="line">    <span class="comment">// 测试的其余部分</span></span><br><span class="line">    assertEquals(<span class="number">2</span>, calculator.divide(<span class="number">4</span>, <span class="number">2</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">testInAllEnvironments</span><span class="params">()</span> &#123;</span><br><span class="line">    assumingThat(<span class="string">&quot;CI&quot;</span>.equals(System.getenv(<span class="string">&quot;ENV&quot;</span>)),</span><br><span class="line">            () -&gt; &#123;</span><br><span class="line">              <span class="comment">// 仅在 CI 服务器上执行这些断言</span></span><br><span class="line">              assertEquals(<span class="number">2</span>, calculator.divide(<span class="number">4</span>, <span class="number">2</span>));</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在所有环境中执行这些断言</span></span><br><span class="line">    assertEquals(<span class="number">42</span>, calculator.multiply(<span class="number">6</span>, <span class="number">7</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="禁用测试"><a href="#禁用测试" class="headerlink" title="禁用测试"></a>禁用测试</h2><p>可以通过<br><em>注解、</em><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-conditional-execution">条件测试执行</a><code>@Disabled</code><br>中讨论的注解之一<br>或自定义的.<a href="https://junit.org/junit5/docs/current/user-guide/#extensions-conditions"><code>ExecutionCondition</code></a></p><p>这是一个<code>@Disabled</code>测试类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.junit5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Disabled;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 运行cn.luis.junit5整个文件夹时，跳过该类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Disabled(&quot;Disabled until bug #99 has been fixed&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T5_1_DisabledClassDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testWillBeSkipped</span><span class="params">()</span> &#123;</span><br><span class="line">        assertEquals(<span class="number">2</span>, <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个包含<code>@Disabled</code>测试方法的测试类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.junit5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Disabled;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 运行T5_2_DisabledClassDemo类时，跳过Disabled方法</span></span><br><span class="line"><span class="comment"> * 注意：</span></span><br><span class="line"><span class="comment"> * 若<span class="doctag">@Disabled</span>标记该类中有Disabled标记的方法，那么运行该类时，不会跳过有Disabled标记的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// @Disabled</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T5_2_DisabledClassDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Disabled(&quot;Disabled until bug #42 has been resolved&quot;)</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testWillBeSkipped</span><span class="params">()</span> &#123;</span><br><span class="line">        assertEquals(<span class="number">2</span>, <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testWillBeExecuted</span><span class="params">()</span> &#123;</span><br><span class="line">        assertEquals(<span class="number">2</span>, <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>若@Disabled标记该类中有Disabled标记的方法，那么运行该类时，不会跳过有Disabled标记的方法。【实测】</p></blockquote><p><code>@Disabled</code>可以在不提供<em>理由</em>的情况下宣布；然而，JUnit<br>团队建议开发人员提供一个简短的解释，说明为什么禁用测试类或测试方法。因此，上面的例子都显示了原因的使用——例如，<code>@Disabled(&quot;Disabled until bug #42 has been resolved&quot;)</code><br>。一些开发团队甚至要求在自动可追溯性等 <em>原因中存在问题跟踪号。</em></p><hr><h2 id="嵌套测试"><a href="#嵌套测试" class="headerlink" title="嵌套测试"></a>嵌套测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.junit5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DisplayName;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Nested;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.EmptyStackException;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 嵌套测试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DisplayName(&quot;A stack&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T6_TestingAStackDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    Stack&lt;Object&gt; stack;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;is instantiated with new Stack()&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">isInstantiatedWithNew</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nested</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;when new&quot;)</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">WhenNew</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@BeforeEach</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">createNewStack</span><span class="params">()</span> &#123;</span><br><span class="line">            stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;is empty&quot;)</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">            assertTrue(stack.isEmpty());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;throws EmptyStackException when popped&quot;)</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">throwsExceptionWhenPopped</span><span class="params">()</span> &#123;</span><br><span class="line">            assertThrows(EmptyStackException.class, stack::pop);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;throws EmptyStackException when peeked&quot;)</span></span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">throwsExceptionWhenPeeked</span><span class="params">()</span> &#123;</span><br><span class="line">            assertThrows(EmptyStackException.class, stack::peek);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Nested</span></span><br><span class="line">        <span class="meta">@DisplayName(&quot;after pushing an element&quot;)</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">AfterPushing</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">anElement</span> <span class="operator">=</span> <span class="string">&quot;an element&quot;</span>;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@BeforeEach</span></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">pushAnElement</span><span class="params">()</span> &#123;</span><br><span class="line">                stack.push(anElement);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;it is no longer empty&quot;)</span></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">isNotEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">                assertFalse(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;returns the element when popped and is empty&quot;)</span></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">returnElementWhenPopped</span><span class="params">()</span> &#123;</span><br><span class="line">                assertEquals(anElement, stack.pop());</span><br><span class="line">                assertTrue(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">            <span class="meta">@DisplayName(&quot;returns the element when peeked but remains not empty&quot;)</span></span><br><span class="line">            <span class="keyword">void</span> <span class="title function_">returnElementWhenPeeked</span><span class="params">()</span> &#123;</span><br><span class="line">                assertEquals(anElement, stack.peek());</span><br><span class="line">                assertFalse(stack.isEmpty());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在此示例中，通过为设置代码定义分层生命周期方法，将来自外部测试的先决条件用于内部测试。例如，<code>createNewStack()</code><br>是一个 <code>@BeforeEach</code>生命周期方法，它在定义它的测试类中以及在定义它的类下面的嵌套树中的所有级别中使用。</p><p>外部测试的设置代码在内部测试执行之前运行这一事实使您能够独立运行所有测试。您甚至可以单独运行内部测试而不运行外部测试，因为始终会执行外部测试的设置代码。</p><p><em>只有非静态嵌套类</em>（即<em>内部类</em>）可以作为<code>@Nested</code>测试类。嵌套可以任意深，并且这些内部类受到完整的生命周期支持，但有一个例外：<br><em>默认情况下</em><code>@BeforeAll</code>方法<code>@AfterAll</code>不起作用。原因是 Java 不允许在 Java 16<br>之前的内部类中使用成员。但是，可以通过使用（请参阅 <a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-instance-lifecycle">测试实例生命周期</a><br>）注释测试类来规避此限制。如果您使用的是 Java 16 或更高版本，<br>并且可以在测试类中声明方法，则此限制不再适用。 <code>static``@Nested``@TestInstance(Lifecycle.PER_CLASS)``@BeforeAll``@AfterAll``static``@Nested</code></p><h2 id="反复测试"><a href="#反复测试" class="headerlink" title="反复测试"></a>反复测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.junit5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Luis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T7_RepeatDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">beforeEach</span><span class="params">(TestInfo testInfo, RepetitionInfo repetitionInfo)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">currentRepetition</span> <span class="operator">=</span> repetitionInfo.getCurrentRepetition();</span><br><span class="line">        <span class="type">int</span> <span class="variable">totalRepetitions</span> <span class="operator">=</span> repetitionInfo.getTotalRepetitions();</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> testInfo.getTestMethod().get().getName();</span><br><span class="line">        <span class="comment">// should use log instead</span></span><br><span class="line">        System.out.println(String.format(<span class="string">&quot;About to execute repetition %d of %d for %s&quot;</span>,</span><br><span class="line">                currentRepetition, totalRepetitions, methodName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RepeatedTest(3)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">repeatedTest</span><span class="params">()</span> &#123;</span><br><span class="line">        assertEquals(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RepeatedTest(5)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">repeatedTestWithRepetitionInfo</span><span class="params">(RepetitionInfo repetitionInfo)</span> &#123;</span><br><span class="line">        assertEquals(<span class="number">5</span>, repetitionInfo.getTotalRepetitions());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RepeatedTest(value = 1, name = &quot;&#123;displayName&#125; &#123;currentRepetition&#125;/&#123;totalRepetitions&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;Repeat!&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">customDisplayName</span><span class="params">(TestInfo testInfo)</span> &#123;</span><br><span class="line">        assertEquals(<span class="string">&quot;Repeat! 1/1&quot;</span>, testInfo.getDisplayName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RepeatedTest(value = 1, name = RepeatedTest.LONG_DISPLAY_NAME)</span></span><br><span class="line">    <span class="meta">@DisplayName(&quot;Details...&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">customDisplayNameWithLongPattern</span><span class="params">(TestInfo testInfo)</span> &#123;</span><br><span class="line">        assertEquals(<span class="string">&quot;Details... :: repetition 1 of 1&quot;</span>, testInfo.getDisplayName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RepeatedTest(value = 5, name = &quot;luis &#123;currentRepetition&#125; von &#123;totalRepetitions&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">repeatedTestInGerman</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>除了指定重复次数外，还可以通过 注释的<code>name</code>属性为每次重复配置自定义显示名称。<code>@RepeatedTest</code><br>此外，显示名称可以是由静态文本和动态占位符组合而成的模式。当前支持以下占位符。</p><ul><li><code>&#123;displayName&#125;``@RepeatedTest</code>:方法的显示名称</li><li><code>&#123;currentRepetition&#125;</code>: 当前重复次数</li><li><code>&#123;totalRepetitions&#125;</code>：总重复次数</li></ul><p>给定重复的默认显示名称是根据以下模式生成的：<code>&quot;repetition &#123;currentRepetition&#125; of &#123;totalRepetitions&#125;&quot;</code>.<br>因此，上一个示例的单个重复的显示名称<code>repeatedTest()</code>将是： <code>repetition 1 of 10</code>、<code>repetition 2 of 10</code><br>等。如果您希望<code>@RepeatedTest</code><br>方法的显示名称包含在每个重复的名称中，您可以定义自己的自定义模式或使用预定义<code>RepeatedTest.LONG_DISPLAY_NAME</code><br>模式。后者等于<code>&quot;&#123;displayName&#125; :: repetition &#123;currentRepetition&#125; of &#123;totalRepetitions&#125;&quot;</code><br>这会导致单个重复项的显示名称，例如 <code>repeatedTest() :: repetition 1 of 10</code>,<code>repeatedTest() :: repetition 2 of 10</code>等。</p><p>为了以编程方式检索有关当前重复和重复总数的信息，开发人员可以选择将实例 <code>RepetitionInfo</code><br>注入到<code>@RepeatedTest</code>、<code>@BeforeEach</code>或<code>@AfterEach</code>方法中。</p><hr><h2 id="参数化测试"><a href="#参数化测试" class="headerlink" title="参数化测试"></a>参数化测试</h2><p>参数化测试可以使用不同的参数多次运行测试。它们的声明方式与常规<code>@Test</code>方法一样，但使用 <code>@ParameterizedTest</code><br>注解代替。此外，您必须至少声明一个 <em>源</em>，该源将为每次调用提供参数，然后在测试方法中<em>使用这些参数。</em></p><p>为了使用参数化测试，您需要添加对 <code>junit-jupiter-params</code><br>工件的依赖。详情请参考<a href="https://junit.org/junit5/docs/current/user-guide/#dependency-metadata">依赖元</a>数据。</p><p>以下示例演示了一个参数化测试，该测试使用<code>@ValueSource</code> 注释将<code>String</code>数组指定为参数源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">T8_ParameterizedTestDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@ValueSource(strings = &#123;&quot;racecar&quot;, &quot;radar&quot;, &quot;able was I ere I saw elba&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">length</span><span class="params">(String candidate)</span> &#123;</span><br><span class="line">        assertTrue(candidate.length() &gt; <span class="number">6</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@ValueSource(ints = &#123;1, 2, 3&#125;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testWithValueSource</span><span class="params">(<span class="type">int</span> argument)</span> &#123;</span><br><span class="line">        assertTrue(argument &gt; <span class="number">0</span> &amp;&amp; argument &lt; <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="空源和空源"><a href="#空源和空源" class="headerlink" title="空源和空源"></a>空源和空源</h3><p>为了检查极端情况并验证我们的软件在提供<em>错误输入时的正确行为，将**空</em>值提供给我们的参数化测试<code>null</code><br>可能很有用。以下注释用作接受单个参数的参数化测试的来源和空值。<code>null</code></p><ul><li><code>@NullSource``null</code>: 为带注释的<code>@ParameterizedTest</code> 方法提供单个参数。<ul><li><code>@NullSource</code>不能用于具有原始类型的参数。</li></ul></li><li><code>@EmptySource</code>: 为以下类型的参数的注释 方法提供单个<em>空</em>参数： , , , ,<br>原始数组（例如，,等），对象数组（例如，,等）。<code>@ParameterizedTest``java.lang.String``java.util.List``java.util.Set``java.util.Map``int[]``char[][]``String[]``Integer[][]</code><ul><li>不支持受支持类型的子类型。</li></ul></li><li><code>@NullAndEmptySource</code>:<em>组合注释</em>，结合了 <code>@NullSource</code>和的功能<code>@EmptySource</code>。</li></ul><p>如果您需要为参数化测试提供多种不同类型的<em>空白</em><br>字符串，您可以使用<a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests-sources-ValueSource">@ValueSource</a><br>来实现 ——例如，<code>@ValueSource(strings = &#123;&quot; &quot;, &quot;  &quot;, &quot;\t&quot;, &quot;\n&quot;&#125;)</code>.</p><p>您还可以组合<code>@NullSource</code>、<code>@EmptySource</code>和<code>@ValueSource</code>来测试更广泛的<code>null</code>、<em>empty</em>和<em>blank</em>输入。以下示例演示了如何为字符串实现此目的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">T8_ParameterizedTestDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@NullSource</span></span><br><span class="line">    <span class="meta">@EmptySource</span></span><br><span class="line">    <span class="meta">@ValueSource(strings = &#123;&quot; &quot;, &quot;   &quot;, &quot;\t&quot;, &quot;\n&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">nullEmptyAndBlankStrings</span><span class="params">(String text)</span> &#123;</span><br><span class="line">        assertTrue(text == <span class="literal">null</span> || text.trim().isEmpty());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数化测试方法的两种变体都会<code>nullEmptyAndBlankStrings(String)</code>导致 6 次调用：1 次用于<code>null</code>，1 次用于空字符串，4 次用于通过<br>提供的显式空白字符串<code>@ValueSource</code>。</p><h3 id="枚举源"><a href="#枚举源" class="headerlink" title="枚举源"></a>枚举源</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.junit5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.ParameterizedTest;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.provider.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.temporal.ChronoUnit;</span><br><span class="line"><span class="keyword">import</span> java.time.temporal.TemporalUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.EnumSet;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.params.provider.Arguments.arguments;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T8_ParameterizedTestDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ----------------------枚举源------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@EnumSource(ChronoUnit.class)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testWithEnumSource</span><span class="params">(TemporalUnit unit)</span> &#123;</span><br><span class="line">        assertNotNull(unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@EnumSource</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testWithEnumSourceWithAutoDetection</span><span class="params">(ChronoUnit unit)</span> &#123;</span><br><span class="line">        assertNotNull(unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@EnumSource(names = &#123;&quot;DAYS&quot;, &quot;HOURS&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testWithEnumSourceInclude</span><span class="params">(ChronoUnit unit)</span> &#123;</span><br><span class="line">        assertTrue(EnumSet.of(ChronoUnit.DAYS, ChronoUnit.HOURS).contains(unit));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该<span class="doctag">@EnumSource</span>注解还提供了一个可选mode属性，可以对哪些常量传递给测试方法进行细粒度控制。</span></span><br><span class="line"><span class="comment">     * 例如，您可以从枚举常量池中排除名称或指定正则表达式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@EnumSource(mode = EnumSource.Mode.EXCLUDE, names = &#123;&quot;ERAS&quot;, &quot;FOREVER&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testWithEnumSourceExclude</span><span class="params">(ChronoUnit unit)</span> &#123;</span><br><span class="line">        assertFalse(EnumSet.of(ChronoUnit.ERAS, ChronoUnit.FOREVER).contains(unit));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@EnumSource(mode = EnumSource.Mode.MATCH_ALL, names = &quot;^.*DAYS$&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testWithEnumSourceRegex</span><span class="params">(ChronoUnit unit)</span> &#123;</span><br><span class="line">        assertTrue(unit.name().endsWith(<span class="string">&quot;DAYS&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法源"><a href="#方法源" class="headerlink" title="方法源"></a>方法源</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">T8_ParameterizedTestDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ----------------------方法源------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@MethodSource(&quot;stringProvider&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testWithExplicitLocalMethodSource</span><span class="params">(String argument)</span> &#123;</span><br><span class="line">        assertNotNull(argument);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Stream&lt;String&gt; <span class="title function_">stringProvider</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@MethodSource</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testWithDefaultLocalMethodSource</span><span class="params">(String argument)</span> &#123;</span><br><span class="line">        assertNotNull(argument);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Stream&lt;String&gt; <span class="title function_">testWithDefaultLocalMethodSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@MethodSource(&quot;range&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testWithRangeMethodSource</span><span class="params">(<span class="type">int</span> argument)</span> &#123;</span><br><span class="line">        assertNotEquals(<span class="number">9</span>, argument);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> IntStream <span class="title function_">range</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> IntStream.range(<span class="number">0</span>, <span class="number">20</span>).skip(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@MethodSource(&quot;stringIntAndListProvider&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testWithMultiArgMethodSource</span><span class="params">(String str, <span class="type">int</span> num, List&lt;String&gt; list)</span> &#123;</span><br><span class="line">        assertEquals(<span class="number">5</span>, str.length());</span><br><span class="line">        assertTrue(num &gt;= <span class="number">1</span> &amp;&amp; num &lt;= <span class="number">2</span>);</span><br><span class="line">        assertEquals(<span class="number">2</span>, list.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Stream&lt;Arguments&gt; <span class="title function_">stringIntAndListProvider</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(</span><br><span class="line">                arguments(<span class="string">&quot;apple&quot;</span>, <span class="number">1</span>, Arrays.asList(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>)),</span><br><span class="line">                arguments(<span class="string">&quot;lemon&quot;</span>, <span class="number">2</span>, Arrays.asList(<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>))</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过提供<em>完全限定的方法名称</em>来引用外部<code>static</code> <em>工厂</em>方法，如以下示例所示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.junit5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.ParameterizedTest;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.params.provider.MethodSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ExternalMethodSourceDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ParameterizedTest</span></span><br><span class="line">    <span class="meta">@MethodSource(&quot;cn.luis.junit5.StringsProviders#tinyStrings&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testWithExternalMethodSource</span><span class="params">(String tinyString)</span> &#123;</span><br><span class="line">        <span class="comment">// test with tiny string</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StringsProviders</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> Stream&lt;String&gt; <span class="title function_">tinyStrings</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Stream.of(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;oo&quot;</span>, <span class="string">&quot;OOO&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方法源参考：<a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests-sources-MethodSource">https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests-sources-MethodSource</a></p></blockquote><hr><h2 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h2><p><code>@Timeout</code>注释允许人们声明如果测试、测试工厂、测试模板或生命周期方法的执行时间超过给定的持续时间，则该方法应该失败。持续时间的时间单位默认为秒，但可以配置。</p><p>以下示例显示如何<code>@Timeout</code>应用于生命周期和测试方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.junit5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Timeout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TimeoutDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="meta">@Timeout(5)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// fails if execution time exceeds 5 seconds</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Timeout(value = 500, unit = TimeUnit.MILLISECONDS)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">failsIfExecutionTimeExceeds500Milliseconds</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// fails if execution time exceeds 500 milliseconds</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果您需要更好地控制轮询间隔并通过异步测试获得更大的灵活性，请考虑使用专用库，例如 Awaitility。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Timeout(5)</span></span><br><span class="line">    <span class="comment">// Poll at most 5 seconds</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">pollUntil</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">mockResultTemp</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (mockResultTemp) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">250</span>); <span class="comment">// 自定义轮询间隔</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取异步结果并执行断言</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="动态测试"><a href="#动态测试" class="headerlink" title="动态测试"></a>动态测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.junit5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.luis.domain.Calculator;</span><br><span class="line"><span class="keyword">import</span> cn.luis.domain.Person;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DynamicNode;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DynamicTest;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.TestFactory;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.function.ThrowingConsumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.IntStream;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Stream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.DynamicContainer.dynamicContainer;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.DynamicTest.dynamicTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">T9_DynamicTestsDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Calculator</span> <span class="variable">calculator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jane&quot;</span>, <span class="string">&quot;Doe&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// This will result in a JUnitException!</span></span><br><span class="line">  <span class="meta">@TestFactory</span></span><br><span class="line">  List&lt;String&gt; <span class="title function_">dynamicTestsWithInvalidReturnType</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.asList(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@TestFactory</span></span><br><span class="line">  Collection&lt;DynamicTest&gt; <span class="title function_">dynamicTestsFromCollection</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.asList(</span><br><span class="line">            dynamicTest(<span class="string">&quot;1st dynamic test&quot;</span>, () -&gt; assertTrue(<span class="string">&quot;Jane&quot;</span>.equals(person.getFirstName()))),</span><br><span class="line">            dynamicTest(<span class="string">&quot;2nd dynamic test&quot;</span>, () -&gt; assertEquals(<span class="number">4</span>, calculator.multiply(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@TestFactory</span></span><br><span class="line">  Iterable&lt;DynamicTest&gt; <span class="title function_">dynamicTestsFromIterable</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.asList(</span><br><span class="line">            dynamicTest(<span class="string">&quot;3rd dynamic test&quot;</span>, () -&gt; assertTrue(<span class="string">&quot;Jane&quot;</span>.equals(person.getFirstName()))),</span><br><span class="line">            dynamicTest(<span class="string">&quot;4th dynamic test&quot;</span>, () -&gt; assertEquals(<span class="number">4</span>, calculator.multiply(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@TestFactory</span></span><br><span class="line">  Iterator&lt;DynamicTest&gt; <span class="title function_">dynamicTestsFromIterator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Arrays.asList(</span><br><span class="line">            dynamicTest(<span class="string">&quot;5th dynamic test&quot;</span>, () -&gt; assertTrue(<span class="string">&quot;Jane&quot;</span>.equals(person.getFirstName()))),</span><br><span class="line">            dynamicTest(<span class="string">&quot;6th dynamic test&quot;</span>, () -&gt; assertEquals(<span class="number">4</span>, calculator.multiply(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line">    ).iterator();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@TestFactory</span></span><br><span class="line">  DynamicTest[] dynamicTestsFromArray() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DynamicTest</span>[]&#123;</span><br><span class="line">            dynamicTest(<span class="string">&quot;7th dynamic test&quot;</span>, () -&gt; assertTrue(<span class="string">&quot;Jane&quot;</span>.equals(person.getFirstName()))),</span><br><span class="line">            dynamicTest(<span class="string">&quot;8th dynamic test&quot;</span>, () -&gt; assertEquals(<span class="number">4</span>, calculator.multiply(<span class="number">2</span>, <span class="number">2</span>)))</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@TestFactory</span></span><br><span class="line">  Stream&lt;DynamicTest&gt; <span class="title function_">dynamicTestsFromStream</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Stream.of(<span class="string">&quot;racecar&quot;</span>, <span class="string">&quot;radar&quot;</span>, <span class="string">&quot;mom&quot;</span>, <span class="string">&quot;dad&quot;</span>)</span><br><span class="line">            .map(text -&gt; dynamicTest(text, () -&gt; assertTrue(text.length() &gt; <span class="number">5</span>)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@TestFactory</span></span><br><span class="line">  Stream&lt;DynamicTest&gt; <span class="title function_">dynamicTestsFromIntStream</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// Generates tests for the first 10 even integers.</span></span><br><span class="line">    <span class="keyword">return</span> IntStream.iterate(<span class="number">0</span>, n -&gt; n + <span class="number">2</span>).limit(<span class="number">10</span>)</span><br><span class="line">            .mapToObj(n -&gt; dynamicTest(<span class="string">&quot;test&quot;</span> + n, () -&gt; assertTrue(n % <span class="number">2</span> == <span class="number">0</span>)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@TestFactory</span></span><br><span class="line">  Stream&lt;DynamicTest&gt; <span class="title function_">generateRandomNumberOfTestsFromIterator</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generates random positive integers between 0 and 100 until</span></span><br><span class="line">    <span class="comment">// a number evenly divisible by 7 is encountered.</span></span><br><span class="line">    Iterator&lt;Integer&gt; inputGenerator = <span class="keyword">new</span> <span class="title class_">Iterator</span>&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">      <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">      <span class="type">int</span> current;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        current = random.nextInt(<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span> current % <span class="number">7</span> != <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="keyword">public</span> Integer <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> current;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Generates display names like: input:5, input:37, input:85, etc.</span></span><br><span class="line">    Function&lt;Integer, String&gt; displayNameGenerator = (input) -&gt; <span class="string">&quot;input:&quot;</span> + input;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Executes tests based on the current input value.</span></span><br><span class="line">    ThrowingConsumer&lt;Integer&gt; testExecutor = (input) -&gt; assertTrue(input % <span class="number">7</span> != <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Returns a stream of dynamic tests.</span></span><br><span class="line">    <span class="keyword">return</span> DynamicTest.stream(inputGenerator, displayNameGenerator, testExecutor);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@TestFactory</span></span><br><span class="line">  Stream&lt;DynamicNode&gt; <span class="title function_">dynamicTestsWithContainers</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Stream.of(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>)</span><br><span class="line">            .map(input -&gt; dynamicContainer(<span class="string">&quot;Container &quot;</span> + input, Stream.of(</span><br><span class="line">                    dynamicTest(<span class="string">&quot;not null&quot;</span>, () -&gt; assertNotNull(input)),</span><br><span class="line">                    dynamicContainer(<span class="string">&quot;properties&quot;</span>, Stream.of(</span><br><span class="line">                            dynamicTest(<span class="string">&quot;length &gt; 0&quot;</span>, () -&gt; assertTrue(input.length() &gt; <span class="number">0</span>)),</span><br><span class="line">                            dynamicTest(<span class="string">&quot;not empty&quot;</span>, () -&gt; assertFalse(input.isEmpty()))</span><br><span class="line">                    ))</span><br><span class="line">            )));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@TestFactory</span></span><br><span class="line">  DynamicNode <span class="title function_">dynamicNodeSingleTest</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> dynamicTest(<span class="string">&quot;name check&quot;</span>, () -&gt; assertTrue(<span class="string">&quot;Jane&quot;</span>.equals(person.getFirstName())));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@TestFactory</span></span><br><span class="line">  DynamicNode <span class="title function_">dynamicNodeSingleContainer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> dynamicContainer(<span class="string">&quot;name check&quot;</span>,</span><br><span class="line">            Stream.of(<span class="string">&quot;racecar&quot;</span>, <span class="string">&quot;radar&quot;</span>, <span class="string">&quot;mom&quot;</span>, <span class="string">&quot;dad&quot;</span>)</span><br><span class="line">                    .map(text -&gt; dynamicTest(text, () -&gt; assertTrue(<span class="string">&quot;Jane&quot;</span>.equals(person.getFirstName())))</span><br><span class="line">                    ));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-dynamic-tests"> 动态测试</a></p></blockquote><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>请参阅官方文档</p><ul><li><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-conditional-execution">条件测试执行</a></li><li><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-execution-order">测试执行顺序</a></li><li><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-dependency-injection">构造函数和方法的依赖注册</a></li><li><a href="https://junit.org/junit5/docs/current/user-guide/#writing-tests-test-interfaces-and-default-methods">测试接口和默认方法</a></li></ul><h1 id="Mockito3"><a href="#Mockito3" class="headerlink" title="Mockito3"></a>Mockito3</h1><h2 id="基础教程"><a href="#基础教程" class="headerlink" title="基础教程"></a>基础教程</h2><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MockitoTest</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//mock creation</span></span><br><span class="line">        List&lt;String&gt; mockedList = mock(List.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//using mock object</span></span><br><span class="line">        mockedList.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">        mockedList.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//verification</span></span><br><span class="line">        <span class="comment">// 创建后，模拟将记住所有交互。然后您可以有选择地验证您感兴趣的任何交互。</span></span><br><span class="line">        verify(mockedList).add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">        verify(mockedList).clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="存根"><a href="#存根" class="headerlink" title="存根"></a><a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Mockito.html#stubbing">存根</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MockitoTest</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//You can mock concrete classes, not just interfaces</span></span><br><span class="line">        LinkedList&lt;String&gt; mockedList = mock(LinkedList.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//stubbing</span></span><br><span class="line">        when(mockedList.get(<span class="number">0</span>)).thenReturn(<span class="string">&quot;first&quot;</span>);</span><br><span class="line">        when(mockedList.get(<span class="number">1</span>)).thenThrow(<span class="keyword">new</span> <span class="title class_">RuntimeException</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// following prints &quot;first&quot;</span></span><br><span class="line">        System.out.println(mockedList.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// following throws runtime exception</span></span><br><span class="line">        assertThrows(RuntimeException.class, () -&gt; mockedList.get(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// null</span></span><br><span class="line">        assertNull(mockedList.get(<span class="number">999</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 虽然可以验证存根调用，但通常它只是多余的</span></span><br><span class="line">        <span class="comment">// 如果你的代码关心 get（0） 返回什么，那么其他东西就会中断（通常甚至在 verify（） 被执行之前）。</span></span><br><span class="line">        <span class="comment">// 如果你的代码不关心 get（0） 返回什么，那么它不应该被存根。</span></span><br><span class="line">        verify(mockedList).get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>默认情况下，对于所有返回值的方法，mock 将根据需要返回 null、原始&#x2F;原始包装器值或空集合。例如 0 表示 int&#x2F;Integer，false 表示 boolean&#x2F;Boolean。</li><li>存根可以被覆盖：例如，普通存根可以进入夹具设置，但测试方法可以覆盖它。请注意，覆盖存根是一种潜在的代码味道，它指出存根过多</li><li>一旦存根，该方法将始终返回一个存根值，无论它被调用多少次。</li><li>最后存根更重要 - 当您多次使用相同的参数存入相同的方法时。换句话说：<strong>存根的顺序很重要</strong>，但它很少有意义，例如，当存根完全相同的方法调用时，或者有时在使用参数匹配器时，等等。</li></ul><h3 id="参数匹配器"><a href="#参数匹配器" class="headerlink" title="参数匹配器"></a><a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Mockito.html#argument_matchers">参数匹配器</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MockitoTest</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">parameterMatcher</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;String&gt; mockedList = mock(List.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//stubbing using built-in anyInt() argument matcher</span></span><br><span class="line">        when(mockedList.get(anyInt())).thenReturn(<span class="string">&quot;element&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 也可使用自定义匹配器进行存根</span></span><br><span class="line">        <span class="comment">// when(mockedList.contains(argThat(isValid()))).thenReturn(true);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// following  &quot;element&quot;</span></span><br><span class="line">        assertEquals(<span class="string">&quot;element&quot;</span>, mockedList.get(<span class="number">999</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//you can also verify using an argument matcher</span></span><br><span class="line">        verify(mockedList).get(anyInt());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//argument matchers can also be written as Java 8 Lambdas</span></span><br><span class="line">        verify(mockedList).add(argThat(someString -&gt; someString.length() &gt; <span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数匹配器允许灵活的验证或存根。 查看更多内置匹配器和<strong>自定义参数匹配器&#x2F;hamcrest 匹配器</strong>示例。 <a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/ArgumentMatchers.html"><code>Click here</code></a> <a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/hamcrest/MockitoHamcrest.html"><code>or here</code></a></p><p>有关<strong>自定义参数匹配器</strong>的信息，请查看<a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/ArgumentMatcher.html"><code>ArgumentMatcher</code></a>类的 javadoc。</p><p>合理使用复杂的参数匹配。<code>equals()</code>与偶尔的匹配器一起使用的自然匹配风格<code>anyX()</code>往往会提供干净简单的测试。有时重构代码以允许<code>equals()</code>匹配甚至实现<code>equals()</code>方法来帮助测试会更好。</p><p>另外，阅读<a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Mockito.html#15">第 15 节</a>或类的 javadoc <a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/ArgumentCaptor.html"><code>ArgumentCaptor</code></a>。 <a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/ArgumentCaptor.html"><code>ArgumentCaptor</code></a>是参数匹配器的特殊实现，它捕获参数值以供进一步断言。</p><p><strong>关于参数匹配器的警告：</strong></p><p>如果您使用参数匹配器，则<strong>所有参数</strong>都必须由匹配器提供。</p><h3 id="验证确切的调用次数-x2F-至少x次-x2F-从不"><a href="#验证确切的调用次数-x2F-至少x次-x2F-从不" class="headerlink" title="验证确切的调用次数&#x2F; 至少x次&#x2F;从不"></a><a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Mockito.html#exact_verification">验证确切的调用次数</a>&#x2F; <a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Mockito.html#at_least_verification">至少x</a>次&#x2F;从不</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MockitoTest</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">runTimes</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;String&gt; mockedList = mock(List.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用mock</span></span><br><span class="line">        mockedList.add(<span class="string">&quot;once&quot;</span>);</span><br><span class="line"></span><br><span class="line">        mockedList.add(<span class="string">&quot;twice&quot;</span>);</span><br><span class="line">        mockedList.add(<span class="string">&quot;twice&quot;</span>);</span><br><span class="line"></span><br><span class="line">        mockedList.add(<span class="string">&quot;three times&quot;</span>);</span><br><span class="line">        mockedList.add(<span class="string">&quot;three times&quot;</span>);</span><br><span class="line">        mockedList.add(<span class="string">&quot;three times&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面两个验证是等同的 - 默认使用times(1)</span></span><br><span class="line">        verify(mockedList).add(<span class="string">&quot;once&quot;</span>);</span><br><span class="line">        verify(mockedList, times(<span class="number">1</span>)).add(<span class="string">&quot;once&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证精确调用次数</span></span><br><span class="line">        verify(mockedList, times(<span class="number">2</span>)).add(<span class="string">&quot;twice&quot;</span>);</span><br><span class="line">        verify(mockedList, times(<span class="number">3</span>)).add(<span class="string">&quot;three times&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用using never()来验证. never()相当于 times(0)</span></span><br><span class="line">        verify(mockedList, never()).add(<span class="string">&quot;never happened&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用 atLeast()/atMost()来验证</span></span><br><span class="line">        verify(mockedList, atLeastOnce()).add(<span class="string">&quot;three times&quot;</span>);</span><br><span class="line">        verify(mockedList, atLeast(<span class="number">2</span>)).add(<span class="string">&quot;five times&quot;</span>);</span><br><span class="line">        verify(mockedList, atMost(<span class="number">5</span>)).add(<span class="string">&quot;three times&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>times(1) 是默认值。</strong>因此可以省略显式使用 times(1) 。</p><h3 id="对-void-方法进行异常处理"><a href="#对-void-方法进行异常处理" class="headerlink" title="对 void 方法进行异常处理"></a><a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Mockito.html#stubbing_with_exceptions">对 void 方法进行异常处理</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MockitoTest</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">exception</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;String&gt; mockedList = mock(List.class);</span><br><span class="line"></span><br><span class="line">        doThrow(<span class="keyword">new</span> <span class="title class_">RuntimeException</span>()).when(mockedList).clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面会抛出 RuntimeException</span></span><br><span class="line">        mockedList.clear();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顺序验证"><a href="#顺序验证" class="headerlink" title="顺序验证"></a><a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Mockito.html#in_order_verification">顺序验证</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MockitoTest</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">order</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// A. 单个Mock，方法必须以特定顺序调用</span></span><br><span class="line">        List&lt;String&gt; singleMock = mock(List.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用单个Mock</span></span><br><span class="line">        singleMock.add(<span class="string">&quot;was added first&quot;</span>);</span><br><span class="line">        singleMock.add(<span class="string">&quot;was added second&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//为singleMock创建 inOrder 检验器</span></span><br><span class="line">        <span class="type">InOrder</span> <span class="variable">singleInOrder</span> <span class="operator">=</span> inOrder(singleMock);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面将确保add方法第一次调用是用&quot;was added first&quot;,然后是用&quot;was added second&quot;</span></span><br><span class="line">        singleInOrder.verify(singleMock).add(<span class="string">&quot;was added first&quot;</span>);</span><br><span class="line">        singleInOrder.verify(singleMock).add(<span class="string">&quot;was added second&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// B. 多个Mock必须以特定顺序调用</span></span><br><span class="line">        List&lt;String&gt; firstMock = mock(List.class);</span><br><span class="line">        List&lt;String&gt; secondMock = mock(List.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用mock</span></span><br><span class="line">        firstMock.add(<span class="string">&quot;was called first&quot;</span>);</span><br><span class="line">        secondMock.add(<span class="string">&quot;was called second&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建 inOrder 对象，传递任意多个需要验证顺序的mock</span></span><br><span class="line">        <span class="type">InOrder</span> <span class="variable">inOrder</span> <span class="operator">=</span> inOrder(firstMock, secondMock);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面将确保firstMock在secondMock之前调用</span></span><br><span class="line">        inOrder.verify(firstMock).add(<span class="string">&quot;was called first&quot;</span>);</span><br><span class="line">        inOrder.verify(secondMock).add(<span class="string">&quot;was called second&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 另外 A + B 可以任意混合</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="确保交互从未在模拟中发生"><a href="#确保交互从未在模拟中发生" class="headerlink" title="确保交互从未在模拟中发生"></a><a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Mockito.html#never_verification">确保交互从未在模拟中发生</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MockitoTest</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">verifyNever</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;String&gt; mockOne = mock(List.class);</span><br><span class="line">        List&lt;String&gt; mockTwo = mock(List.class);</span><br><span class="line">        List&lt;String&gt; mockThree = mock(List.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用mock - 仅有mockOne有交互</span></span><br><span class="line">        mockOne.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 普通验证</span></span><br><span class="line">        verify(mockOne).add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证方法从未在mock对象上调用</span></span><br><span class="line">        verify(mockOne, never()).add(<span class="string">&quot;two&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 验证其他mock没有交互</span></span><br><span class="line">        verifyZeroInteractions(mockTwo, mockThree);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">verifyNo</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;String&gt; mockedList = mock(List.class);</span><br><span class="line"><span class="comment">// 确保本身没有交互</span></span><br><span class="line">        verifyNoInteractions(mockedList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找冗余调用"><a href="#查找冗余调用" class="headerlink" title="查找冗余调用"></a><a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Mockito.html#finding_redundant_invocations">查找冗余调用</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MockitoTest</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">verifyMore</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;String&gt; mockedList = mock(List.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用mock</span></span><br><span class="line">        mockedList.add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line">        mockedList.add(<span class="string">&quot;two&quot;</span>);</span><br><span class="line"></span><br><span class="line">        verify(mockedList).add(<span class="string">&quot;one&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面的验证将会失败，因为未校验mockedList.add(&quot;two&quot;)操作</span></span><br><span class="line">        verifyNoMoreInteractions(mockedList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mocks创建的速记——-Mock注解"><a href="#mocks创建的速记——-Mock注解" class="headerlink" title="mocks创建的速记——@Mock注解"></a><a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Mockito.html#mock_annotation">mocks创建的速记——<code>@Mock</code>注解</a></h3><ul><li>最大限度地减少重复的模拟创建代码。</li><li>使测试类更具可读性。</li><li>使验证错误更易于阅读，因为<strong>字段名称</strong> 用于标识模拟。</li></ul><p>注意：</p><p>这需要在基类或测试运行器中的某个地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MockitoAnnotations.initMocks(testClass);</span><br></pre></td></tr></table></figure><h3 id="连续调用存根（迭代器式存根）"><a href="#连续调用存根（迭代器式存根）" class="headerlink" title="连续调用存根（迭代器式存根）"></a><a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Mockito.html#stubbing_consecutive_calls">连续调用存根</a>（迭代器式存根）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MockitoTest</span> &#123;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">mockThen</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">mockPerson</span> <span class="operator">=</span> mock(Person.class);</span><br><span class="line">        when(mockPerson.fullName())</span><br><span class="line">                .thenThrow(<span class="keyword">new</span> <span class="title class_">RuntimeException</span>())</span><br><span class="line">                .thenReturn(<span class="string">&quot;z3&quot;</span>, <span class="string">&quot;l4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        assertThrows(RuntimeException.class, () -&gt; mockPerson.fullName());</span><br><span class="line">        assertEquals(<span class="string">&quot;z3&quot;</span>, mockPerson.fullName());</span><br><span class="line">        assertEquals(<span class="string">&quot;l4&quot;</span>, mockPerson.fullName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="回调存根"><a href="#回调存根" class="headerlink" title="回调存根"></a><a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Mockito.html#answer_stubs">回调存根</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MockitoTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">mockAnswer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">mockPerson</span> <span class="operator">=</span> mock(Person.class);</span><br><span class="line"></span><br><span class="line">        when(mockPerson.repeatWords(anyString())).thenAnswer(invocation -&gt; &#123;</span><br><span class="line">            Object[] args = invocation.getArguments();</span><br><span class="line">            <span class="type">Object</span> <span class="variable">mock</span> <span class="operator">=</span> invocation.getMock();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;called with arguments: &quot;</span> + Arrays.toString(args);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面会 &quot;called with arguments: foo&quot;</span></span><br><span class="line">        System.out.println(mockPerson.repeatWords(<span class="string">&quot;hello&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="doReturn-doThrow-doAnswer-doNothing-doCallRealMethod-方法族"><a href="#doReturn-doThrow-doAnswer-doNothing-doCallRealMethod-方法族" class="headerlink" title="doReturn()| doThrow()| doAnswer()| doNothing()| doCallRealMethod()方法族"></a><a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Mockito.html#do_family_methods_stubs"><code>doReturn()</code>| <code>doThrow()</code>| <code>doAnswer()</code>| <code>doNothing()</code>| <code>doCallRealMethod()</code>方法族</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MockitoTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">mockDo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">mockPerson</span> <span class="operator">=</span> mock(Person.class);</span><br><span class="line">        doThrow(<span class="keyword">new</span> <span class="title class_">RuntimeException</span>()).when(mockPerson).say();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//following throws RuntimeException</span></span><br><span class="line">        mockPerson.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于任何方法，您 都可以使用<code>doThrow()</code>、<code>doAnswer()</code>、 和来代替相应的调用。这是必要的当你 <code>doNothing()``doReturn()``doCallRealMethod()``when()</code></p><ul><li>存根无效方法</li><li>间谍对象的存根方法（见下文）</li><li>多次对同一个方法进行存根，以在测试过程中更改模拟的行为。</li></ul><p><code>when()</code>但是对于所有存根调用， 您可能更愿意使用这些方法来代替 with 的替代方法。</p><h3 id="监视真实物体"><a href="#监视真实物体" class="headerlink" title="监视真实物体"></a><a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Mockito.html#spy">监视真实物体</a></h3><p>您可以创建真实对象的间谍。当您使用间谍时，将调用<strong>真正</strong>的方法（除非方法被存根）。</p><p>应<strong>谨慎且偶尔</strong>使用真正的间谍，例如在处理<strong>第 3 方接口、遗留代码的临时重构</strong>时。</p><p>监视真实对象可以与“部分模拟”概念相关联。 <strong>在发布 1.8 之前</strong>，Mockito 间谍并不是真正的部分模拟。原因是我们认为部分模拟是一种代码味道。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MockitoTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">mockSpy</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        List&lt;String&gt; spy = spy(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 不可能: 真实方法被调用因此spy.get(0) 会抛出IndexOutOfBoundsException (列表现在还是空的)</span></span><br><span class="line">        when(spy.get(<span class="number">0</span>)).thenReturn(<span class="string">&quot;dalian&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以使用 doReturn() 来做存根</span></span><br><span class="line">        doReturn(<span class="string">&quot;dalian&quot;</span>).when(spy).get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><ol><li>Mockito <em><strong>不*<strong>将调用委托给传递的真实实例，而是实际创建它的副本。因此，如果您保留真实实例并与之交互，不要期望间谍知道这些交互及其对真实实例状态的影响。推论是，当一个</strong>*unstubbed**<em>方法被调用</em></strong>在间谍*<strong>但</strong></em>不在真实实例* 上**时，您将看不到对真实实例的任何影响。</li><li>注意 final 方法。Mockito 不会模拟 final 方法，所以底线是：当你监视真实对象时 + 你试图存根 final 方法 &#x3D; 麻烦。此外，您也无法验证这些方法。</li></ol><h3 id="捕获进一步断言的参数（自-1-8-0-起）"><a href="#捕获进一步断言的参数（自-1-8-0-起）" class="headerlink" title="捕获进一步断言的参数（自 1.8.0 起）"></a><a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Mockito.html#captors">捕获</a>进一步断言的参数（自 1.8.0 起）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MockitoTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">mockArguments</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">mockPerson</span> <span class="operator">=</span> mock(Person.class);</span><br><span class="line"></span><br><span class="line">        mockPerson.increase(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        ArgumentCaptor&lt;Integer&gt; argument = ArgumentCaptor.forClass(Integer.class);</span><br><span class="line">        <span class="comment">// argument.capture() 此处默认值 0</span></span><br><span class="line">        verify(mockPerson).increase(argument.capture());</span><br><span class="line"></span><br><span class="line">        assertEquals(<span class="number">1</span>, argument.getValue().intValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>警告：</strong>建议将 ArgumentCaptor 与验证一起使用，<strong>但不要</strong>与存根一起使用。将 ArgumentCaptor 与存根一起使用可能会降低测试的可读性，因为捕获器是在断言（又名验证或“然后”）块之外创建的。它还可以减少缺陷定位，因为如果未调用存根方法，则不会捕获任何参数。</p><p>在某种程度上，ArgumentCaptor 与自定义参数匹配器相关（参见<a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/ArgumentMatcher.html"><code>ArgumentMatcher</code></a>类的 javadoc）。这两种技术都可用于确保将某些参数传递给模拟。但是，如果出现以下情况，ArgumentCaptor 可能更适合：</p><ul><li>自定义参数匹配器不太可能被重用</li><li>您只需要它断言参数值即可完成验证</li></ul><p>自定义参数匹配器 via<a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/ArgumentMatcher.html"><code>ArgumentMatcher</code></a>通常更适合存根。</p><h3 id="新注释：-Captor-Spy-InjectMocks-Since-1-8-3"><a href="#新注释：-Captor-Spy-InjectMocks-Since-1-8-3" class="headerlink" title="新注释：@Captor, @Spy, @InjectMocks(Since 1.8.3)"></a>新注释：<a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Mockito.html#captor_annotation"><code>@Captor</code></a>, <a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Mockito.html#spy_annotation"><code>@Spy</code></a>, <a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Mockito.html#injectmocks_annotation"><code>@InjectMocks</code></a>(Since 1.8.3)</h3><p>1.8.3 版带来了新的注解，有时可能会有帮助：</p><ul><li>@<a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Captor.html"><code>Captor</code></a>简化创建<a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/ArgumentCaptor.html"><code>ArgumentCaptor</code></a> - 当要捕获的参数是一个讨厌的泛型类并且您想避免编译器警告时很有用</li><li>@ <a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Spy.html"><code>Spy</code></a>-您可以改用它<a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Mockito.html#spy-T-"><code>spy(Object)</code></a>。</li><li>@ <a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/InjectMocks.html"><code>InjectMocks</code></a>- 自动将模拟或间谍字段注入测试对象。</li></ul><p>注意 @<a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/InjectMocks.html"><code>InjectMocks</code></a>也可以与 @<a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Spy.html"><code>Spy</code></a>注解结合使用，这意味着 Mockito 将注入 mocks 到被测的部分 mock 中。这种复杂性是您应该只使用部分模拟作为最后手段的另一个很好的理由。参见关于部分模拟的第 16 点。</p><p>所有新注释都***仅***在 上处理<a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/MockitoAnnotations.html#initMocks-java.lang.Object-"><code>MockitoAnnotations.initMocks(Object)</code></a>。就像 @<a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Mock.html"><code>Mock</code></a>注解一样，您可以使用内置的 runner:<a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/junit/MockitoJUnitRunner.html"><code>MockitoJUnitRunner</code></a>或 rule: <a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/junit/MockitoRule.html"><code>MockitoRule</code></a>。</p><h3 id="超时验证（自1-8-5起）"><a href="#超时验证（自1-8-5起）" class="headerlink" title="超时验证（自1.8.5起）"></a><a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Mockito.html#verification_timeout">超时验证</a>（自1.8.5起）</h3><p>允许超时验证。它会导致验证等待指定的时间段以进行所需的交互，而不是如果尚未发生则立即失败。可能对在并发条件下进行测试很有用。</p><p>这个特性应该很少使用 - 想出一个更好的方法来测试你的多线程系统。</p><p>尚未实现与 InOrder 验证一起使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MockitoTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">mockTimeout</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">mock</span> <span class="operator">=</span> mock(Person.class);</span><br><span class="line"></span><br><span class="line">        mock.say();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当 someMethod（） 被调用时不迟于 100 毫秒内通过，当验证满足时立即退出（例如，可能不会等待整整 100 毫秒）</span></span><br><span class="line">        verify(mock, timeout(<span class="number">100</span>)).say();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// above is an alias to</span></span><br><span class="line">        verify(mock, timeout(<span class="number">100</span>).times(<span class="number">1</span>)).say();</span><br><span class="line"></span><br><span class="line">        mock.say();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一旦 someMethod（） 在 100 毫秒内被调用 2 次，就会通过</span></span><br><span class="line">        verify(mock, timeout(<span class="number">100</span>).times(<span class="number">2</span>)).say();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等效：一旦 someMethod（） 在 100 毫秒内被调用 2 次，这也就会通过</span></span><br><span class="line">        verify(mock, timeout(<span class="number">100</span>).atLeast(<span class="number">2</span>)).say();</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自动实例化-Spies和-InjectMocks构造函数注入优点（自-1-9-0-起）"><a href="#自动实例化-Spies和-InjectMocks构造函数注入优点（自-1-9-0-起）" class="headerlink" title="自动实例化@Spies和 @InjectMocks构造函数注入优点（自 1.9.0 起）"></a><a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Mockito.html#automatic_instantiation">自动实例化<code>@Spies</code>和 <code>@InjectMocks</code></a>构造<a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Mockito.html#constructor_injection">函数注入优点</a>（自 1.9.0 起）</h3><p>Mockito 现在将尝试实例化 @<a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Spy.html"><code>Spy</code></a>并将<a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/InjectMocks.html"><code>InjectMocks</code></a>使用<strong>构造函数</strong>注入、<strong>setter</strong>注入或<strong>字段</strong>注入实例化 @ 字段。</p><p>要利用此功能，您需要使用<a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/MockitoAnnotations.html#initMocks-java.lang.Object-"><code>MockitoAnnotations.initMocks(Object)</code></a>,<a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/junit/MockitoJUnitRunner.html"><code>MockitoJUnitRunner</code></a> 或<a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/junit/MockitoRule.html"><code>MockitoRule</code></a>。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://javadoc.io/doc/org.mockito/mockito-core/3.3.3/org/mockito/Mockito.html#stubbing">Mockito官网文档</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/R4ZKWcB4TMFAiQlnIRqNeQ">阿里是如何进行单元测试培训的</a></p></li><li><p><a href="https://mp.weixin.qq.com/s/R4ZKWcB4TMFAiQlnIRqNeQ">那些年，我们写过的无效单元测试</a></p></li><li><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzOTU0NTQ0MA==&mid=2247526734&idx=1&sn=6e5ffa9a635a3da1536a6c5f94a5483c&chksm=e92a5441de5ddd573e4d95494afc6dce2154bc2042b4213e8c31f7c532b0cbd0b1abfd93a593&scene=21#wechat_redirect">Java编程技巧之单元测试用例编写流程</a></p></li><li><p>更改<a href="https://javadoc.io/static/org.mockito/mockito-core/3.3.3/org/mockito/Mockito.html#defaultreturn">未存根调用的默认返回值</a>（自 1.7 起）</p></li></ul><h1 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h1><h2 id="单元测试覆盖率"><a href="#单元测试覆盖率" class="headerlink" title="单元测试覆盖率"></a>单元测试覆盖率</h2><p>常用的单元测试覆盖率指标有：</p><ul><li>行覆盖(Line Coverage)： 用于度量被测代码中每一行执行语句是否都被测试到了。</li><li>分支覆盖(Branch Coverage)： 用于度量被测代码中每一个代码分支是否都被测试到了。</li><li>条件覆盖(Condition Coverage)： 用于度量被测代码的条件中每一个子表达式（true和false）是否都被测试到了。</li><li>路径覆盖(Path Coverage)： 用于度量被测代码中的每一个代码分支组合是否都被测试到了。</li></ul><p>除此之外，还有方法覆盖（Method Coverage）、类覆盖（Class Coverage）等单元测试覆盖率指标。</p>]]></content>
      
      
      <categories>
          
          <category> 单元测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> junit-mockito </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL</title>
      <link href="/c24675b4.html"/>
      <url>/c24675b4.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>《MySQL必知必会》</p></blockquote><h2 id="RDBMS与非RDBMS"><a href="#RDBMS与非RDBMS" class="headerlink" title="RDBMS与非RDBMS"></a>RDBMS与非RDBMS</h2><p>关系型数据库与非关系型数据库</p><p>非关系型数据库：</p><p>键值型数据库：Redis</p><p>文档型数据库：存储xml，json。如：MongoDB</p><p>搜索引擎型数据库：ElasticSearch</p><p>列式数据库：降低系统I&#x2F;O。HBase</p><p>图形数据库：Neo4j</p><h2 id="检索"><a href="#检索" class="headerlink" title="检索"></a>检索</h2><p>数据准备</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span></span><br><span class="line">DATABASE `mysql_study`<span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student`</span><br><span class="line">(</span><br><span class="line">    `id`             <span class="type">bigint</span>       <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id (自增)&#x27;</span>,</span><br><span class="line">    `name`           <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;名称&#x27;</span>,</span><br><span class="line">    `student_number` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">    `description`    <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;介绍&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci COMMENT <span class="string">&#x27;学生表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(name, student_number)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;1001&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(name, student_number)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;1002&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(name, student_number)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;1003&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(name, student_number)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;赵六&#x27;</span>, <span class="string">&#x27;1004&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(name, student_number)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;付八&#x27;</span>, <span class="string">&#x27;1005&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(name, student_number)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;付八&#x27;</span>, <span class="string">&#x27;1006&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(name, student_number)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;付九&#x27;</span>, <span class="string">&#x27;1007&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(name, student_number)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;付八九&#x27;</span>, <span class="string">&#x27;1008&#x27;</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(name, student_number)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;王四&#x27;</span>, <span class="string">&#x27;1009&#x27;</span>);</span><br></pre></td></tr></table></figure><p>基操：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id</span><br><span class="line"><span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> name</span><br><span class="line"><span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">DISTINCT</span> name</span><br><span class="line"><span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">LIMIT <span class="number">2</span>,<span class="number">2</span> 指示MySQL返回从行<span class="number">2</span>开始的<span class="number">2</span>行</span><br><span class="line">。</span><br><span class="line"># 个数为开始位置</span><br><span class="line">，第二个数为要检索的行数</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> student LIMIT <span class="number">2</span>,<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">以下表示意思相同</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> student LIMIT <span class="number">0</span>,<span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> student LIMIT <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">返回从行<span class="number">3</span>开始的<span class="number">4</span>行</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> student LIMIT <span class="number">3</span>,<span class="number">4</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> student LIMIT <span class="number">4</span></span><br><span class="line"><span class="keyword">OFFSET</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">使用表明限定</span><br><span class="line"><span class="keyword">select</span> student.name</span><br><span class="line"><span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">select</span> s.name <span class="keyword">as</span> <span class="string">&#x27;学生姓名&#x27;</span></span><br><span class="line"><span class="keyword">from</span> student <span class="keyword">as</span> s;</span><br></pre></td></tr></table></figure><blockquote><p>起始位置 &#x3D;（index-1）* pageSize</p></blockquote><h2 id="排序检索"><a href="#排序检索" class="headerlink" title="排序检索"></a>排序检索</h2><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> `name`, student_number</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> student_number;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">倒序</span><br><span class="line"><span class="keyword">select</span> `name`, student_number</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> student_number <span class="keyword">DESC</span>;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">按多个列排序并指定排序方向</span><br><span class="line">（正序</span><br><span class="line">、倒序</span><br><span class="line">）</span><br><span class="line"><span class="keyword">select</span> id, `name`, student_number</span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> `name` <span class="keyword">ASC</span>, id <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="区分大小写和排序顺序"><a href="#区分大小写和排序顺序" class="headerlink" title="区分大小写和排序顺序"></a><strong>区分大小写和排序顺序</strong></h3><p>在对文本性的数据进行排序时，A与a相同吗？a位于B之前还是位于Z之后？这些问题不是理论问题，其答案取决于数据库如何设置。</p><p>在字典（dictionary）排序顺序中，A被视为与a相同，这是MySQL（和大多数数据库管理系统）的默认行为。但是，许多数据库管理员能够在需要时改变这种行为（如果你的数据库包含大量外语字符，可能必须这样做）。</p><p>这里，关键的问题是，如果确实需要改变这种排序顺序，用简单的<code>ORDER BY</code> 子句做不到。你必须请求数据库管理员的帮助。</p><hr><h3 id="查询最值"><a href="#查询最值" class="headerlink" title="查询最值"></a>查询最值</h3><p>使用<code>ORDER BY</code> 和<code>LIMIT</code> 的组合</p><ul><li>取出最大学号</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student_number</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> student_number <span class="keyword">DESC</span> LIMIT <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="ORDER-BY-子句的位置"><a href="#ORDER-BY-子句的位置" class="headerlink" title="ORDER BY 子句的位置"></a><strong><code>ORDER BY</code> 子句的位置</strong></h3><p>在给出<code>ORDER BY</code> 子句时，应该保证它位于<code>FROM</code> 子句之后。如果使用<code>LIMIT</code> ，它必须位于<code>ORDER BY</code> 之后。使用子句的次序不对将产生错误消息。</p><h2 id="数据过滤"><a href="#数据过滤" class="headerlink" title="数据过滤"></a>数据过滤</h2><h3 id="使用WHERE子句"><a href="#使用WHERE子句" class="headerlink" title="使用WHERE子句"></a>使用WHERE子句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student_number</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> student_number <span class="operator">&gt;</span> <span class="string">&#x27;1002&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> student_number</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> student_number <span class="operator">&lt;&gt;</span> <span class="string">&#x27;1002&#x27;</span>;</span><br><span class="line"><span class="keyword">SELECT</span> student_number</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> student_number <span class="operator">!=</span> <span class="string">&#x27;1002&#x27;</span>;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">包含 [<span class="number">1002</span>,<span class="number">1004</span>]</span><br><span class="line"><span class="keyword">SELECT</span> student_number</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> student_number <span class="keyword">BETWEEN</span> <span class="string">&#x27;1002&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;1004&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="WHERE-子句的位置"><a href="#WHERE-子句的位置" class="headerlink" title="WHERE 子句的位置"></a><strong><code>WHERE</code> 子句的位置</strong></h4><p>在同时使用<code>ORDER BY</code> 和<code>WHERE</code> 子句时，应该让<code>ORDER BY</code> 位于<code>WHERE</code> 之后，否则将会产生错误。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> student_number</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> student_number <span class="operator">&gt;</span> <span class="string">&#x27;1002&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> student_number <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h4 id="空值检查"><a href="#空值检查" class="headerlink" title="空值检查"></a><strong>空值检查</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> description <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure><h3 id="组合WHERE子句"><a href="#组合WHERE子句" class="headerlink" title="组合WHERE子句"></a>组合WHERE子句</h3><h4 id="AND-操作符"><a href="#AND-操作符" class="headerlink" title="AND 操作符"></a><strong><code>AND</code> 操作符</strong></h4><p><strong><code>AND</code></strong> 用在<code>WHERE</code> 子句中的关键字，用来指示检索满足所有给定条件的行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`,</span><br><span class="line">       student_number</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> student_number <span class="operator">&gt;</span> <span class="string">&#x27;1002&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> `name` <span class="operator">=</span> <span class="string">&#x27;付八&#x27;</span>;</span><br></pre></td></tr></table></figure><hr><h4 id="OR-操作符"><a href="#OR-操作符" class="headerlink" title="OR 操作符"></a><strong><code>OR</code> 操作符</strong></h4><p><strong><code>OR</code></strong>  用在<code>WHERE</code> 子句中使用的关键字，用来表示检索匹配任一给定条件的行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`,</span><br><span class="line">       student_number</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> student_number <span class="operator">=</span> <span class="string">&#x27;1002&#x27;</span></span><br><span class="line">   <span class="keyword">OR</span> `name` <span class="operator">=</span> <span class="string">&#x27;李八&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="在WHERE-子句中使用圆括号"><a href="#在WHERE-子句中使用圆括号" class="headerlink" title="在WHERE 子句中使用圆括号"></a>在<code>WHERE</code> 子句中使用圆括号</h4><p>任何时候使用具有<code>AND</code> 和<code>OR</code> 操作符的<code>WHERE</code> 子句，都应该使用圆括号明确地分组操作符。不要过分依赖默认计算次序，即使它确实是你想要的东西也是如此。使用圆括号没有什么坏处，它能消除歧义。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line">找出学号是<span class="number">1002</span>或者叫李八的并且描述不为<span class="keyword">null</span>的同学</span><br><span class="line"><span class="keyword">SELECT</span> `name`,</span><br><span class="line">       student_number</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> (student_number <span class="operator">=</span> <span class="string">&#x27;1002&#x27;</span> <span class="keyword">OR</span> `name` <span class="operator">=</span> <span class="string">&#x27;李八&#x27;</span>)</span><br><span class="line">  <span class="keyword">AND</span> description <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><h3 id="IN操作符"><a href="#IN操作符" class="headerlink" title="IN操作符"></a>IN操作符</h3><p>圆括号在<code>WHERE</code> 子句中还有另外一种用法。<code>IN</code> 操作符用来指定条件范围，范围中的每个条件都可以进行匹配。<code>IN</code><br>取合法值的由逗号分隔的清单，全都括在圆括号中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`,</span><br><span class="line">       student_number</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> student_number <span class="keyword">IN</span> (<span class="string">&#x27;1002&#x27;</span>, <span class="string">&#x27;1003&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong><code>IN</code></strong> <code>WHERE</code> 子句中用来指定要匹配值的清单的关键字，功能与<code>OR</code> <strong>相当</strong> 。</p><h4 id="为什么要使用IN-操作符"><a href="#为什么要使用IN-操作符" class="headerlink" title="为什么要使用IN 操作符"></a>为什么要使用<code>IN</code> 操作符</h4><p>其优点具体如下：</p><ul><li>在使用长的合法选项清单时，<code>IN</code> 操作符的语法更清楚且更直观。</li><li>在使用<code>IN</code> 时，计算的次序更容易管理（因为使用的操作符更少）。</li><li><code>IN</code> 操作符一般比<code>OR</code> 操作符清单执行更快。</li><li><code>IN</code> 的最大优点是可以包含其他<code>SELECT</code> 语句，使得能够更动态地建立<code>WHERE</code> 子句。</li></ul><hr><h3 id="NOT操作符"><a href="#NOT操作符" class="headerlink" title="NOT操作符"></a>NOT操作符</h3><p><strong><code>NOT</code></strong> <code>WHERE</code> 子句中用来否定后跟条件的关键字。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`,</span><br><span class="line">       student_number</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> student_number <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="string">&#x27;1002&#x27;</span>, <span class="string">&#x27;1003&#x27;</span>);</span><br></pre></td></tr></table></figure><p><strong>MySQL中的<code>NOT</code></strong> MySQL支持使用<code>NOT</code> 对<code>IN</code> 、<code>BETWEEN</code> 和<code>EXISTS</code> <strong>子句取反，这与多数其他</strong> DBMS允许使用<code>NOT</code><br>对各种条件取反有很大的差别。</p><h2 id="用通配符进行过滤"><a href="#用通配符进行过滤" class="headerlink" title="用通配符进行过滤"></a><strong>用通配符进行过滤</strong></h2><h3 id="LIKE操作符"><a href="#LIKE操作符" class="headerlink" title="LIKE操作符"></a>LIKE操作符</h3><p><strong>通配符（wildcard）</strong> 用来匹配值的一部分的特殊字符。</p><p>**搜索模式（search pattern)**由字面值、通配符或两者组合构成的搜索条件。</p><p>通配符本身实际是SQL的<code>WHERE</code> 子句中有特殊含义的字符，SQL支持几种通配符。</p><p>为在搜索子句中使用通配符，必须使用<code>LIKE</code> 操作符。<code>LIKE</code> 指示MySQL，**后跟的搜索模式利用通配符匹配而不是直接相等匹配进行比较<br>**。</p><p>无通配符情况一：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`,</span><br><span class="line">       student_number</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="keyword">LIKE</span> <span class="string">&#x27;李四&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">李四1002</span><br></pre></td></tr></table></figure><p>无通配符情况二：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`,</span><br><span class="line">       student_number</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="keyword">LIKE</span> <span class="string">&#x27;李&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果是未匹配到数据！</p><h4 id="百分号（-）通配符"><a href="#百分号（-）通配符" class="headerlink" title="百分号（% ）通配符"></a><strong>百分号（<code>%</code> ）通配符</strong></h4><p>在搜索串中，<code>%</code> 表示<em>任何字符出现任意次数</em> 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`,</span><br><span class="line">       student_number</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="keyword">LIKE</span> <span class="string">&#x27;付%&#x27;</span>;</span><br></pre></td></tr></table></figure><blockquote><p><strong>区分大小写</strong> 根据MySQL的配置方式，搜索可以是区分大小写的。如果区分大小写，<code>&#39;jet%&#39;</code> 与<code>JetPack 1000</code> 将不匹配。</p></blockquote><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">付八1005</span><br><span class="line">付八1006</span><br><span class="line">付九1007</span><br><span class="line">付八九1008</span><br></pre></td></tr></table></figure><ul><li>两个<code>%</code>通配符</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`,</span><br><span class="line">       student_number</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="keyword">LIKE</span> <span class="string">&#x27;%九%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">付九1007</span><br><span class="line">付八九1008</span><br></pre></td></tr></table></figure><ul><li><code>%</code>通配符在中间</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`,</span><br><span class="line">       student_number</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="keyword">LIKE</span> <span class="string">&#x27;付%九&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">付九1007</span><br><span class="line">付八九1008</span><br></pre></td></tr></table></figure><hr><h4 id="下划线（-）通配符"><a href="#下划线（-）通配符" class="headerlink" title="下划线（_ ）通配符"></a><strong>下划线（<code>_</code> ）通配符</strong></h4><p>下划线只匹配单个字符。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`,</span><br><span class="line">       student_number</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="keyword">LIKE</span> <span class="string">&#x27;付_&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">付八1005</span><br><span class="line">付八1006</span><br><span class="line">付九1007</span><br></pre></td></tr></table></figure><p>与<code>%</code> 能匹配0个字符不一样，<code>_</code> 总是匹配一个字符，不能多也不能少。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`,</span><br><span class="line">       student_number</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="keyword">LIKE</span> <span class="string">&#x27;_九&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">付九1007</span><br></pre></td></tr></table></figure><hr><h4 id="使用通配符的技巧"><a href="#使用通配符的技巧" class="headerlink" title="使用通配符的技巧"></a>使用通配符的技巧</h4><p>MySQL的通配符很有用。但这种功能是有代价的：通配符搜索的处理一般要比前面讨论的其他搜索所花时间更长。</p><ul><li>不要过度使用通配符。如果其他操作符能达到相同的目的，应该使用其他操作符。</li><li>在确实需要使用通配符时，除非绝对有必要，否则不要把它们用在搜索模式的开始处。把通配符置于搜索模式的开始处，搜索起来是最慢的。</li><li>仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据。</li></ul><hr><h2 id="用正则表达式进行搜索"><a href="#用正则表达式进行搜索" class="headerlink" title="用正则表达式进行搜索"></a>用正则表达式进行搜索</h2><h3 id="基本字符匹配"><a href="#基本字符匹配" class="headerlink" title="基本字符匹配"></a><strong>基本字符匹配</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;张三&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> name REGEXP <span class="string">&#x27;张三&#x27;</span>;</span><br></pre></td></tr></table></figure><p>除关键字<code>LIKE</code> 被<code>REGEXP</code> 替代外，这条语句看上去非常像使用<code>LIKE</code> 的语句（第8章）。它告诉MySQL：<code>REGEXP</code><br>后所跟的东西作为正则表达式（与文字正文<code>1000</code> 匹配的一个正则表达式）处理。</p><p>为什么要费力地使用正则表达式？在刚才的例子中，正则表达式确实没有带来太多好处（可能还会降低性能），我们接着看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> admission_info</span><br><span class="line"><span class="keyword">where</span> tuition REGEXP <span class="string">&#x27;.11&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> admission_info</span><br><span class="line"><span class="keyword">where</span> tuition <span class="keyword">LIKE</span> <span class="string">&#x27;%.11&#x27;</span>; </span><br></pre></td></tr></table></figure><p>再接着看</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- 表中有数据是120.11</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> admission_info</span><br><span class="line"><span class="keyword">where</span> tuition REGEXP <span class="string">&#x27;120&#x27;</span>;</span><br><span class="line">#</span><br><span class="line">返回两条数据</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> admission_info</span><br><span class="line"><span class="keyword">where</span> tuition <span class="keyword">LIKE</span> <span class="string">&#x27;120&#x27;</span>;</span><br><span class="line">#</span><br><span class="line">无数据返回</span><br></pre></td></tr></table></figure><p>此时出现结果差异，原因：</p><p><code>LIKE</code> 匹配整个列。如果被匹配的文本在列值中出现，<code>LIKE</code> 将不会找到它，相应的行也不被返回（除非使用通配符）。而<code>REGEXP</code><br>在列值内进行匹配，如果被匹配的文本在列值中出现，<code>REGEXP</code> 将会找到它，相应的行将被返回。这是一个非常重要的差别。</p><p><strong>匹配不区分大小写</strong></p><p>MySQL中的正则表达式匹配（自版本3.23.4后）不区分大小写（即，大写和小写都匹配）。为区分大小写，可使用<code>BINARY</code> 关键字：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> student</span><br><span class="line"><span class="keyword">where</span> name REGEXP <span class="type">BINARY</span> <span class="string">&#x27;z3&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="进行OR-匹配"><a href="#进行OR-匹配" class="headerlink" title="进行OR 匹配"></a><strong>进行<code>OR</code> 匹配</strong></h3><p>为搜索两个串之一（或者为这个串，或者为另一个串），使用|，如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> goods</span><br><span class="line"><span class="keyword">WHERE</span> goods_name REGEXP <span class="string">&#x27;卫衣|卫龙&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong>两个以上的<code>OR</code> 条件</strong> 可以给出两个以上的<code>OR</code> 条件。例如，<code>&#39;1000 | 2000 | 3000&#39;</code> 将匹配<code>1000</code> 或<code>2000</code> 或<code>3000</code> 。</p><h3 id="匹配几个字符之一"><a href="#匹配几个字符之一" class="headerlink" title="匹配几个字符之一"></a><strong>匹配几个字符之一</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> `name` REGEXP <span class="string">&#x27;[张王李]三&#x27;</span> # 这句的意思是匹配 张三 <span class="keyword">or</span> 王三 <span class="keyword">or</span> 李三</span><br></pre></td></tr></table></figure><p>注意区别：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    `name`</span><br><span class="line">REGEXP <span class="string">&#x27;张|王|李三&#x27;</span> # 这句的意思是匹配 张 <span class="keyword">or</span> 王 <span class="keyword">or</span> 李三</span><br></pre></td></tr></table></figure><p>字符集合也可以被否定：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">    `name`</span><br><span class="line">REGEXP <span class="string">&#x27;[^张王李]三&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="匹配范围"><a href="#匹配范围" class="headerlink" title="匹配范围"></a><strong>匹配范围</strong></h3><p>集合可用来定义要匹配的一个或多个字符。例如，下面的集合将匹配数字0到9：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[0123456789]</span></span><br></pre></td></tr></table></figure><p>为简化这种类型的集合，可使用<code>-</code> 来定义一个范围。下面的式子功能上等同于上述数字列表：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[0-9]</span></span><br></pre></td></tr></table></figure><p>范围不限于完整的集合，<code>[1-3]</code> 和<code>[6-9]</code> 也是合法的范围。此外，范围不一定只是数值的，<code>[a-z]</code> 匹配任意字母字符。</p><h3 id="匹配特殊字符"><a href="#匹配特殊字符" class="headerlink" title="匹配特殊字符"></a><strong>匹配特殊字符</strong></h3><p><code>.</code> 匹配任意字符，因此每个行都被检索出来</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> `name` REGEXP <span class="string">&#x27;.&#x27;</span></span><br></pre></td></tr></table></figure><p>为了匹配特殊字符，必须用<code>\\</code> 为前导。<code>\\-</code> 表示查找<code>-</code> ，<code>\\.</code> 表示查找<code>.</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `tuition`</span><br><span class="line"><span class="keyword">FROM</span> admission_info</span><br><span class="line"><span class="keyword">WHERE</span> `tuition` REGEXP <span class="string">&#x27;\\.&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>空白元字符</strong>：<code>\\</code> 也用来引用元字符（具有特殊含义的字符）</p><table><thead><tr><th align="center">元 字 符</th><th align="center">说 明</th></tr></thead><tbody><tr><td align="center"><code>\\f</code></td><td align="center">换页</td></tr><tr><td align="center"><code>\\n</code></td><td align="center">换行</td></tr><tr><td align="center"><code>\\r</code></td><td align="center">回车</td></tr><tr><td align="center"><code>\\t</code></td><td align="center">制表</td></tr><tr><td align="center"><code>\\v</code></td><td align="center">纵向制表</td></tr></tbody></table><p>匹配<code>\</code></p><p>为了匹配反斜杠（<code>\</code> ）字符本身，需要使用<code>\\\</code> 。</p><p><strong><code>\</code> 或<code>\\</code></strong> ？</p><p>多数正则表达式实现使用单个反斜杠转义特殊字符，以便能使用这些字符本身。但MySQL要求两个反斜杠（MySQL自己解释一个，正则表达式库解释另一个)。</p><h3 id="匹配字符类"><a href="#匹配字符类" class="headerlink" title="匹配字符类"></a><strong>匹配字符类</strong></h3><p>存在找出你自己经常使用的数字、所有字母字符或所有数字字母字符等的匹配。为更方便工作，可以使用预定义的字符集，称为<em>字符类</em><br>（characterclass）。</p><p><strong>字符类</strong></p><table><thead><tr><th align="center">类</th><th align="center">说 明</th></tr></thead><tbody><tr><td align="center"><code>[:alnum:]</code></td><td align="center">任意字母和数字（同<code>[a-zA-Z0-9]</code> ）</td></tr><tr><td align="center"><code>[:alpha:]</code></td><td align="center">任意字符（同<code>[a-zA-Z]</code> ）</td></tr><tr><td align="center"><code>[:blank:]</code></td><td align="center">空格和制表（同<code>[\\t]</code> ）</td></tr><tr><td align="center"><code>[:cntrl:]</code></td><td align="center">ASCII控制字符（ASCII <code>0</code> 到<code>31</code> 和<code>127</code> ）</td></tr><tr><td align="center"><code>[:digit:]</code></td><td align="center">任意数字（同<code>[0-9]</code> ）</td></tr><tr><td align="center"><code>[:graph:]</code></td><td align="center">与<code>[:print:]</code> 相同，但不包括空格</td></tr><tr><td align="center"><code>[:lower:]</code></td><td align="center">任意小写字母（同<code>[a-z]</code> ）</td></tr><tr><td align="center"><code>[:print:]</code></td><td align="center">任意可打印字符</td></tr><tr><td align="center"><code>[:punct:]</code></td><td align="center">既不在<code>[:alnum:]</code> 又不在<code>[:cntrl:]</code> 中的任意字符</td></tr><tr><td align="center"><code>[:space:]</code></td><td align="center">包括空格在内的任意空白字符（同<code>[\\f\\n\\r\\t\\v]</code> ）</td></tr><tr><td align="center"><code>[:upper:]</code></td><td align="center">任意大写字母（同<code>[A-Z]</code> ）</td></tr><tr><td align="center"><code>[:xdigit:]</code></td><td align="center">任意十六进制数字（同<code>[a-fA-F0-9]</code> ）</td></tr></tbody></table><h3 id="匹配多个实例"><a href="#匹配多个实例" class="headerlink" title="匹配多个实例"></a><strong>匹配多个实例</strong></h3><p><strong>重复元字符</strong></p><table><thead><tr><th align="center">元 字 符</th><th align="center">说 明</th></tr></thead><tbody><tr><td align="center"><code>*</code></td><td align="center">0个或多个匹配</td></tr><tr><td align="center"><code>+</code></td><td align="center">1个或多个匹配（等于<code>&#123;1,&#125;</code> ）</td></tr><tr><td align="center"><code>?</code></td><td align="center">0个或1个匹配（等于<code>&#123;0,1&#125;</code> ）</td></tr><tr><td align="center"><code>&#123;n&#125;</code></td><td align="center">指定数目的匹配</td></tr><tr><td align="center"><code>&#123;n,&#125;</code></td><td align="center">不少于指定数目的匹配</td></tr><tr><td align="center"><code>&#123;n,m&#125;</code></td><td align="center">匹配数目的范围（<code>m</code> 不超过255）</td></tr></tbody></table><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,</span><br><span class="line">       `name`,</span><br><span class="line">       description</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> description REGEXP <span class="string">&#x27;[[:digit:]]&#123;4&#125;&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    id;</span><br></pre></td></tr></table></figure><h3 id="定位符"><a href="#定位符" class="headerlink" title="定位符"></a><strong>定位符</strong></h3><p>匹配特定位置的文本。</p><p><strong>定位元字符</strong></p><table><thead><tr><th align="center">元 字 符</th><th align="center">说 明</th></tr></thead><tbody><tr><td align="center"><code>^</code></td><td align="center">文本的开始</td></tr><tr><td align="center"><code>$</code></td><td align="center">文本的结尾</td></tr><tr><td align="center"><code>[[:</code></td><td align="center">词的开始</td></tr><tr><td align="center"><code>[[:&gt;:]]</code></td><td align="center">词的结尾</td></tr></tbody></table><p>示例</p><p>如果你想找出以一个数（包括以小数点开始的数）开始的所有产品，怎么办？简单搜索<code>[0-9\\.]</code> （或<code>[[:digit:]\\.</code> ]<br>）不行，因为它将在文本内任意位置查找匹配。解决办法是使用^定位符，</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--- description 是数字开头，后面任意</span></span><br><span class="line"><span class="keyword">SELECT</span> id,</span><br><span class="line">       `name`,</span><br><span class="line">       description</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> description REGEXP <span class="string">&#x27;^[0-9\\.]&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">    id;</span><br></pre></td></tr></table></figure><p><strong><code>^</code> 的双重用途</strong> <code>^</code> 有两种用法。在集合中（用[和]定义），用它来否定该集合，否则，用来指串的开始处。</p><p><strong>使<code>REGEXP</code> 起类似<code>LIKE</code> 的作用</strong></p><p><code>LIKE</code> 和<code>REGEXP</code> 的不同在于，<code>LIKE</code> 匹配整个串而<code>REGEXP</code> 匹配子串。利用定位符，通过用<code>^</code> 开始每个表达式，用<code>$</code><br>结束每个表达式，可以使<code>REGEXP</code> 的作用与<code>LIKE</code> 一样。</p><p><strong>简单的正则表达式测试</strong></p><p>可以在不使用数据库表的情况下用<code>SELECT</code> 来测试正则表达式。<code>REGEXP</code> 检查总是返回<code>0</code> （没有匹配）或<code>1</code><br>（匹配）。可以用带文字串的<code>REGEXP</code> 来测试表达式，并试验它们。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;hello&#x27;</span> REGEXP <span class="string">&#x27;[0-9]&#x27;</span>;</span><br></pre></td></tr></table></figure><p>结果将返回<code>0</code> （因为文本<code>hello</code> 中没有数字）。</p><hr><h2 id="创建计算字段"><a href="#创建计算字段" class="headerlink" title="创建计算字段"></a>创建计算字段</h2><h3 id="拼接字段"><a href="#拼接字段" class="headerlink" title="拼接字段"></a>拼接字段</h3><p><strong>拼接（concatenate）</strong> 将值联结到一起构成单个值。</p><p><strong>MySQL的不同之处</strong> 多数DBMS使用<code>+</code> 或<code>||</code> 来实现拼接，MySQL则使用<code>Concat()</code>函数来实现。当把SQL语句转换成MySQL语句时一定要把这个区别铭记在心。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(`name`, <span class="string">&#x27; (&#x27;</span>, student_number, <span class="string">&#x27;)&#x27;</span>) <span class="keyword">AS</span> `classinfo`</span><br><span class="line"><span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">张三 (1001)</span><br><span class="line">李四 (1002)</span><br><span class="line">王五 (1003)</span><br><span class="line">赵六 (1004)</span><br><span class="line">付八 (1005)</span><br><span class="line">付八 (1006)</span><br><span class="line">付九 (1007)</span><br><span class="line">付八九 (1008)</span><br><span class="line">王四 (1009)</span><br></pre></td></tr></table></figure><hr><h3 id="删除空格"><a href="#删除空格" class="headerlink" title="删除空格"></a>删除空格</h3><ul><li><p><code>RTrim()</code> 函数去掉值右边的所有空格。</p></li><li><p><code>LTrim()</code> 函数去掉串左边的空格。</p></li><li><p><code>Trim()</code> 函数去掉串左右两边的空格。</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(`name`, <span class="string">&#x27; (&#x27;</span>, student_number, LTRIM(<span class="string">&#x27;  )&#x27;</span>)) <span class="keyword">AS</span> `classinfo`</span><br><span class="line"><span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><hr><h3 id="使用别名"><a href="#使用别名" class="headerlink" title="使用别名"></a><strong>使用别名</strong></h3><p>一个未命名的列不能用于客户机应用中，因为客户机没有办法引用它。</p><p>为了解决这个问题，SQL支持列别名。<em>别名</em> （alias）是一个字段或值的替换名。别名用<code>AS</code> 关键字赋予。</p><p><strong>别名的其他用途</strong></p><p>别名还有其他用途。常见的用途包括在实际的表列名包含不符合规定的字符（如空格）时重新命名它，在原来的名字含混或容易误解时扩充它。</p><p><strong>导出列</strong></p><p>别名有时也称为导出列（derivedcolumn），不管称为什么，它们所代表的都是相同的东西。</p><h3 id="执行算术计算"><a href="#执行算术计算" class="headerlink" title="执行算术计算"></a>执行算术计算</h3><p>计算字段的另一常见用途是对检索出的数据进行算术计算。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`,</span><br><span class="line">       (id <span class="operator">*</span> student_number) <span class="keyword">AS</span> <span class="string">&#x27;score&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> `student`;</span><br></pre></td></tr></table></figure><p><strong>MySQL算术操作符</strong></p><table><thead><tr><th align="center">操 作 符</th><th align="center">说 明</th></tr></thead><tbody><tr><td align="center"><code>+</code></td><td align="center">加</td></tr><tr><td align="center"><code>-</code></td><td align="center">减</td></tr><tr><td align="center"><code>*</code></td><td align="center">乘</td></tr><tr><td align="center"><code>/</code></td><td align="center">除</td></tr></tbody></table><hr><h3 id="使用数据处理函数"><a href="#使用数据处理函数" class="headerlink" title="使用数据处理函数"></a>使用数据处理函数</h3><p><strong>函数没有SQL的可移植性强</strong></p><p>能运行在多个系统上的代码称为可移植的（portable）。相对来说，多数SQL语句是可移植的，在SQL实现之间有差异时，这些差异通常不那么难处理。而函数的可移植性却不强。几乎每种主要的DBMS的实现都支持其他实现不支持的函数，而且有时差异还很大。</p><p>为了代码的可移植，许多SQL程序员不赞成使用特殊实现的功能。虽然这样做很有好处，但不总是利于应用程序的性能。如果不使用这些函数，编写某些应用程序代码会很艰难。必须利用其他方法来实现DBMS非常有效地完成的工作。</p><p>如果你决定使用函数，应该保证做好代码注释，以便以后你（或其他人）能确切地知道所编写SQL代码的含义。</p><h4 id="文本处理函数"><a href="#文本处理函数" class="headerlink" title="文本处理函数"></a><strong>文本处理函数</strong></h4><p><strong>常用的文本处理函数</strong></p><table><thead><tr><th align="center">函 数</th><th align="center">说 明</th></tr></thead><tbody><tr><td align="center"><code>Left()</code></td><td align="center">返回串左边的字符</td></tr><tr><td align="center"><code>Length()</code></td><td align="center">返回串的长度</td></tr><tr><td align="center"><code>Locate()</code></td><td align="center">找出串的一个子串</td></tr><tr><td align="center"><code>Lower()</code></td><td align="center">将串转换为小写</td></tr><tr><td align="center"><code>LTrim()</code></td><td align="center">去掉串左边的空格</td></tr><tr><td align="center"><code>Right()</code></td><td align="center">返回串右边的字符</td></tr><tr><td align="center"><code>RTrim()</code></td><td align="center">去掉串右边的空格</td></tr><tr><td align="center"><code>Soundex()</code></td><td align="center">返回串的<code>SOUNDEX</code> 值</td></tr><tr><td align="center"><code>SubString()</code></td><td align="center">返回子串的字符</td></tr><tr><td align="center"><code>Upper()</code></td><td align="center">将串转换为大写</td></tr></tbody></table><p><code>SOUNDEX</code> 是一个将任何文本串转换为描述其语音表示的字母数字模式的算法。<code>SOUNDEX</code><br>考虑了类似的发音字符和音节，使得能对串进行发音比较而不是字母比较。虽然<code>SOUNDEX</code><br>不是SQL概念，但MySQL（就像多数DBMS一样）都提供对<code>SOUNDEX</code> 的支持。</p><ul><li>SUBSTRING()</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> `name`,</span><br><span class="line">       <span class="built_in">SUBSTRING</span>(`name`, <span class="number">1</span>, <span class="number">1</span>) <span class="keyword">AS</span> first_name</span><br><span class="line"><span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">张三张</span><br><span class="line">李四李</span><br><span class="line">王五王</span><br><span class="line">赵六赵</span><br><span class="line">付八付</span><br><span class="line">付八付</span><br><span class="line">付九付</span><br><span class="line">付八九付</span><br><span class="line">王四王</span><br></pre></td></tr></table></figure><hr><h4 id="日期和时间处理函数"><a href="#日期和时间处理函数" class="headerlink" title="日期和时间处理函数"></a><strong>日期和时间处理函数</strong></h4><p>日期和时间采用相应的数据类型和特殊的格式存储，以便能快速和有效地排序或过滤，并且节省物理存储空间。</p><p>一般，应用程序不使用用来存储日期和时间的格式，因此日期和时间函数总是被用来读取、统计和处理这些值。由于这个原因，日期和时间函数在MySQL语言中具有重要的作用。</p><p><strong>常用日期和时间处理函数</strong></p><table><thead><tr><th align="center">函 数</th><th align="center">说 明</th></tr></thead><tbody><tr><td align="center"><code>AddDate()</code></td><td align="center">增加一个日期（天、周等）</td></tr><tr><td align="center"><code>AddTime()</code></td><td align="center">增加一个时间（时、分等）</td></tr><tr><td align="center"><code>CurDate()</code></td><td align="center">返回当前日期</td></tr><tr><td align="center"><code>CurTime()</code></td><td align="center">返回当前时间</td></tr><tr><td align="center"><code>Date()</code></td><td align="center">返回日期时间的日期部分</td></tr><tr><td align="center"><code>DateDiff()</code></td><td align="center">计算两个日期之差</td></tr><tr><td align="center"><code>Date_Add()</code></td><td align="center">高度灵活的日期运算函数</td></tr><tr><td align="center"><code>Date_Format()</code></td><td align="center">返回一个格式化的日期或时间串</td></tr><tr><td align="center"><code>Day()</code></td><td align="center">返回一个日期的天数部分</td></tr><tr><td align="center"><code>DayOfWeek()</code></td><td align="center">对于一个日期，返回对应的星期几</td></tr><tr><td align="center"><code>Hour()</code></td><td align="center">返回一个时间的小时部分</td></tr><tr><td align="center"><code>Minute()</code></td><td align="center">返回一个时间的分钟部分</td></tr><tr><td align="center"><code>Month()</code></td><td align="center">返回一个日期的月份部分</td></tr><tr><td align="center"><code>Now()</code></td><td align="center">返回当前日期和时间</td></tr><tr><td align="center"><code>Second()</code></td><td align="center">返回一个时间的秒部分</td></tr><tr><td align="center"><code>Time()</code></td><td align="center">返回一个日期时间的时间部分</td></tr><tr><td align="center"><code>Year()</code></td><td align="center">返回一个日期的年份部分</td></tr></tbody></table><p>需要注意的是MySQL使用的日期格式。无论你什么时候指定一个日期，不管是插入或更新表值还是用<code>WHERE</code> 子句进行过滤，日期必须为格式yyyy-mm-dd。</p><p><strong>应该总是使用4位数字的年份</strong></p><p>支持2位数字的年份，MySQL处理00-69为2000-2069，处理70-99为1970-1999。虽然它们可能是打算要的年份，但使用完整的4位数字年份更可靠，因为MySQL不必做出任何假定。</p><p>数据准备</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `admission_info`</span><br><span class="line">(</span><br><span class="line">    `id`             <span class="type">BIGINT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    `student_id`     <span class="type">BIGINT</span> UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学生id&#x27;</span>,</span><br><span class="line">    `admission_date` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;入学时间&#x27;</span>,</span><br><span class="line">    `tuition`        <span class="type">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学费&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB AUTO_INCREMENT <span class="operator">=</span> <span class="number">10</span> <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `admission_info` <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;2022-12-09 00:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `admission_info`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="number">2</span>, <span class="string">&#x27;2022-12-04 00:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `admission_info`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="number">3</span>, <span class="string">&#x27;2022-12-09 00:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `admission_info`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="number">4</span>, <span class="string">&#x27;2022-12-09 00:00:22&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `admission_info`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="number">5</span>, <span class="string">&#x27;2022-12-09 00:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `admission_info`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="number">6</span>, <span class="string">&#x27;2022-12-09 02:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `admission_info`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="number">7</span>, <span class="string">&#x27;2022-12-01 00:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `admission_info`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="number">8</span>, <span class="string">&#x27;2022-12-09 00:00:00&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `admission_info`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="number">9</span>, <span class="string">&#x27;2022-12-02 00:00:00&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>查询日期</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line">第一种查询</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">as</span> <span class="string">&#x27;总条数&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> `admission_info`</span><br><span class="line"><span class="keyword">WHERE</span> `admission_date` <span class="operator">=</span> <span class="string">&#x27;2022-12-09&#x27;</span>;</span><br><span class="line">#</span><br><span class="line"><span class="number">4</span>条</span><br><span class="line"></span><br><span class="line"># 第二种查询 <span class="type">Date</span>()</span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> <span class="string">&#x27;总条数&#x27;</span></span><br><span class="line"><span class="keyword">FROM</span> `admission_info`</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    <span class="type">Date</span> ( `admission_date` ) <span class="operator">=</span> <span class="string">&#x27;2022-12-09&#x27;</span>;</span><br><span class="line">#</span><br><span class="line"><span class="number">6</span>条</span><br></pre></td></tr></table></figure><p><strong>如果要的是日期，请使用<code>Date()</code></strong> 如果你想要的仅是日期，则使用<code>Date()</code> 是一个良好的习惯，即使你知道相应的列只包含日期也是如此。</p><p>这样，如果由于某种原因表中以后有日期和时间值，你的SQL代码也不用改变。当然，也存在一个<code>Time()</code> 函数，在你只想要时间时应该使用它。</p><ul><li>时间范围查询</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> `admission_info`</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    <span class="type">DATE</span> ( `admission_date` ) <span class="keyword">BETWEEN</span> <span class="string">&#x27;2022-12-01&#x27;</span></span><br><span class="line">  <span class="keyword">AND</span> <span class="string">&#x27;2022-12-05&#x27;</span>;</span><br></pre></td></tr></table></figure><ul><li>查询某月的某天</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> `admission_info`</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    <span class="keyword">YEAR</span> ( `admission_date` ) <span class="operator">=</span> <span class="number">2022</span></span><br><span class="line">  <span class="keyword">AND</span> <span class="keyword">MONTH</span> ( `admission_date` ) <span class="operator">=</span> <span class="number">12</span>;</span><br></pre></td></tr></table></figure><hr><h4 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a><strong>数值处理函数</strong></h4><p>数值处理函数仅处理数值数据。这些函数一般主要用于代数、三角或几何运算，因此没有串或日期—时间处理函数的使用那么频繁。</p><p><strong>常用数值处理函数</strong></p><table><thead><tr><th align="center">函 数</th><th align="center">说 明</th></tr></thead><tbody><tr><td align="center"><code>Abs()</code></td><td align="center">返回一个数的绝对值</td></tr><tr><td align="center"><code>Cos()</code></td><td align="center">返回一个角度的余弦</td></tr><tr><td align="center"><code>Exp()</code></td><td align="center">返回一个数的指数值</td></tr><tr><td align="center"><code>Mod()</code></td><td align="center">返回除操作的余数</td></tr><tr><td align="center"><code>Pi()</code></td><td align="center">返回圆周率</td></tr><tr><td align="center"><code>Rand()</code></td><td align="center">返回一个随机数</td></tr><tr><td align="center"><code>Sin()</code></td><td align="center">返回一个角度的正弦</td></tr><tr><td align="center"><code>Sqrt()</code></td><td align="center">返回一个数的平方根</td></tr><tr><td align="center"><code>Tan()</code></td><td align="center">返回一个角度的</td></tr></tbody></table><hr><h2 id="汇总数据"><a href="#汇总数据" class="headerlink" title="汇总数据"></a>汇总数据</h2><p>SQL聚集函数可用来汇总数据。这使我们能够对行进行计数，计算和与平均数，获得最大和最小值而不用检索所有数据。</p><h3 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h3><ul><li>确定表中行数（或者满足某个条件或包含某个特定值的行数）。</li><li>获得表中行组的和。</li><li>找出表列（或所有行或某些特定的行）的最大值、最小值和平均值。</li></ul><p><strong>聚集函数（aggregate function）</strong> 运行在行组上，计算和返回单个值的函数。</p><p><strong>表12-1 SQL聚集函数</strong></p><table><thead><tr><th align="center">函 数</th><th align="center">说 明</th></tr></thead><tbody><tr><td align="center"><code>AVG()</code></td><td align="center">返回某列的平均值</td></tr><tr><td align="center"><code>COUNT()</code></td><td align="center">返回某列的行数</td></tr><tr><td align="center"><code>MAX()</code></td><td align="center">返回某列的最大值</td></tr><tr><td align="center"><code>MIN()</code></td><td align="center">返回某列的最小值</td></tr><tr><td align="center"><code>SUM()</code></td><td align="center">返回某列值之和</td></tr></tbody></table><p><code>COUNT()</code> 函数有两种使用方式。</p><ul><li>使用<code>COUNT(*)</code> 对表中行的数目进行计数，不管表列中包含的是空值（<code>NULL</code> ）还是非空值。</li><li>使用<code>COUNT(column)</code> 对特定列中具有值的行进行计数，忽略<code>NULL</code> 值。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line">为description添加一条数据再执行下面两句</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">from</span> student;</span><br><span class="line">#</span><br><span class="line"><span class="number">9</span>条</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(`description`)</span><br><span class="line"><span class="keyword">from</span> student;</span><br><span class="line">#</span><br><span class="line"><span class="number">1</span>条</span><br></pre></td></tr></table></figure><hr><p><code>MAX()</code> 返回指定列中的最大值。<code>MAX()</code> 要求指定列名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">max</span>(id) <span class="keyword">as</span> max_id</span><br><span class="line"><span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><p><strong>对非数值数据使用<code>MAX()</code></strong></p><p>虽然<code>MAX()</code><br>一般用来找出最大的数值或日期值，但MySQL允许将它用来返回任意列中的最大值，包括返回文本列中的最大值。在用于文本数据时，如果数据按相应的列排序，则<code>MAX()</code><br>返回最后一行。</p><p><code>SUM()</code> 用来返回指定列值的和（总计）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">sum</span>(id <span class="operator">*</span> student_number) <span class="keyword">AS</span> score</span><br><span class="line"><span class="keyword">FROM</span> student;</span><br></pre></td></tr></table></figure><blockquote><p><strong>在多个列上进行计算</strong>：利用标准的算术操作符，所有聚集函数都可用来执行多个列上的计算。</p></blockquote><p><strong>NULL值</strong></p><ul><li><p><code>AVG()</code> 函数忽略列值为<code>NULL</code> 的行。</p></li><li><p><code>MAX()</code> 函数忽略列值为<code>NULL</code> 的行。</p></li><li><p><code>MIN()</code> 函数忽略列值为<code>NULL</code> 的行。</p></li><li><p><code>SUM()</code> 函数忽略列值为<code>NULL</code> 的行。</p></li><li><p>如果指定列名，则指定列的值为空的行被<code>COUNT()</code> 函数忽略，但如果<code>COUNT()</code> 函数中用的是星号（<code>*</code> ），则不忽略。</p></li></ul><hr><h3 id="聚集不同值"><a href="#聚集不同值" class="headerlink" title="聚集不同值"></a>聚集不同值</h3><p>以上5个聚集函数都可以如下使用：</p><ul><li>对所有的行执行计算，指定<code>ALL</code> 参数或不给参数（因为<code>ALL</code> 是默认行为）；</li><li>只包含不同的值，指定<code>DISTINCT</code> 参数。</li></ul><p><strong><code>ALL</code> 为默认</strong></p><p><code>ALL</code> 参数不需要指定，因为它是默认行为。如果不指定<code>DISTINCT</code> ，则假定为<code>ALL</code> 。</p><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(`tuition`) <span class="keyword">AS</span> avg_tuition</span><br><span class="line"><span class="keyword">FROM</span> `admission_info`;</span><br><span class="line">#</span><br><span class="line"><span class="number">110.110000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(<span class="keyword">DISTINCT</span> `tuition`) <span class="keyword">AS</span> avg_tuition</span><br><span class="line"><span class="keyword">FROM</span> `admission_info`;</span><br><span class="line">#</span><br><span class="line"><span class="number">123.443333</span></span><br></pre></td></tr></table></figure><p>可以看到，在使用了<code>DISTINCT</code> 后，此例子中的<code>avg_tuition</code> 比较高，因为有多个物品具有相同的较低价格。排除它们提升了平均价格。</p><p><strong>注意</strong></p><p>如果指定列名，则<code>DISTINCT</code> 只能用于<code>COUNT()</code> 。<code>DISTINCT</code> 不能用于<code>COUNT(*)</code> ，因此不允许使用<code>COUNT（DISTINCT）</code> ，否则会产生错误。</p><p>类似地，<code>DISTINCT</code> 必须使用列名，不能用于计算或表达式。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> `tuition`) <span class="keyword">AS</span> count_tuition</span><br><span class="line"><span class="keyword">FROM</span> `admission_info`;</span><br></pre></td></tr></table></figure><p><strong>将<code>DISTINCT</code> 用于<code>MIN()</code> 和<code>MAX()</code></strong></p><p>虽然<code>DISTINCT</code> 从技术上可用于<code>MIN()</code> 和<code>MAX()</code>，但这样做实际上没有价值。一个列中的最小值和最大值不管是否包含不同值都是相同的。</p><h3 id="组合聚集函数"><a href="#组合聚集函数" class="headerlink" title="组合聚集函数"></a>组合聚集函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(`tuition`)            <span class="keyword">AS</span> avg_tuition,</span><br><span class="line">       <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> `tuition`) <span class="keyword">AS</span> count_tuition</span><br><span class="line"><span class="keyword">FROM</span> `admission_info`;</span><br></pre></td></tr></table></figure><hr><h2 id="分组数据"><a href="#分组数据" class="headerlink" title="分组数据"></a>分组数据</h2><p>数据准备</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `goods`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `goods`</span><br><span class="line">(</span><br><span class="line">    `id`          <span class="type">bigint</span>(<span class="number">0</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">    `goods_name`  <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品名称&#x27;</span>,</span><br><span class="line">    `supplier`    <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;供货商&#x27;</span>,</span><br><span class="line">    `category_id` <span class="type">int</span>(<span class="number">0</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品种类&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">    KEY           `key_category_id` (`category_id`) <span class="keyword">USING</span> BTREE COMMENT <span class="string">&#x27;分类id索引&#x27;</span></span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of goods</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `goods`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;拖鞋&#x27;</span>, <span class="string">&#x27;网易优选&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `goods`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;卫衣&#x27;</span>, <span class="string">&#x27;淘宝&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `goods`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;羽绒服&#x27;</span>, <span class="string">&#x27;天猫&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `goods`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;卫龙&#x27;</span>, <span class="string">&#x27;美团&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `category`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `category`</span><br><span class="line">(</span><br><span class="line">    `id`            <span class="type">bigint</span>(<span class="number">0</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">    `category_name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分类名称&#x27;</span>,</span><br><span class="line">    `category_desc` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_0900_ai_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;分类描述&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8mb4 <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8mb4_0900_ai_ci ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of category</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `category`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;鞋&#x27;</span>, <span class="string">&#x27;运动&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `category`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;衣服&#x27;</span>, <span class="string">&#x27;保暖&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `category`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;零食&#x27;</span>, <span class="string">&#x27;嘎嘎香&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="创建分组"><a href="#创建分组" class="headerlink" title="创建分组"></a>创建分组</h3><p>分组是在<code>SELECT</code> 语句的<code>GROUP BY</code> 子句中建立的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> category_id,</span><br><span class="line">       <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">AS</span> count_category</span><br><span class="line"><span class="keyword">FROM</span> goods</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> category_id</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">11</span><br><span class="line">22</span><br><span class="line">31</span><br></pre></td></tr></table></figure><ul><li>按照姓氏分组</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(`name`, <span class="number">1</span>, <span class="number">1</span>) <span class="keyword">AS</span> first_name,</span><br><span class="line">       <span class="built_in">count</span>(<span class="operator">*</span>)                <span class="keyword">AS</span> count_name</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> first_name;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">张  <span class="number">1</span></span><br><span class="line">李<span class="number">1</span></span><br><span class="line">王<span class="number">2</span></span><br><span class="line">赵<span class="number">1</span></span><br><span class="line">付<span class="number">4</span></span><br></pre></td></tr></table></figure><p><code>GROUP BY</code> 子句指示MySQL分组数据，然后对每个组而不是整个结果集进行聚集。</p><p>在具体使用<code>GROUP BY</code> 子句前，需要知道一些重要的规定。</p><ul><li><code>GROUP BY</code> 子句可以包含任意数目的列。这使得能对分组进行嵌套，为数据分组提供更细致的控制。</li><li>如果在<code>GROUP BY</code> 子句中嵌套了分组，数据将在最后规定的分组上进行汇总。换句话说，在建立分组时，指定的所有列都一起计算（所以不能从个别的列取回数据）。</li><li><code>GROUP BY</code> 子句中列出的每个列都必须是检索列或有效的表达式（<strong>但不能是聚集函数</strong>）。如果在<code>SELECT</code><br>中使用表达式，则必须在<code>GROUP BY</code> 子句中指定相同的表达式。不能使用别名。</li><li>除聚集计算语句外，<code>SELECT</code> 语句中的每个列都必须在<code>GROUP BY</code> 子句中给出。</li><li>如果分组列中具有<code>NULL</code> 值，则<code>NULL</code> 将作为一个分组返回。如果列中有多行<code>NULL</code>值，它们将分为一组。</li><li><code>GROUP BY</code> 子句必须出现在<code>WHERE</code> 子句之后，<code>ORDER BY</code> 子句之前。</li></ul><p><strong>使用<code>ROLLUP</code></strong></p><p>使用<code>WITH ROLLUP</code> 关键字，可以得到每个分组以及每个分组汇总级别（针对每个分组）的值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> category_id,</span><br><span class="line">       <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">AS</span> count_category</span><br><span class="line"><span class="keyword">FROM</span> goods</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> category_id <span class="keyword">WITH</span> <span class="keyword">ROLLUP</span></span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">11</span><br><span class="line">22</span><br><span class="line">31</span><br><span class="line">null4</span><br></pre></td></tr></table></figure><h3 id="过滤分组"><a href="#过滤分组" class="headerlink" title="过滤分组"></a>过滤分组</h3><p><code>HAVING</code> 非常类似于<code>WHERE</code> 。事实上，目前为止所学过的所有类型的<code>WHERE</code> 子句都可以用<code>HAVING</code> 来替代。唯一的差别是<code>WHERE</code><br>过滤行，而<code>HAVING</code> 过滤分组。</p><p><strong><code>HAVING</code> 和<code>WHERE</code> 的差别</strong></p><p>这里有另一种理解方法，<code>WHERE</code> 在数据分组前进行过滤，<code>HAVING</code> 在数据分组后进行过滤。这是一个重要的区别，<code>WHERE</code><br>排除的行不包括在分组中。这可能会改变计算值，从而影响<code>HAVING</code> 子句中基于这些值过滤掉的分组。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> category_id,</span><br><span class="line">       <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">AS</span> count_category</span><br><span class="line"><span class="keyword">FROM</span> goods</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> category_id</span><br><span class="line"><span class="keyword">HAVING</span> category_id <span class="operator">&gt;</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">#</span><br><span class="line">demo <span class="number">2</span></span><br><span class="line"><span class="keyword">SELECT</span> category_id,</span><br><span class="line">       <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">AS</span> count_category</span><br><span class="line"><span class="keyword">FROM</span> goods</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> category_id # 不可使用别名</span><br><span class="line"><span class="keyword">HAVING</span></span><br><span class="line">    count_category</span><br><span class="line">     <span class="operator">&gt;</span> <span class="number">1</span>;</span><br><span class="line">#</span><br><span class="line">可以使用别名</span><br></pre></td></tr></table></figure><blockquote><p>HAVING的条件只可能使用选择列或表达式列，包括聚集函数（select后面的）</p></blockquote><p><strong><code>HAVING</code> 和<code>WHERE</code>组合</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> category_id,</span><br><span class="line">       <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">AS</span> count_category</span><br><span class="line"><span class="keyword">FROM</span> goods</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">&lt;</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> category_id</span><br><span class="line"><span class="keyword">HAVING</span> category_id <span class="operator">&gt;</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="分组和排序"><a href="#分组和排序" class="headerlink" title="分组和排序"></a>分组和排序</h3><p>虽然<code>GROUP BY</code> 和<code>ORDER BY</code> 经常完成相同的工作，但它们是非常不同的。</p><p><strong><code>ORDER BY</code> 与<code>GROUP BY</code></strong></p><table><thead><tr><th align="center"><code>ORDER BY</code></th><th align="center"><code>GROUP BY</code></th></tr></thead><tbody><tr><td align="center">排序产生的输出</td><td align="center">分组行。但输出可能不是分组的顺序</td></tr><tr><td align="center">任意列都可以使用（甚至非选择的列也可以使用）</td><td align="center">只可能使用选择列或表达式列，而且必须使用每个选择列表达式</td></tr><tr><td align="center">不一定需要</td><td align="center">如果与聚集函数一起使用列（或表达式），则必须使用</td></tr></tbody></table><p><strong>不要忘记<code>ORDER BY</code></strong></p><p>一般在使用<code>GROUP BY</code> 子句时，应该也给出<code>ORDER BY</code> 子句。这是保证数据正确排序的唯一方法。千万不要仅依赖<code>GROUP BY</code> 排序数据。</p><p>我们经常发现用<code>GROUP BY</code><br>分组的数据确实是以分组顺序输出的。但情况并不总是这样，它并不是SQL规范所要求的。此外，用户也可能会要求以不同于分组的顺序排序。仅因为你以某种方式分组数据（获得特定的分组聚集值），并不表示你需要以相同的方式排序输出。应该提供明确的<code>ORDER BY</code><br>子句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">SUBSTRING</span>(`name`, <span class="number">1</span>, <span class="number">1</span>) <span class="keyword">AS</span> first_name,</span><br><span class="line">       <span class="built_in">count</span>(<span class="operator">*</span>)                <span class="keyword">AS</span> count_name</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> first_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> count_name <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">付4</span><br><span class="line">王2</span><br><span class="line">张1</span><br><span class="line">李1</span><br><span class="line">赵1</span><br></pre></td></tr></table></figure><h3 id="SELECT子句顺序"><a href="#SELECT子句顺序" class="headerlink" title="SELECT子句顺序"></a>SELECT子句顺序</h3><p><strong><code>SELECT</code> 子句及其顺序</strong></p><table><thead><tr><th align="center">子 句</th><th align="center">说 明</th><th align="center">是否必须使用</th></tr></thead><tbody><tr><td align="center"><code>SELECT</code></td><td align="center">要返回的列或表达式</td><td align="center">是</td></tr><tr><td align="center"><code>FROM</code></td><td align="center">从中检索数据的表</td><td align="center">仅在从表选择数据时使用</td></tr><tr><td align="center"><code>WHERE</code></td><td align="center">行级过滤</td><td align="center">否</td></tr><tr><td align="center"><code>GROUP BY</code></td><td align="center">分组说明</td><td align="center">仅在按组计算聚集时使用</td></tr><tr><td align="center"><code>HAVING</code></td><td align="center">组级过滤</td><td align="center">否</td></tr><tr><td align="center"><code>ORDER BY</code></td><td align="center">输出排序顺序</td><td align="center">否</td></tr><tr><td align="center"><code>LIMIT</code></td><td align="center">要检索的行数</td><td align="center">否</td></tr></tbody></table><p><strong>SQL语句执行顺序</strong>: <strong>FROM、ON 、JOIN、WHERE、GROUP BY、AGG_FUNC、WITH、HAVING、SELECT、UNION、DISTINCT 、ORDER BY、LIMIT。</strong></p><hr><h2 id="使用子查询"><a href="#使用子查询" class="headerlink" title="使用子查询"></a>使用子查询</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> goods_name,</span><br><span class="line">       supplier</span><br><span class="line"><span class="keyword">FROM</span> goods</span><br><span class="line"><span class="keyword">WHERE</span> supplier <span class="keyword">IN</span> (<span class="keyword">SELECT</span> supplier</span><br><span class="line">                   <span class="keyword">FROM</span> goods</span><br><span class="line">                   <span class="keyword">WHERE</span> category_id <span class="operator">=</span> <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><strong>列必须匹配</strong></p><p>在<code>WHERE</code> 子句中使用子查询（如这里所示），应该保证<code>SELECT</code>语句具有与<code>WHERE</code> 子句中相同数目的列。通常，子查询将返回单个列并且与单个列匹配，但如果需要也可以使用多个列。</p><p>虽然子查询一般与<code>IN</code> 操作符结合使用，但也可以用于测试等于（<code>=</code> ）、不等于（<code>&lt;</code>）等。</p><h3 id="作为计算字段使用子查询"><a href="#作为计算字段使用子查询" class="headerlink" title="作为计算字段使用子查询"></a>作为计算字段使用子查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>, (<span class="keyword">SELECT</span> category_desc <span class="keyword">FROM</span> category <span class="keyword">WHERE</span> category.id <span class="operator">=</span> goods.category_id) <span class="keyword">AS</span> category_desc</span><br><span class="line"><span class="keyword">FROM</span> goods;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1拖鞋  网易优选1运动</span><br><span class="line">2卫衣  淘宝 2 保暖</span><br><span class="line">3羽绒服  天猫     2保暖</span><br><span class="line">4卫龙  美团 3 嘎嘎香</span><br></pre></td></tr></table></figure><p><strong>逐渐增加子查询来建立查询</strong></p><p>用子查询测试和调试查询很有技巧性，特别是在这些语句的复杂性不断增加的情况下更是如此。用子查询建立（和测试）查询的最可靠的方法是逐渐进行，这与MySQL处理它们的方法非常相同。</p><p>首先，建立和测试最内层的查询。然后，用硬编码数据建立和测试外层查询，并且仅在确认它正常后才嵌入子查询。这时，再次测试它。对于要增加的每个查询，重复这些步骤。这样做仅给构造查询增加了一点点时间，但节省了以后（找出查询为什么不正常）的大量时间，并且极大地提高了查询一开始就正常工作的可能性。</p><hr><h2 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h2><p>SQL最强大的功能之一就是能在数据检索查询的执行中联结（join）表。</p><p><strong>外键（foreignkey）</strong></p><p>外键为某个表中的一列，它包含另一个表的主键值，定义了两个表之间的关系。</p><p>这样做的好处如下：</p><ul><li>信息不重复，从而不浪费时间和空间；</li><li>如果信息变动，可以只更新某个表中的单个记录，相关表中的数据不用改动；</li><li>由于数据无重复，显然数据是一致的，这使得处理数据更简单。</li></ul><p>总之，关系数据可以有效地存储和方便地处理。因此，关系数据库的可伸缩性远比非关系数据库要好。</p><p><strong>可伸缩性（scale）</strong></p><p>能够适应不断增加的工作量而不失败。设计良好的数据库或应用程序称之为<em>可伸缩性好</em> （scale well)。</p><h3 id="创建联结"><a href="#创建联结" class="headerlink" title="创建联结"></a>创建联结</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> goods_name,</span><br><span class="line">       category_desc</span><br><span class="line"><span class="keyword">FROM</span> goods,</span><br><span class="line">     category</span><br><span class="line"><span class="keyword">WHERE</span> category.id <span class="operator">=</span> goods.category_id;</span><br></pre></td></tr></table></figure><p><strong>完全限定列名</strong></p><p>在引用的列可能出现二义性时，必须使用完全限定列名（用一个点分隔的表名和列名）。如果引用一个没有用表名限制的具有二义性的列名，MySQL将返回错误。</p><h4 id="WHERE-子句的重要性"><a href="#WHERE-子句的重要性" class="headerlink" title="WHERE 子句的重要性"></a><strong><code>WHERE</code> 子句的重要性</strong></h4><p>将第一个表中的每一行与第二个表中的每一行配对。<code>WHERE</code><br>子句作为过滤条件，它只包含那些匹配给定条件（这里是联结条件）的行。没有<code>WHERE</code> 子句，第一个表中的每个行将与第二个表中的每个行配对，而不管它们逻辑上是否可以配在一起。</p><h4 id="笛卡儿积（cartesianproduct）"><a href="#笛卡儿积（cartesianproduct）" class="headerlink" title="笛卡儿积（cartesianproduct）"></a><strong>笛卡儿积（cartesianproduct）</strong></h4><p>由没有联结条件的表关系返回的结果为笛卡儿积。检索出的行的数目将是第一个表中的行数乘以第二个表中的行数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> goods_name,</span><br><span class="line">       category_desc</span><br><span class="line"><span class="keyword">FROM</span> goods,</span><br><span class="line">     category;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">拖鞋嘎嘎香</span><br><span class="line">拖鞋保暖</span><br><span class="line">拖鞋运动</span><br><span class="line">卫衣嘎嘎香</span><br><span class="line">卫衣保暖</span><br><span class="line">卫衣运动</span><br><span class="line">羽绒服嘎嘎香</span><br><span class="line">羽绒服保暖</span><br><span class="line">羽绒服运动</span><br><span class="line">卫龙嘎嘎香</span><br><span class="line">卫龙保暖</span><br><span class="line">卫龙运动</span><br></pre></td></tr></table></figure><h3 id="内部联结"><a href="#内部联结" class="headerlink" title="内部联结"></a><strong>内部联结</strong></h3><p>目前为止所用的联结称为<em>等值联结</em> （equijoin），它基于两个表之间的相等测试。这种联结也称为内部联结。其实，对于这种联结可以使用稍微不同的语法来明确指定联结的类型。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> goods_name,</span><br><span class="line">       category_desc</span><br><span class="line"><span class="keyword">FROM</span> goods</span><br><span class="line">         <span class="keyword">INNER</span> <span class="keyword">JOIN</span> category <span class="keyword">ON</span> category.id <span class="operator">=</span> goods.category_id;    </span><br></pre></td></tr></table></figure><h3 id="联结多个表"><a href="#联结多个表" class="headerlink" title="联结多个表"></a><strong>联结多个表</strong></h3><p>QL对一条<code>SELECT</code> 语句中可以联结的表的数目没有限制。创建联结的基本规则也相同。首先列出所有表，然后定义表之间的关系。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> goods_name,</span><br><span class="line">       category_desc</span><br><span class="line"><span class="keyword">FROM</span> goods,</span><br><span class="line">     category, ...</span><br><span class="line">    <span class="keyword">where</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><strong>性能考虑</strong></p><p>MySQL在运行时关联指定的每个表以处理联结。这种处理可能是非常耗费资源的，因此应该仔细，不要联结不必要的表。联结的表越多，性能下降越厉害。</p><p><strong>多做实验</strong></p><p>正如所见，为执行任一给定的SQL操作，一般存在不止一种方法。很少有绝对正确或绝对错误的方法。性能可能会受操作类型、表中数据量、是否存在索引或键以及其他一些条件的影响。因此，有必要对不同的选择机制进行实验，以找出最适合具体情况的方法。</p><hr><h2 id="创建高级联结"><a href="#创建高级联结" class="headerlink" title="创建高级联结"></a>创建高级联结</h2><h3 id="使用表别名"><a href="#使用表别名" class="headerlink" title="使用表别名"></a>使用表别名</h3><p>表别名不仅能用于<code>WHERE</code> 子句，它还可以用于<code>SELECT</code> 的列表、<code>ORDER BY</code> 子句以及语句的其他部分。应该注意，表别名只在查询执行中使用。与列别名不一样，表别名不返回到客户机。</p><h3 id="使用不同类型的联结"><a href="#使用不同类型的联结" class="headerlink" title="使用不同类型的联结"></a>使用不同类型的联结</h3><h4 id="自联结"><a href="#自联结" class="headerlink" title="自联结"></a><strong>自联结</strong></h4><p>之前案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> goods_name,</span><br><span class="line">       supplier</span><br><span class="line"><span class="keyword">FROM</span> goods</span><br><span class="line"><span class="keyword">WHERE</span> supplier <span class="keyword">IN</span> (<span class="keyword">SELECT</span> supplier</span><br><span class="line">                   <span class="keyword">FROM</span> goods</span><br><span class="line">                   <span class="keyword">WHERE</span> category_id <span class="operator">=</span> <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>自联结写法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> g1.goods_name,</span><br><span class="line">       g1.supplier,</span><br><span class="line">       g1.category_id</span><br><span class="line"><span class="keyword">FROM</span> goods <span class="keyword">AS</span> g1,</span><br><span class="line">     goods <span class="keyword">AS</span> g2</span><br><span class="line"><span class="keyword">WHERE</span> g1.supplier <span class="operator">=</span> g2.supplier</span><br><span class="line">  <span class="keyword">AND</span> g2.category_id <span class="operator">=</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><strong>用自联结而不用子查询</strong></p><p>自联结通常作为外部语句用来替代从相同表中检索数据时使用的子查询语句。虽然最终的结果是相同的，但有时候处理联结远比处理子查询快得多。应该试一下两种方法，以确定哪一种的性能更好。</p><h4 id="自然联结"><a href="#自然联结" class="headerlink" title="自然联结"></a><strong>自然联结</strong></h4><p><em>自然联结</em> 排除多次出现，使每个列只返回一次。怎样完成这项工作呢？答案是，系统不完成这项工作，由你自己完成它。</p><p>自然联结是这样一种联结，其中你只能选择那些唯一的列。这一般是通过对表使用通配符（<code>SELECT*</code> ），对所有其他表的列使用明确的子集来完成的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> g.<span class="operator">*</span>,</span><br><span class="line">       c.category_desc</span><br><span class="line"><span class="keyword">FROM</span> goods <span class="keyword">AS</span> g,</span><br><span class="line">     category <span class="keyword">AS</span> c</span><br><span class="line"><span class="keyword">WHERE</span> g.category_id <span class="operator">=</span> c.id</span><br></pre></td></tr></table></figure><p>事实上，迄今为止我们建立的每个内部联结都是自然联结，很可能我们永远都不会用到不是自然联结的内部联结。</p><h4 id="外部联结"><a href="#外部联结" class="headerlink" title="外部联结"></a>外部联结</h4><p>与内部联结关联两个表中的行不同的是，外部联结还包括没有关联行的行。在使用<code>OUTER JOIN</code> 语法时，必须使用<code>RIGHT</code> 或<code>LEFT</code><br>关键字指定包括其所有行的表（<code>RIGHT</code> 指出的是<code>OUTER JOIN</code> 右边的表，而<code>LEFT</code> 指出的是<code>OUTER JOIN</code> 左边的表）。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> goods_name,</span><br><span class="line">       category_desc</span><br><span class="line"><span class="keyword">FROM</span> goods</span><br><span class="line">         <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> category <span class="keyword">ON</span> category.id <span class="operator">=</span> goods.category_id;</span><br></pre></td></tr></table></figure><p><strong>外部联结的类型</strong></p><p>存在两种基本的外部联结形式：左外部联结和右外部联结。它们之间的唯一差别是所关联的表的顺序不同。换句话说，左外部联结可通过颠倒<code>FROM</code><br>或<code>WHERE</code> 子句中表的顺序转换为右外部联结。因此，两种类型的外部联结可互换使用，而究竟使用哪一种纯粹是根据方便而定。</p><p><strong>没有<code>*=</code> 操作符</strong></p><p>MySQL不支持简化字符<code>*=</code> 和<code>=*</code> 的使用，这两种操作符在其他DBMS中是很流行的。</p><hr><h2 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h2><p>多数SQL查询都只包含从一个或多个表中返回数据的单条<code>SELECT</code> 语句。MySQL也允许执行多个查询（多条<code>SELECT</code><br>语句），并将结果作为单个查询结果集返回。这些组合查询通常称为并（union）或复合查询（compoundquery）。</p><p>有两种基本情况，其中需要使用组合查询：</p><ul><li>在单个查询中从不同的表返回类似结构的数据；</li><li>对单个表执行多个查询，按单个查询返回数据。</li></ul><p><strong>组合查询和多个<code>WHERE</code> 条件</strong></p><p>多数情况下，组合相同表的两个查询完成的工作与具有多个<code>WHERE</code> 子句条件的单条查询完成的工作相同。换句话说，任何具有多个<code>WHERE</code><br>子句的<code>SELECT</code> 语句都可以作为一个组合查询给出，在以下段落中可以看到这一点。这两种技术在不同的查询中性能也不同。因此，应该试一下这两种技术，以确定对特定的查询哪一种性能更好。</p><h3 id="创建组合查询"><a href="#创建组合查询" class="headerlink" title="创建组合查询"></a>创建组合查询</h3><h4 id="使用UNION"><a href="#使用UNION" class="headerlink" title="使用UNION"></a><strong>使用<code>UNION</code></strong></h4><p><code>UNION</code> 的使用很简单。所需做的只是给出每条<code>SELECT</code> 语句，在各条语句之间放上关键字<code>UNION</code> 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> goods</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">&gt;</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> goods</span><br><span class="line"><span class="keyword">WHERE</span> category_id <span class="operator">&lt;</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p><code>UNION</code> 从查询结果集中自动去除了重复的行（换句话说，它的行为与单条<code>SELECT</code> 语句中使用多个<code>WHERE</code> 子句条件一样）。</p><p>在使用<code>UNION</code> 时，重复的行被自动取消。这是<code>UNION</code><br>的默认行为，但是如果需要，可以改变它。事实上，如果想返回所有匹配行，可使用<code>UNION ALL</code> 而不是<code>UNION</code> 。</p><p>有几条规则需要注意</p><ul><li><code>UNION</code> 必须由两条或两条以上的<code>SELECT</code> 语句组成，语句之间用关键字<code>UNION</code>分隔（因此，如果组合4条<code>SELECT</code><br>语句，将要使用3个<code>UNION</code> 关键字）。</li><li><code>UNION</code> 中的每个查询必须包含相同的列、表达式或聚集函数（不过各个列不需要以相同的次序列出）。</li><li>列数据类型必须兼容：类型不必完全相同，但必须是DBMS可以隐含地转换的类型（例如，不同的数值类型或不同的日期类型）。</li></ul><p><strong><code>NION</code> 与<code>WHERE</code></strong></p><p><code>UNION</code> 几乎总是完成与多个<code>WHERE</code> 条件相同的工作。<code>UNION ALL</code> 为<code>UNION</code> 的一种形式，它完成<code>WHERE</code><br>子句完成不了的工作。如果确实需要每个条件的匹配行全部出现（包括重复行），则必须使用<code>UNION ALL</code> 而不是<code>WHERE</code> 。</p><h3 id="对组合查询结果排序"><a href="#对组合查询结果排序" class="headerlink" title="对组合查询结果排序"></a><strong>对组合查询结果排序</strong></h3><p><code>SELECT</code> 语句的输出用<code>ORDER BY</code> 子句排序。在用<code>UNION</code> 组合查询时，只能使用一条<code>ORDER BY</code> 子句，它必须出现在最后一条<code>SELECT</code><br>语句之后。</p><p>对于结果集，不存在用一种方式排序一部分，而又用另一种方式排序另一部分的情况，因此不允许使用多条<code>ORDER BY</code> 子句。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> goods</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">&gt;</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> goods</span><br><span class="line"><span class="keyword">WHERE</span> category_id <span class="operator">&lt;</span> <span class="number">3</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> id;</span><br></pre></td></tr></table></figure><hr><h2 id="全文本搜索"><a href="#全文本搜索" class="headerlink" title="全文本搜索"></a><strong>全文本搜索</strong></h2><h3 id="并非所有引擎都支持全文本搜索"><a href="#并非所有引擎都支持全文本搜索" class="headerlink" title="并非所有引擎都支持全文本搜索"></a><strong>并非所有引擎都支持全文本搜索</strong></h3><p>MySQL支持几种基本的数据库引擎。并非所有的引擎都支持本书所描述的全文本搜索。两个最常使用的引擎为<code>MyISAM</code> 和<code>InnoDB</code><br>，前者支持全文本搜索，而后者不支持。</p><ul><li><p><code>LIKE</code> 关键字，它利用通配操作符匹配文本（和部分文本）。使用<code>LIKE</code>，能够查找包含特殊值或部分值的行（不管这些值位于列内什么位置）。</p></li><li><p>使用正则表达式，可以编写查找所需行的非常复杂的匹配模式。</p></li></ul><p>虽然这些搜索机制非常有用，但存在几个重要的限制。</p><ul><li>性能：通配符和正则表达式匹配通常要求MySQL尝试匹配表中所有行（而且这些搜索极少使用表索引）。因此，由于被搜索行数不断增加，这些搜索可能非常耗时。</li><li>明确控制：使用通配符和正则表达式匹配，很难（而且并不总是能）明确地控制匹配什么和不匹配什么。例如，指定一个词必须匹配，一个词必须不匹配，而一个词仅在第一个词确实匹配的情况下才可以匹配或者才可以不匹配。</li><li>智能化的结果：虽然基于通配符和正则表达式的搜索提供了非常灵活的搜索，但它们都不能提供一种智能化的选择结果的方法。例如，一个特殊词的搜索将会返回包含该词的所有行，而不区分包含单个匹配的行和包含多个匹配的行（按照可能是更好的匹配来排列它们）。类似，一个特殊词的搜索将不会找出不包含该词但包含其他相关词的行。</li></ul><p>所有这些限制以及更多的限制都可以用全文本搜索来解决。在使用全文本搜索时，MySQL不需要分别查看每个行，不需要分别分析和处理每个词。MySQL创建指定列中各词的一个索引，搜索可以针对这些词进行。这样，MySQL可以快速有效地决定哪些词匹配（哪些行包含它们），哪些词不匹配，它们匹配的频率，等等。</p><blockquote><p>未完待续。。。</p></blockquote><hr><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><p><code>INSERT</code> 是用来插入（或添加）行到数据库表的。插入可以用几种方式使用：</p><ul><li>插入完整的行；</li><li>插入行的一部分；</li><li>插入多行；</li><li>插入某些查询的结果。</li></ul><p><strong>插入及系统安全</strong></p><p>可针对每个表或每个用户，利用MySQL的安全机制禁止使用<code>INSERT</code> 语句。</p><h3 id="插入完整的行"><a href="#插入完整的行" class="headerlink" title="插入完整的行"></a>插入完整的行</h3><p>简单写法【不推荐】</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> news</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="keyword">NULL</span>,</span><br><span class="line">        <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;b&#x27;</span>)</span><br></pre></td></tr></table></figure><p>各个列必须以它们在表定义中出现的次序填充。第一列<code>id</code> 也为<code>NULL</code><br>。这是因为每次插入一个新行时，该列由MySQL自动增量。你不想给出一个值（这是MySQL的工作），又不能省略此列（如前所述，必须给出每个列），所以指定一个<code>NULL</code><br>值（它被MySQL忽略，MySQL在这里插入下一个可用的<code>id</code> 值）</p><p>推荐写法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> news (news_title, news_desc)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;d&#x27;</span>)</span><br></pre></td></tr></table></figure><p>因为提供了列名，<code>VALUES</code> 必须以其指定的次序匹配指定的列名，不一定按各个列出现在实际表中的次序。</p><p>其优点是，即使表的结构改变，此<code>INSERT</code> 语句仍然能正确工作。你会发现<code>id</code> 的<code>NULL</code> 值是不必要的，<code>id</code> 列并没有出现在列表中，所以不需要任何值。</p><p><strong>总是使用列的列表</strong></p><p>一般不要使用没有明确给出列的列表的<code>INSERT</code> 语句。使用列的列表能使SQL代码继续发挥作用，即使表结构发生了变化。</p><p><strong>仔细地给出值</strong></p><p>不管使用哪种<code>INSERT</code> 语法，都必须给出<code>VALUES</code><br>的正确数目。如果不提供列名，则必须给每个表列提供一个值。如果提供列名，则必须对每个列出的列给出一个值。如果不这样，将产生一条错误消息，相应的行插入不成功。</p><p><strong>省略列</strong> 如果表的定义允许，则可以在INSERT操作中省略某些列。省略的列必须满足以下某个条件。</p><ul><li>该列定义为允许<code>NULL</code> 值（无值或空值）。</li><li>在表定义中给出默认值。这表示如果不给出值，将使用默认值。</li></ul><p>如果对表中不允许<code>NULL</code> 值且没有默认值的列不给出值，则MySQL将产生一条错误消息，并且相应的行插入不成功。</p><h3 id="插入多个行"><a href="#插入多个行" class="headerlink" title="插入多个行"></a>插入多个行</h3><p>可以使用多条<code>INSERT</code> 语句，甚至一次提交它们，每条语句用一个分号结束。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> news (news_title, news_desc)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;e&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;e&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> news (news_title, news_desc)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;e&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;e&#x27;</span>);</span><br></pre></td></tr></table></figure><p>或者，只要每条<code>INSERT</code> 语句中的列名（和次序）相同，可以如下组合各语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> news (news_title, news_desc)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;f&#x27;</span>),</span><br><span class="line">       (<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;f&#x27;</span>);</span><br></pre></td></tr></table></figure><p>其中单条<code>INSERT</code> 语句有多组值，每组值用一对圆括号括起来，用逗号分隔。</p><p><strong>提高INSERT的性能</strong>：此技术可以提高数据库处理的性能，因为MySQL用单条<code>INSERT</code> 语句处理多个插入比使用多条<code>INSERT</code> 语句快。</p><h3 id="插入检索出的数据"><a href="#插入检索出的数据" class="headerlink" title="插入检索出的数据"></a>插入检索出的数据</h3><p><code>INSERT SELECT</code> ，顾名思义，它是由一条<code>INSERT</code> 语句和一条<code>SELECT</code> 语句组成的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> news (news_title, news_desc)</span><br><span class="line"><span class="keyword">SELECT</span> news_title,</span><br><span class="line">       news_desc</span><br><span class="line"><span class="keyword">FROM</span> news</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">&gt;</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="INSERT-SELECT-中的列名"><a href="#INSERT-SELECT-中的列名" class="headerlink" title="INSERT SELECT 中的列名"></a><strong><code>INSERT SELECT</code> 中的列名</strong></h4><p>为简单起见，这个例子在<code>INSERT</code> 和<code>SELECT</code> 语句中使用了相同的列名。但是，不一定要求列名匹配。</p><p>事实上，MySQL甚至不关心<code>SELECT</code> 返回的列名。它使用的是列的位置，因此<code>SELECT</code><br>中的第一列（不管其列名）将用来填充表列中指定的第一个列，第二列将用来填充表列中指定的第二个列，如此等等。这对于从使用不同列名的表中导入数据是非常有用的。</p><p><code>INSERT SELECT</code> 中<code>SELECT</code> 语句可包含<code>WHERE</code> 子句以过滤插入的数据。</p><h2 id="更新和删除数据"><a href="#更新和删除数据" class="headerlink" title="更新和删除数据"></a>更新和删除数据</h2><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>为了更新（修改）表中的数据，可使用<code>UPDATE</code> 语句。可采用两种方式使用<code>UPDATE</code>：</p><ul><li>更新表中特定行；</li><li>更新表中所有行。</li></ul><p>基本的<code>UPDATE</code> 语句由3部分组成，分别是：</p><ul><li>要更新的表；</li><li>列名和它们的新值；</li><li>确定要更新行的过滤条件。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> news</span><br><span class="line"><span class="keyword">SET</span> news_title <span class="operator">=</span> <span class="string">&#x27;d&#x27;</span>,</span><br><span class="line">    news_desc  <span class="operator">=</span> <span class="string">&#x27;d&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">11</span>;</span><br></pre></td></tr></table></figure><p><strong>在<code>UPDATE</code> 语句中使用子查询</strong></p><p><code>UPDATE</code> 语句中可以使用子查询，使得能用<code>SELECT</code> 语句检索出的数据更新列数据。</p><p><strong><code>IGNORE</code> 关键字</strong></p><p>如果用<code>UPDATE</code> 语句更新多行，并且在更新这些行中的一行或多行时出一个现错误，则整个<code>UPDATE</code><br>操作被取消（错误发生前更新的所有行被恢复到它们原来的值）。为即使是发生错误，也继续进行更新，可使用<code>IGNORE</code>关键字</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> IGNORE news ... </span><br></pre></td></tr></table></figure><p>为了删除某个列的值，可设置它为<code>NULL</code> （假如表定义允许<code>NULL</code> 值）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> news</span><br><span class="line">    news_desc <span class="operator">=</span> <span class="keyword">NULL</span></span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    id <span class="operator">=</span> <span class="number">11</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a><strong>删除数据</strong></h3><p>为了从一个表中删除（去掉）数据，使用<code>DELETE</code> 语句。可以两种方式使用<code>DELETE</code>：</p><ul><li>从表中删除特定的行；</li><li>从表中删除所有行。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> news</span><br><span class="line"><span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p><strong>更快的删除</strong></p><p>如果想从表中删除所有行，不要使用<code>DELETE</code> 。可使用<code>TRUNCATE TABLE</code> 语句，它完成相同的工作，但速度更快（<code>TRUNCATE</code><br>实际是删除原来的表并重新创建一个表，而不是逐行删除表中的数据）[<strong>慎用</strong>]</p><p>使用<code>UPDATE</code> 或<code>DELETE</code> 时应遵循的习惯。</p><ul><li>除非确实打算更新和删除每一行，否则绝对不要使用不带<code>WHERE</code> 子句的<code>UPDATE</code> 或<code>DELETE</code> 语句。</li><li>保证每个表都有主键，尽可能像<code>WHERE</code>子句那样使用它（可以指定各主键、多个值或值的范围）。</li><li>在对<code>UPDATE</code> 或<code>DELETE</code> 语句使用<code>WHERE</code> 子句前，应该先用<code>SELECT</code> 进行测试，保证它过滤的是正确的记录，以防编写的<code>WHERE</code><br>子句不正确。</li><li>使用强制实施引用完整性的数据库，这样MySQL将不允许删除具有与其他表相关联的数据的行。【在程序中应使用物理外键】</li></ul><h2 id="创建和操纵表"><a href="#创建和操纵表" class="headerlink" title="创建和操纵表"></a>创建和操纵表</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a><strong>创建表</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `words`</span><br><span class="line">(</span><br><span class="line">    `id`          <span class="type">bigint</span>       <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id (自增)&#x27;</span>,</span><br><span class="line">    `word`        <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;单词&#x27;</span>,</span><br><span class="line">    `description` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;介绍&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci COMMENT <span class="string">&#x27;单词表&#x27;</span>;</span><br></pre></td></tr></table></figure><h4 id="使用NULL-值"><a href="#使用NULL-值" class="headerlink" title="使用NULL 值"></a><strong>使用<code>NULL</code> 值</strong></h4><p><strong>理解<code>NULL</code></strong> 不要把<code>NULL</code> 值与空串相混淆。<code>NULL</code> 值是没有值，它不是空串。如果指定’’<br>（两个单引号，其间没有字符），这在<code>NOT NULL</code> 列中是允许的。空串是一个有效的值，它不是无值。<code>NULL</code> 值用关键字<code>NULL</code> 而不是空串指定。</p><h4 id="主键"><a href="#主键" class="headerlink" title="主键"></a><strong>主键</strong></h4><p>主键值必须唯一。即，表中的每个行必须具有唯一的主键值。如果主键使用单个列，则它的值必须唯一。如果使用多个列，则这些列的组合值必须唯一。</p><p>主键为其值唯一标识表中每个行的列。主键中只能使用不允许<code>NULL</code> 值的列。允许<code>NULL</code> 值的列不能作为唯一标识。</p><h4 id="使用AUTO-INCREMENT"><a href="#使用AUTO-INCREMENT" class="headerlink" title="使用AUTO_INCREMENT"></a><strong>使用<code>AUTO_INCREMENT</code></strong></h4><p><strong>覆盖<code>AUTO_INCREMENT</code></strong> 如果一个列被指定为<code>AUTO_INCREMENT</code> ，则它需要使用特殊的值吗？你可以简单地在<code>INSERT</code><br>语句中指定一个值，只要它是唯一的（至今尚未使用过）即可，该值将被用来替代自动生成的值。后续的增量将开始使用该手工插入的值。</p><p><strong>确定<code>AUTO_INCREMENT</code> 值</strong> 让MySQL生成（通过自动增量）主键的一个缺点是你不知道这些值都是谁。</p><h4 id="指定默认值"><a href="#指定默认值" class="headerlink" title="指定默认值"></a><strong>指定默认值</strong></h4><p>如果在插入行时没有给出值，MySQL允许指定此时使用的默认值。默认值用<code>CREATE TABLE</code> 语句的列定义中的DEFAULT关键字指定。</p><p><strong>不允许函数</strong> 与大多数DBMS不一样，MySQL不允许使用函数作为默认值，它只支持常量。</p><h4 id="引擎类型"><a href="#引擎类型" class="headerlink" title="引擎类型"></a><strong>引擎类型</strong></h4><p>为什么要发行多种引擎呢？因为它们具有各自不同的功能和特性，为不同的任务选择正确的引擎能获得良好的功能和灵活性。</p><p>以下是几个需要知道的引擎：</p><ul><li><code>InnoDB</code> 是一个可靠的事务处理引擎，它不支持全文本搜索；</li><li><code>MEMORY</code> 在功能等同于<code>MyISAM</code> ，但由于数据存储在内存（不是磁盘）中，速度很快（特别适合于临时表）；</li><li><code>MyISAM</code> 是一个性能极高的引擎，它支持全文本搜索，但不支持事务处理。</li></ul><p><strong>外键不能跨引擎</strong></p><p>引擎类型可以混用。但混用引擎类型有一个大缺陷。外键（用于强制实施引用完整性）不能跨引擎，即使用一个引擎的表不能引用具有使用不同引擎的表的外键。</p><h3 id="更新表"><a href="#更新表" class="headerlink" title="更新表"></a>更新表</h3><p>使用<code>ALTER TABLE</code> 更改表结构，必须给出下面的信息：</p><ul><li>在<code>ALTER TABLE</code> 之后给出要更改的表名（该表必须存在，否则将出错）；</li><li>所做更改的列表。</li></ul><p>给表添加一个列：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> words</span><br><span class="line">    <span class="keyword">ADD</span> mark <span class="type">varchar</span>(<span class="number">225</span>);</span><br></pre></td></tr></table></figure><p>定义外键：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> words</span><br><span class="line">    <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> fk_student_id <span class="keyword">FOREIGN</span> KEY (id) <span class="keyword">REFERENCES</span> student (id);</span><br></pre></td></tr></table></figure><p><strong>小心使用<code>ALTER TABLE</code></strong></p><p>使用<code>ALTER TABLE</code> 要极为小心，应该在进行改动前做一个完整的备份（模式和数据的备份）。数据库表的更改不能撤销，如果增加了不需要的列，可能不能删除它们。类似地，如果删除了不应该删除的列，可能会丢失该列中的所有数据。</p><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><p>删除表没有确认，也不能撤销，执行这条语句将永久删除该表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> words;</span><br></pre></td></tr></table></figure><h3 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RENAME</span><br><span class="line"><span class="keyword">TABLE</span> words <span class="keyword">TO</span> words2;</span><br></pre></td></tr></table></figure><p>对多个表重命名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RENAME</span><br><span class="line"><span class="keyword">TABLE</span> words <span class="keyword">TO</span> words2,</span><br><span class="line">             news <span class="keyword">TO</span> news2;</span><br></pre></td></tr></table></figure><hr><h2 id="使用视图"><a href="#使用视图" class="headerlink" title="使用视图"></a>使用视图</h2><p>视图是虚拟的表。与包含数据的表不一样，视图只包含使用时动态检索数据的查询。</p><p>作为视图，它不包含表中应该有的任何列或数据，它包含的是一个SQL查询。</p><p>在视图创建之后，可以用与表基本相同的方式利用它们。可以对视图执行<code>SELECT</code> 操作，过滤和排序数据，将视图联结到其他视图或表，甚至能添加和更新数据（添加和更新数据存在某些限制。</p><h3 id="常见的应用"><a href="#常见的应用" class="headerlink" title="常见的应用"></a>常见的应用</h3><ul><li>重用SQL语句。</li><li>简化复杂的SQL操作。在编写查询后，可以方便地重用它而不必知道它的基本查询细节。</li><li>使用表的组成部分而不是整个表。</li><li>保护数据。可以给用户授予表的特定部分的访问权限而不是整个表的访问权限。</li><li>更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。</li></ul><p>视图仅仅是用来查看存储在别处的数据的一种设施。视图本身不包含数据，因此它们返回的数据是从其他表中检索出来的。在添加或更改这些表中的数据时，视图将返回改变过的数据。</p><h3 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a><strong>性能问题</strong></h3><p>因为视图不包含数据，所以每次使用视图时，都必须处理查询执行时所需的任一个检索。如果你用多个联结和过滤创建了复杂的视图或者嵌套了视图，可能会发现性能下降得很厉害。因此，在部署使用了大量视图的应用前，应该进行测试。</p><h3 id="视图的规则和限制"><a href="#视图的规则和限制" class="headerlink" title="视图的规则和限制"></a><strong>视图的规则和限制</strong></h3><p>下面是关于视图创建和使用的一些最常见的规则和限制。</p><ul><li>与表一样，视图必须唯一命名（不能给视图取与别的视图或表相同的名字）。</li><li>对于可以创建的视图数目没有限制。</li><li>为了创建视图，必须具有足够的访问权限。这些限制通常由数据库管理人员授予。</li><li>视图可以嵌套，即可以利用从其他视图中检索数据的查询来构造一个视图。</li><li><code>ORDER BY</code> 可以用在视图中，但如果从该视图检索数据<code>SELECT</code> 中也含有<code>ORDER BY</code> ，那么该视图中的<code>ORDER BY</code> 将被覆盖。</li><li>视图不能索引，也不能有关联的触发器或默认值。</li><li>视图可以和表一起使用。例如，编写一条联结表和视图的<code>SELECT</code> 语句。</li></ul><h3 id="使用视图-1"><a href="#使用视图-1" class="headerlink" title="使用视图"></a>使用视图</h3><h4 id="视图的创建"><a href="#视图的创建" class="headerlink" title="视图的创建"></a>视图的创建</h4><ul><li>视图用<code>CREATE VIEW</code> 语句来创建。</li><li>使用<code>SHOW CREATE VIEW viewname;</code> 来查看创建视图的语句。</li><li>用<code>DROP</code> 删除视图，其语法为<code>DROP VIEW viewname;</code> 。</li><li>更新视图时，可以先用<code>DROP</code> 再用<code>CREATE</code> ，也可以直接用<code>CREATE OR REPLACE VIEW</code><br>。如果要更新的视图不存在，则第2条更新语句会创建一个视图；如果要更新的视图存在，则第2条更新语句会替换原有视图。</li></ul><h4 id="利用视图简化复杂的联结"><a href="#利用视图简化复杂的联结" class="headerlink" title="利用视图简化复杂的联结"></a><strong>利用视图简化复杂的联结</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v_goods_category <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> goods_name,</span><br><span class="line">       category_desc</span><br><span class="line"><span class="keyword">FROM</span> goods,</span><br><span class="line">     category</span><br><span class="line"><span class="keyword">WHERE</span> category.id <span class="operator">=</span> goods.category_id;</span><br></pre></td></tr></table></figure><p>尝试查询数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> goods_name,</span><br><span class="line">       category_desc</span><br><span class="line"><span class="keyword">FROM</span> v_goods_category</span><br><span class="line"><span class="keyword">WHERE</span> goods_name <span class="keyword">LIKE</span> <span class="string">&#x27;卫%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>这条语句通过<code>WHERE</code> 子句从视图中检索特定数据。在MySQL处理此查询时，它将指定的<code>WHERE</code> 子句添加到视图查询中的已有<code>WHERE</code><br>子句中，以便正确过滤数据。</p><p>结果：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">卫衣保暖</span><br><span class="line">卫龙嘎嘎香</span><br></pre></td></tr></table></figure><h4 id="用视图过滤不想要的数据"><a href="#用视图过滤不想要的数据" class="headerlink" title="用视图过滤不想要的数据"></a><strong>用视图过滤不想要的数据</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v_student_no_fu <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;付%&#x27;</span>;</span><br></pre></td></tr></table></figure><p><strong><code>WHERE</code> 子句与<code>WHERE</code> 子句</strong> 如果从视图检索数据时使用了一条<code>WHERE</code> 子句，则两组子句（一组在视图中，另一组是传递给视图的）将自动组合。</p><h4 id="使用视图与计算字段"><a href="#使用视图与计算字段" class="headerlink" title="使用视图与计算字段"></a><strong>使用视图与计算字段</strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v_student_score <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`,</span><br><span class="line">       id <span class="operator">*</span> student_number <span class="keyword">AS</span> score</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;付%&#x27;</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="更新视图"><a href="#更新视图" class="headerlink" title="更新视图"></a><strong>更新视图</strong></h3><p>通常，视图是可更新的（即，可以对它们使用<code>INSERT</code> 、<code>UPDATE</code> 和<code>DELETE</code><br>）。更新一个视图将更新其基表（可以回忆一下，视图本身没有数据）。如果你对视图增加或删除行，实际上是对其基表增加或删除行。</p><p>但是，并非所有视图都是可更新的。基本上可以说，如果MySQL不能正确地确定被更新的基数据，则不允许更新（包括插入和删除）。这实际上意味着，如果视图定义中有以下操作，则不能进行视图的更新：</p><ul><li>分组（使用<code>GROUP BY</code> 和<code>HAVING</code> ）；</li><li>联结；</li><li>子查询；</li><li>并；</li><li>聚集函数（<code>Min()</code> 、<code>Count()</code> 、<code>Sum()</code> 等）；</li><li><code>DISTINCT</code> ；</li><li>导出（计算）列。</li></ul><p><strong>可能的变动</strong> 上面列出的限制自MySQL5以来是正确的。不过，未来的MySQL很可能会取消某些限制。</p><p><strong>将视图用于检索</strong> 一般，应该将视图用于检索（<code>SELECT</code> 语句）而不用于更新（<code>INSERT</code> 、<code>UPDATE</code> 和<code>DELETE</code> )。</p><hr><h2 id="使用存储过程"><a href="#使用存储过程" class="headerlink" title="使用存储过程"></a>使用存储过程</h2><blockquote><p>未完待续。。。</p></blockquote><h2 id="使用游标"><a href="#使用游标" class="headerlink" title="使用游标"></a>使用游标</h2><blockquote><p>未完待续。。。</p></blockquote><h2 id="使用触发器"><a href="#使用触发器" class="headerlink" title="使用触发器"></a>使用触发器</h2><blockquote><p>未完待续。。。</p></blockquote><hr><h2 id="管理事务处理"><a href="#管理事务处理" class="headerlink" title="管理事务处理"></a>管理事务处理</h2><p>关于事务处理需要知道的几个术语：</p><ul><li><strong>事务（transaction）</strong> 指一组SQL语句；</li><li><strong>回退（rollback）</strong> 指撤销指定SQL语句的过程；</li><li><strong>提交（commit）</strong> 指将未存储的SQL语句结果写入数据库表；</li><li><strong>保留点（savepoint）</strong> 指事务处理中设置的临时占位符（place-holder），你可以对它发布回退（与回退整个事务处理不同）。</li></ul><p>标识事务的开始</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br></pre></td></tr></table></figure><p><code>ROLLBACK</code> 命令用来回退（撤销）MySQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="comment">--- create</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v_student_score <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> `name`,</span><br><span class="line">       id <span class="operator">*</span> student_number <span class="keyword">AS</span> score</span><br><span class="line"><span class="keyword">FROM</span> student</span><br><span class="line"><span class="keyword">WHERE</span> `name` <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;付%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--- del</span></span><br><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> news;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ROLLBACK</span>;</span><br></pre></td></tr></table></figure><blockquote><p><code>ROLLBACK</code> 只能在一个事务处理内使用（在执行一条<code>START TRANSACTION</code> 命令之后）。</p></blockquote><h3 id="哪些语句可以回退"><a href="#哪些语句可以回退" class="headerlink" title="哪些语句可以回退"></a><strong>哪些语句可以回退</strong></h3><p>事务处理用来管理<code>INSERT</code> 、<code>UPDATE</code> 和<code>DELETE</code> 语句。你不能回退<code>SELECT</code> 语句。（这样做也没有什么意义。）</p><p>你不能回退<code>CREATE</code> 或<code>DROP</code> 操作。事务处理块中可以使用这两条语句，但如果你执行回退，它们不会被撤销。</p><h3 id="使用COMMIT"><a href="#使用COMMIT" class="headerlink" title="使用COMMIT"></a><strong>使用<code>COMMIT</code></strong></h3><p>一般的MySQL语句都是直接针对数据库表执行和编写的。这就是所谓的隐含提交（implicitcommit），即提交（写或保存）操作是自动进行的。</p><p>但是，在事务处理块中，提交不会隐含地进行。为进行明确的提交，使用<code>COMMIT</code> 语句，如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> `words`;</span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p><strong>隐含事务关闭</strong> 当<code>COMMIT</code> 或<code>ROLLBACK</code> 语句执行后，事务会自动关闭（将来的更改会隐含提交）。</p><h3 id="使用保留点"><a href="#使用保留点" class="headerlink" title="使用保留点"></a><strong>使用保留点</strong></h3><p>为了支持回退部分事务处理，必须能在事务处理块中合适的位置放置占位符。这样，如果需要回退，可以回退到某个占位符。这些占位符称为保留点。</p><p>每个保留点都取标识它的唯一名字，以便在回退时，MySQL知道要回退到何处。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"><span class="keyword">SAVEPOINT</span> delete_news_before;</span><br><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> `news`;</span><br><span class="line"><span class="keyword">SAVEPOINT</span> delete_words_before;</span><br><span class="line"><span class="keyword">DELETE</span></span><br><span class="line"><span class="keyword">FROM</span> `words`;</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> delete_words_before;</span><br></pre></td></tr></table></figure><p><strong>保留点越多越好</strong> 可以在MySQL代码中设置任意多的保留点，越多越好。为什么呢？因为保留点越多，你就越能按自己的意愿灵活地进行回退。</p><p><strong>释放保留点</strong> 保留点在事务处理完成（执行一条<code>ROLLBACK</code> 或<code>COMMIT</code> ）后自动释放。自MySQL 5以来，也可以用<code>RELEASE SAVEPOINT</code><br>明确地释放保留点。</p><hr><h3 id="更改默认的提交行为"><a href="#更改默认的提交行为" class="headerlink" title="更改默认的提交行为"></a><strong>更改默认的提交行为</strong></h3><p>默认的MySQL行为是自动提交所有更改。换句话说，任何时候你执行一条MySQL语句，该语句实际上都是针对表执行的，而且所做的更改立即生效。为指示MySQL不自动提交更改，需要使用以下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span></span><br><span class="line">autocommit<span class="operator">=</span><span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><code>autocommit</code> 标志决定是否自动提交更改，不管有没有<code>COMMIT</code> 语句。</p><p>设置<code>autocommit</code> 为<code>0</code> （假）指示MySQL不自动提交更改（直到<code>autocommit</code> 被设置为真为止）。</p><blockquote><p><strong>标志为连接专用</strong> <code>autocommit</code> 标志是针对每个连接而不是服务器的。</p></blockquote><hr><h2 id="全球化和本地化"><a href="#全球化和本地化" class="headerlink" title="全球化和本地化"></a>全球化和本地化</h2><p>数据库表被用来存储和检索数据。不同的语言和字符集需要以不同的方式存储和检索。因此，MySQL需要适应不同的字符集（不同的字母和字符），适应不同的排序和检索数据的方法。</p><p>在讨论多种语言和字符集时，将会遇到以下重要术语：</p><ul><li><strong>字符集</strong> 为字母和符号的集合；</li><li><strong>编码</strong> 为某个字符集成员的内部表示；</li><li><strong>校对</strong> 为规定字符如何比较的指令。</li></ul><p><strong>校对为什么重要</strong></p><p>排序英文正文很容易，对吗？或许不。考虑词APE、apex和Apple。它们处于正确的排序顺序吗？</p><p>这有赖于你是否想区分大小写。使用区分大小写的校对顺序，这些词有一种排序方式，使用不区分大小写的校对顺序有另外一种排序方式。这不仅影响排序（如用<code>ORDER BY</code><br>排序数据），还影响搜索（例如，寻找apple的<code>WHERE</code> 子句是否能找到APPLE）。</p><p>在使用诸如法文à或德文ö这样的字符时，情况更复杂，在使用不基于拉丁文的字符集（日文、希伯来文、俄文等）时，情况更为复杂。</p><p>在MySQL的正常数据库活动（<code>SELECT</code> 、<code>INSERT</code> 等）中，不需要操心太多的东西。使用何种字符集和校对的决定在服务器、数据库和表级进行。</p><h3 id="使用字符集和校对顺序"><a href="#使用字符集和校对顺序" class="headerlink" title="使用字符集和校对顺序"></a>使用字符集和校对顺序</h3><p>MySQL支持众多的字符集。为查看所支持的字符集完整列表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span></span><br><span class="line"><span class="type">CHARACTER</span> <span class="keyword">SET</span>;</span><br></pre></td></tr></table></figure><p>显示所有可用的字符集以及每个字符集的描述和默认校对。</p><p>查看所支持校对的完整列表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">COLLATION</span>;</span><br></pre></td></tr></table></figure><p>此语句显示所有可用的校对，以及它们适用的字符集。</p><p>可以看到有的字符集具有不止一种校对。例如，<code>latin1</code> 对不同的欧洲语言有几种校对，而且许多校对出现两次，一次区分大小写（由<code>_cs</code><br>表示），一次不区分大小写（由<code>_ci</code> 表示）。</p><p>通常系统管理在安装时定义一个默认的字符集和校对。此外，也可以在创建数据库时，指定默认的字符集和校对。</p><p>为了确定所用的字符集和校对，可以使用以下语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span></span><br><span class="line">VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;character%&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span></span><br><span class="line">VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;collation%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>实际上，字符集很少是服务器范围（甚至数据库范围）的设置。不同的表，甚至不同的列都可能需要不同的字符集，而且两者都可以在创建表时指定。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `words`</span><br><span class="line">(</span><br><span class="line">    `id`          <span class="type">bigint</span>       <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id (自增)&#x27;</span>,</span><br><span class="line">    `word`        <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;单词&#x27;</span>,</span><br><span class="line">    `description` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;介绍&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci COMMENT <span class="string">&#x27;单词表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>一般，MySQL如下确定使用什么样的字符集和校对。</p><ul><li>如果指定<code>CHARACTER SET</code> 和<code>COLLATE</code> 两者，则使用这些值。</li><li>如果只指定<code>CHARACTER SET</code> ，则使用此字符集及其默认的校对（如<code>SHOW CHARACTER SET</code> 的结果中所示）。</li><li>如果既不指定<code>CHARACTER SET</code> ，也不指定<code>COLLATE</code> ，则使用数据库默认。</li></ul><p>除了能指定字符集和校对的表范围外，MySQL还允许对每个列设置它们，如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `words`</span><br><span class="line">(</span><br><span class="line">    `id`          <span class="type">bigint</span>       <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id (自增)&#x27;</span>,</span><br><span class="line">    `word`        <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;单词&#x27;</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> latin1 <span class="keyword">COLLATE</span> latin1_general_ci,</span><br><span class="line">    `description` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;介绍&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_0900_ai_ci COMMENT <span class="string">&#x27;单词表&#x27;</span>;</span><br></pre></td></tr></table></figure><p>校对在对用<code>ORDER BY</code> 子句检索出来的数据排序时起重要的作用。如果你需要用与创建表时不同的校对顺序排序特定的<code>SELECT</code><br>语句，可以在<code>SELECT</code> 语句自身中进行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> words</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> word <span class="keyword">COLLATE</span> latin1_general_cs;</span><br></pre></td></tr></table></figure><p><strong>临时区分大小写</strong></p><p>上面的<code>SELECT</code> 语句演示了在通常不区分大小写的表上进行区分大小写搜索的一种技术。当然，反过来也是可以的。</p><p><strong><code>SELECT</code> 的其他<code>COLLATE</code> 子句</strong></p><p>除了这里看到的在<code>ORDER BY</code> 子句中使用以外，<code>COLLATE</code> 还可以用于<code>GROUP BY</code> 、<code>HAVING</code> 、聚集函数、别名等。</p><p>最后，值得注意的是，如果绝对需要，串可以在字符集之间进行转换。为此，使用<code>Cast()</code> 或<code>Convert()</code> 函数。</p><hr><h2 id="安全管理"><a href="#安全管理" class="headerlink" title="安全管理"></a>安全管理</h2><h3 id="管理用户"><a href="#管理用户" class="headerlink" title="管理用户"></a>管理用户</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">USE</span><br><span class="line">mysql;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><h3 id="创建用户账号"><a href="#创建用户账号" class="headerlink" title="创建用户账号"></a><strong>创建用户账号</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span></span><br><span class="line"><span class="keyword">USER</span> bob IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;areyouok&#x27;</span>;</span><br></pre></td></tr></table></figure><p><code>CREATE USER</code> 创建一个新用户账号。在创建用户账号时不一定需要口令，不过这个例子用<code>IDENTIFIED BY &#39;areyouok&#39;</code> 给出了一个口令。</p><p><strong>指定散列口令</strong> <code>IDENTIFIED BY</code> 指定的口令为纯文本，MySQL将在保存到<code>user</code><br>表之前对其进行加密。为了作为散列值指定口令，使用<code>IDENTIFIED BY PASSWORD</code> 。</p><p>重新命名一个用户账号，使用<code>RENAME USER</code> 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RENAME</span><br><span class="line"><span class="keyword">USER</span> bob <span class="keyword">TO</span> lucy;</span><br></pre></td></tr></table></figure><p>删除一个用户账号（以及相关的权限），使用<code>DROP USER</code> 语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span></span><br><span class="line"><span class="keyword">USER</span> lucy;</span><br></pre></td></tr></table></figure><h3 id="设置访问权限"><a href="#设置访问权限" class="headerlink" title="设置访问权限"></a><strong>设置访问权限</strong></h3><p>在创建用户账号后，必须接着分配访问权限。新创建的用户账号没有访问权限。它们能登录MySQL，但不能看到数据，不能执行任何数据库操作。</p><p>查看赋予用户账号的权限：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span></span><br><span class="line">GRANTS <span class="keyword">FOR</span> bob</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT USAGE ON *.* TO `bob`@`%`</span><br></pre></td></tr></table></figure><p><code>USAGE</code> 表示根本没有权限，所以，此结果表示在<em>任意数据库</em> 和<em>任意表</em> 上对<em>任何东西没有权限</em> 。</p><p><strong>用户定义为<code>user@host</code></strong> MySQL的权限用用户名和主机名结合定义。如果不指定主机名，则使用默认的主机名%（授予用户访问权限而不管主机名）。</p><p>为设置权限，使用<code>GRANT</code> 语句。<code>GRANT</code> 要求你至少给出以下信息：</p><ul><li>要授予的权限；</li><li>被授予访问权限的数据库或表；</li><li>用户名。</li></ul><p>示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> mysql_study.<span class="operator">*</span> <span class="keyword">TO</span> bob;</span><br></pre></td></tr></table></figure><p>此<code>GRANT</code> 允许用户在<code>mysql_study.*</code> （<code>mysql_study</code> 数据库的所有表）上使用<code>SELECT</code> 。</p><p>查看权限</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span></span><br><span class="line">GRANTS <span class="keyword">FOR</span> bob</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GRANT USAGE ON *.* TO `bob`@`%`</span><br><span class="line">GRANT SELECT ON `mysql_study`.* TO `bob`@`%`</span><br></pre></td></tr></table></figure><p>每个<code>GRANT</code> 添加（或更新）用户的一个权限。MySQL读取所有授权，并根据它们确定权限。</p><h3 id="撤销访问权限"><a href="#撤销访问权限" class="headerlink" title="撤销访问权限"></a>撤销访问权限</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span> <span class="keyword">ON</span> mysql_study.<span class="operator">*</span> <span class="keyword">TO</span> bob;</span><br></pre></td></tr></table></figure><p>这条<code>REVOKE</code> 语句取消刚赋予用户<code>bob</code> 的<code>SELECT</code> 访问权限。被撤销的访问权限必须存在，否则会出错。</p><p><code>GRANT</code> 和<code>REVOKE</code> 可在几个层次上控制访问权限：</p><ul><li>整个服务器，使用<code>GRANT ALL</code> 和<code>REVOKE ALL</code> ；</li><li>整个数据库，使用<code>ON database.*</code> ；</li><li>特定的表，使用<code>ON database.table</code> ；</li><li>特定的列；</li><li>特定的存储过程。</li></ul><p>可以授予或撤销的每个权限。</p><table><thead><tr><th align="center">权 限</th><th align="center">说 明</th></tr></thead><tbody><tr><td align="center"><code>ALL</code></td><td align="center">除<code>GRANT OPTION</code> 外的所有权限</td></tr><tr><td align="center"><code>ALTER</code></td><td align="center">使用<code>ALTER TABLE</code></td></tr><tr><td align="center"><code>ALTER ROUTINE</code></td><td align="center">使用<code>ALTER PROCEDURE</code> 和<code>DROP PROCEDURE</code></td></tr><tr><td align="center"><code>CREATE</code></td><td align="center">使用<code>CREATE TABLE</code></td></tr><tr><td align="center"><code>CREATE ROUTINE</code></td><td align="center">使用<code>CREATE PROCEDURE</code></td></tr><tr><td align="center"><code>CREATE TEMPORARY TABLES</code></td><td align="center">使用<code>CREATE TEMPORARY TABLE</code></td></tr><tr><td align="center"><code>CREATE USER</code></td><td align="center">使用<code>CREATE USER</code> 、<code>DROP USER</code> 、<code>RENAME USER</code> 和<code>REVOKE ALL PRIVILEGES</code></td></tr><tr><td align="center"><code>CREATE VIEW</code></td><td align="center">使用<code>CREATE VIEW</code></td></tr><tr><td align="center"><code>DELETE</code></td><td align="center">使用<code>DELETE</code></td></tr><tr><td align="center"><code>DROP</code></td><td align="center">使用<code>DROP TABLE</code></td></tr><tr><td align="center"><code>EXECUTE</code></td><td align="center">使用<code>CALL</code> 和存储过程</td></tr><tr><td align="center"><code>FILE</code></td><td align="center">使用<code>SELECT INTO OUTFILE</code> 和<code>LOAD DATA INFILE</code></td></tr><tr><td align="center"><code>GRANT OPTION</code></td><td align="center">使用<code>GRANT</code> 和<code>REVOKE</code></td></tr><tr><td align="center"><code>INDEX</code></td><td align="center">使用<code>CREATE INDEX</code> 和<code>DROP INDEX</code></td></tr><tr><td align="center"><code>INSERT</code></td><td align="center">使用<code>INSERT</code></td></tr><tr><td align="center"><code>LOCK TABLES</code></td><td align="center">使用<code>LOCK TABLES</code></td></tr><tr><td align="center"><code>PROCESS</code></td><td align="center">使用<code>SHOW FULL PROCESSLIST</code></td></tr><tr><td align="center"><code>RELOAD</code></td><td align="center">使用<code>FLUSH</code></td></tr><tr><td align="center"><code>REPLICATION CLIENT</code></td><td align="center">服务器位置的访问</td></tr><tr><td align="center"><code>REPLICATION SLAVE</code></td><td align="center">由复制从属使用</td></tr><tr><td align="center"><code>SELECT</code></td><td align="center">使用<code>SELECT</code></td></tr><tr><td align="center"><code>SHOW DATABASES</code></td><td align="center">使用<code>SHOW DATABASES</code></td></tr><tr><td align="center"><code>SHOW VIEW</code></td><td align="center">使用<code>SHOW CREATE VIEW</code></td></tr><tr><td align="center"><code>SHUTDOWN</code></td><td align="center">使用<code>mysqladmin shutdown</code> （用来关闭MySQL）</td></tr><tr><td align="center"><code>SUPER</code></td><td align="center">使用<code>CHANGE MASTER</code> 、<code>KILL</code> 、<code>LOGS</code> 、<code>PURGE</code> 、<code>MASTER</code> 和<code>SET GLOBAL</code> 。还允许<code>mysqladmin</code> 调试登录</td></tr><tr><td align="center"><code>UPDATE</code></td><td align="center">使用<code>UPDATE</code></td></tr><tr><td align="center"><code>USAGE</code></td><td align="center">无访问权限</td></tr></tbody></table><p>使用<code>GRANT</code> 和<code>REVOKE</code> ，再结合表中列出的权限，你能对用户可以就你的宝贵数据做什么事情和不能做什么事情具有完全的控制。</p><p><strong>未来的授权</strong> 在使用<code>GRANT</code> 和<code>REVOKE</code> 时，用户账号必须存在，但对所涉及的对象没有这个要求。这允许管理员在创建数据库和表之前设计和实现安全措施。</p><p>这样做的副作用是，当某个数据库或表被删除时（用<code>DROP</code> 语句），相关的访问权限仍然存在。而且，如果将来重新创建该数据库或表，这些权限仍然起作用。</p><p><strong>简化多次授权</strong> 可通过列出各权限并用逗号分隔，将多条<code>GRANT</code> 语句串在一起：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span> <span class="keyword">ON</span> mysql_study.<span class="operator">*</span> <span class="keyword">TO</span> bob;</span><br></pre></td></tr></table></figure><h3 id="更改口令"><a href="#更改口令" class="headerlink" title="更改口令"></a><strong>更改口令</strong></h3><p><code>SET PASSWORD</code> 更新用户口令。新口令必须传递到<code>Password()</code> 函数进行加密。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span></span><br><span class="line">PASSWORD <span class="keyword">FOR</span> bob <span class="operator">=</span> Password(<span class="string">&#x27;aaa&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在不指定用户名时，<code>SET PASSWORD</code> 更新当前登录用户的口令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span></span><br><span class="line">PASSWORD <span class="operator">=</span> Password(<span class="string">&#x27;aaa&#x27;</span>);</span><br></pre></td></tr></table></figure><hr><h2 id="数据库维护"><a href="#数据库维护" class="headerlink" title="数据库维护"></a>数据库维护</h2><h3 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h3><p>解决方案：</p><ul><li>使用命令行实用程序<code>mysqldump</code> 转储所有数据库内容到某个外部文件。在进行常规备份前这个实用程序应该正常运行，以便能正确地备份转储文件。</li><li>可用命令行实用程序<code>mysqlhotcopy</code> 从一个数据库复制所有数据（并非所有数据库引擎都支持这个实用程序）。</li><li>可以使用MySQL的<code>BACKUP TABLE</code> 或<code>SELECT INTO OUTFILE</code><br>转储所有数据到某个外部文件。这两条语句都接受将要创建的系统文件名，此系统文件必须不存在，否则会出错。数据可以用<code>RESTORE TABLE</code><br>来复原。</li></ul><p><strong>首先刷新未写数据</strong> 为了保证所有数据被写到磁盘（包括索引数据），可能需要在进行备份前使用<code>FLUSH TABLES</code> 语句。</p><h3 id="进行数据库维护"><a href="#进行数据库维护" class="headerlink" title="进行数据库维护"></a>进行数据库维护</h3><p>MySQL提供了一系列的语句，可以（应该）用来保证数据库正确和正常运行。</p><p>检查表键是否正确：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ANALYZE</span><br><span class="line"><span class="keyword">TABLE</span> goods;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Table               Op      Msg_type  Msg_text</span><br><span class="line">mysql_study.goodsanalyzestatus  OK</span><br></pre></td></tr></table></figure><p><code>CHECK TABLE</code> 用来针对许多问题对表进行检查。</p><p>在<code>MyISAM</code> 表上还对索引进行检查。<code>CHECK TABLE</code> 支持一系列的用于<code>MyISAM</code> 表的方式。<code>CHANGED</code><br>检查自最后一次检查以来改动过的表。<code>EXTENDED</code> 执行最彻底的检查，<code>FAST</code> 只检查未正常关闭的表，<code>MEDIUM</code><br>检查所有被删除的链接并进行键检验，<code>QUICK</code> 只进行快速扫描。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CHECK</span> <span class="keyword">TABLE</span> goods;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Table               Op      Msg_type  Msg_text</span><br><span class="line">mysql_study.goodscheckstatus  OK</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>如果<code>MyISAM</code> 表访问产生不正确和不一致的结果，可能需要用<code>REPAIR TABLE</code>来修复相应的表。这条语句不应该经常使用，如果需要经常使用，可能会有更大的问题要解决。</li><li>如果从一个表中删除大量数据，应该使用<code>OPTIMIZE TABLE</code> 来收回所用的空间，从而优化表的性能。</li></ul><h3 id="诊断启动问题"><a href="#诊断启动问题" class="headerlink" title="诊断启动问题"></a>诊断启动问题</h3><p>服务器启动问题通常在对MySQL配置或服务器本身进行更改时出现。MySQL在这个问题发生时报告错误，但由于多数MySQL服务器是作为系统进程或服务自动启动的，这些消息可能看不到。</p><p>在排除系统启动问题时，首先应该尽量用手动启动服务器。MySQL服务器自身通过在命令行上执行<code>mysqld</code><br>启动。下面是几个重要的<code>mysqld</code> 命令行选项：</p><ul><li><code>--help</code> 显示帮助：一个选项列表；</li><li><code>--safe-mode</code> 装载减去某些最佳配置的服务器；</li><li><code>--verbose</code> 显示全文本消息（为获得更详细的帮助消息与<code>--help</code> 联合使用）；</li><li><code>--version</code> 显示版本信息然后退出。</li></ul><h3 id="查看日志文件"><a href="#查看日志文件" class="headerlink" title="查看日志文件"></a>查看日志文件</h3><p>MySQL维护管理员依赖的一系列日志文件。主要的日志文件有以下几种。</p><ul><li>错误日志。它包含启动和关闭问题以及任意关键错误的细节。此日志通常名为<code>hostname.err</code> ，位于<code>data</code><br>目录中。此日志名可用<code>--log-error</code> 命令行选项更改。</li><li>查询日志。它记录所有MySQL活动，在诊断问题时非常有用。此日志文件可能会很快地变得非常大，因此不应该长期使用它。此日志通常名为<code>hostname.log</code><br>，位于<code>data</code> 目录中。此名字可以用<code>--log</code> 命令行选项更改。</li><li>二进制日志。它记录更新过数据（或者可能更新过数据）的所有语句。此日志通常名为<code>hostname-bin</code> ，位于<code>data</code><br>目录内。此名字可以用<code>--log-bin</code> 命令行选项更改。注意，这个日志文件是MySQL 5中添加的，以前的MySQL版本中使用的是更新日志。</li><li>缓慢查询日志。顾名思义，此日志记录执行缓慢的任何查询。这个日志在确定数据库何处需要优化很有用。此日志通常名为<code>hostname-slow.log</code><br>，位于<code>data</code> 目录中。此名字可以用<code>--log-slow-queries</code> 命令行选项更改。</li></ul><p>在使用日志时，可用<code>FLUSH LOGS</code> 语句来刷新和重新开始所有日志文件。</p><hr><h2 id="改善性能"><a href="#改善性能" class="headerlink" title="改善性能"></a>改善性能</h2><ul><li>MySQL是用一系列的默认设置预先配置的，从这些设置开始通常是很好的。但过一段时间后你可能需要调整内存分配、缓冲区大小等。（为查看当前设置，可使用<code>SHOW VARIABLES;</code><br>和<code>SHOW STATUS;</code> 。）</li><li>MySQL一个多用户多线程的DBMS，换言之，它经常同时执行多个任务。如果这些任务中的某一个执行缓慢，则所有请求都会执行缓慢。如果你遇到显著的性能不良，可使用<code>SHOW PROCESS LIST</code><br>显示所有活动进程（以及它们的线程ID和执行时间）。你还可以用<code>KILL</code> 命令终结某个特定的进程（使用这个命令需要作为管理员登录）。</li><li>总是有不止一种方法编写同一条<code>SELECT</code> 语句。应该试验联结、并、子查询等，找出最佳的方法。</li><li>使用<code>EXPLAIN</code> 语句让MySQL解释它将如何执行一条<code>SELECT</code> 语句。</li><li>一般来说，存储过程执行得比一条一条地执行其中的各条MySQL语句快。</li><li>应该总是使用正确的数据类型。</li><li>决不要检索比需求还要多的数据。换言之，不要用<code>SELECT*</code> （除非你真正需要每个列）。</li><li>有的操作（包括<code>INSERT</code> ）支持一个可选的<code>DELAYED</code> 关键字，如果使用它，将把控制立即返回给调用程序，并且一旦有可能就实际执行该操作。</li><li>在导入数据时，应该关闭自动提交。你可能还想删除索引（包括<code>FULLTEXT</code> 索引），然后在导入完成后再重建它们。</li><li>必须索引数据库表以改善数据检索的性能。确定索引什么不是一件微不足道的任务，需要分析使用的<code>SELECT</code> 语句以找出重复的<code>WHERE</code><br>和<code>ORDER BY</code> 子句。如果一个简单的<code>WHERE</code> 子句返回结果所花的时间太长，则可以断定其中使用的列（或几个列）就是需要索引的对象。</li><li>**你的<code>SELECT</code> 语句中有一系列复杂的<code>OR</code> 条件吗？通过使用多条<code>SELECT</code> 语句和连接它们的<code>UNION</code> 语句，你能看到极大的性能改进<br>**。</li><li><strong>索引改善数据检索的性能，但损害数据插入、删除和更新的性能</strong>。如果你有一些表，它们收集数据且不经常被搜索，则在有必要之前不要索引它们。（索引可根据需要添加和删除。）</li><li><code>LIKE</code> 很慢。一般来说，最好是使用<code>FULLTEXT</code> 而不是<code>LIKE</code> 。</li><li>数据库是不断变化的实体。一组优化良好的表一会儿后可能就面目全非了。由于表的使用和内容的更改，理想的优化和配置也会改变。</li><li>最重要的规则就是，每条规则在某些条件下都会被打破。</li></ul><hr><h2 id="My-SQL-数据类型"><a href="#My-SQL-数据类型" class="headerlink" title="My SQL 数据类型"></a>My SQL 数据类型</h2><p>数据类型用于以下目的。</p><ul><li>数据类型允许限制可存储在列中的数据。例如，数值数据类型列只能接受数值。</li><li>数据类型允许在内部更有效地存储数据。可以用一种比文本串更简洁的格式存储数值和日期时间值。</li><li>数据类型允许变换排序顺序。如果所有数据都作为串处理，则1位于10之前，而10又位于2之前（串以字典顺序排序，从左边开始比较，一次一个字符）。作为数值数据类型，数值才能正确排序。</li></ul><p>在设计表时，应该特别重视所用的数据类型。使用错误的数据类型可能会严重地影响应用程序的功能和性能。更改包含数据的列不是一件小事（而且这样做可能会导致数据丢失）。</p><h3 id="串数据类型"><a href="#串数据类型" class="headerlink" title="串数据类型"></a><strong>串数据类型</strong></h3><p>最常用的数据类型是串数据类型。它们存储串，如名字、地址、电话号码、邮政编码等。有两种基本的串类型，分别为定长串和变长串（参见表D-1）。</p><p>定长串接受长度固定的字符串，其长度是在创建表时指定的。定长列不允许多于指定的字符数目。它们分配的存储空间与指定的一样多。<code>CHAR</code><br>属于定长串类型。</p><p>变长串存储可变长度的文本。有些变长数据类型具有最大的定长，而有些则是完全变长的。不管是哪种，只有指定的数据得到保存（额外的数据不保存）<code>TEXT</code><br>属于变长串类型。</p><p>既然变长数据类型这样灵活，为什么还要使用定长数据类型？回答是因为性能。MySQL处理定长列远比处理变长列快得多。此外，MySQL不允许对变长列（或一个列的可变部分）进行索引。这也会极大地影响性能。</p><p><strong>串数据类型</strong></p><table><thead><tr><th align="center">数据类型</th><th align="center">说 明</th></tr></thead><tbody><tr><td align="center"><code>CHAR</code></td><td align="center">1～255个字符的定长串。它的长度必须在创建时指定，否则MySQL假定为<code>CHAR(1)</code></td></tr><tr><td align="center"><code>ENUM</code></td><td align="center">接受最多64 K个串组成的一个预定义集合的某个串</td></tr><tr><td align="center"><code>LONGTEXT</code></td><td align="center">与<code>TEXT</code> 相同，但最大长度为4 GB</td></tr><tr><td align="center"><code>MEDIUMTEXT</code></td><td align="center">与<code>TEXT</code> 相同，但最大长度为16 K</td></tr><tr><td align="center"><code>SET</code></td><td align="center">接受最多64个串组成的一个预定义集合的零个或多个串</td></tr><tr><td align="center"><code>TEXT</code></td><td align="center">最大长度为64 K的变长文本</td></tr><tr><td align="center"><code>TINYTEXT</code></td><td align="center">与<code>TEXT</code> 相同，但最大长度为255字节</td></tr><tr><td align="center"><code>VARCHAR</code></td><td align="center">长度可变， 最多不超过255 字节。如果在创建时指定为<code>VARCHAR(n)</code> ，则可存储<code>0</code>到<code>n</code> 个字符的变长串（其中<code>n</code> ≤255）</td></tr></tbody></table><p><strong>使用引号</strong> 不管使用何种形式的串数据类型，串值都必须括在引号内（通常单引号更好）。</p><p><strong>当数值不是数值时</strong><br>你可能会认为电话号码和邮政编码应该存储在数值字段中（数值字段只存储数值数据），但是，这样做却是不可取的。如果在数值字段中存储邮政编码01234，则保存的将是数值1234，实际上丢失了一位数字。需要遵守的基本规则是：如果数值是计算（求和、平均等）中使用的数值，则应该存储在数值数据类型列中。如果作为字符串（可能只包含数字）使用，则应该保存在串数据类型列中。</p><h3 id="数值数据类型"><a href="#数值数据类型" class="headerlink" title="数值数据类型"></a><strong>数值数据类型</strong></h3><p>数值数据类型存储数值。MySQL支持多种数值数据类型，每种存储的数值具有不同的取值范围。显然，支持的取值范围越大，所需存储空间越多。此外，有的数值数据类型支持使用十进制小数点（和小数），而有的则只支持整数。</p><p><strong>有符号或无符号</strong> 所有数值数据类型（除<code>BIT</code> 和<code>BOOLEAN</code><br>外）都可以有符号或无符号。有符号数值列可以存储正或负的数值，无符号数值列只能存储正数。默认情况为有符号，但如果你知道自己不需要存储负值，可以使用<code>UNSIGNED</code><br>关键字，这样做将允许你存储两倍大小的值。</p><p><strong>数值数据类型</strong></p><table><thead><tr><th align="center">数据类型</th><th align="center">说 明</th></tr></thead><tbody><tr><td align="center"><code>BIT</code></td><td align="center">位字段，1～64位。（在MySQL 5之前，<code>BIT</code> 在功能上等价于<code>TINYINT</code></td></tr><tr><td align="center"><code>BIGINT</code></td><td align="center">整数值，支持−9223372036854775808～9223372036854775807（如果是<code>UNSIGNED</code> ，为0～18446744073709551615）的数</td></tr><tr><td align="center"><code>BOOLEAN</code> （或<code>BOOL</code> ）</td><td align="center">布尔标志，或者为0或者为1，主要用于开&#x2F;关（on&#x2F;off）标志</td></tr><tr><td align="center"><code>DECIMAL</code> （或<code>DEC</code> ）</td><td align="center">精度可变的浮点值</td></tr><tr><td align="center"><code>DOUBLE</code></td><td align="center">双精度浮点值</td></tr><tr><td align="center"><code>FLOAT</code></td><td align="center">单精度浮点值</td></tr><tr><td align="center"><code>INT</code> （或<code>INTEGER</code> ）</td><td align="center">整数值，支持−2147483648～2147483647（如果是<code>UNSIGNED</code> ，为0～4294967295）的数</td></tr><tr><td align="center"><code>MEDIUMINT</code></td><td align="center">整数值，支持−8388608～8388607（如果是<code>UNSIGNED</code> ，为0～16777215）的数</td></tr><tr><td align="center"><code>REAL</code></td><td align="center">4字节的浮点值</td></tr><tr><td align="center"><code>SMALLINT</code></td><td align="center">整数值，支持−32768～32767（如果是<code>UNSIGNED</code> ，为0～65535）的数</td></tr><tr><td align="center"><code>TINYINT</code></td><td align="center">整数值，支持−128～127（如果为<code>UNSIGNED</code> ，为0～255）的数</td></tr></tbody></table><p><strong>不使用引号</strong> 与串不一样，数值不应该括在引号内。</p><p><strong>存储货币数据类型</strong> MySQL中没有专门存储货币的数据类型，一般情况下使用<code>DECIMAL(8,2)</code>。</p><h3 id="日期和时间数据类型"><a href="#日期和时间数据类型" class="headerlink" title="日期和时间数据类型"></a><strong>日期和时间数据类型</strong></h3><table><thead><tr><th align="center">数据类型</th><th align="center">说 明</th></tr></thead><tbody><tr><td align="center"><code>DATE</code></td><td align="center">表示<code>1000-01-01～9999-12-31</code> 的日期，格式为<code>YYYY-MM-DD</code></td></tr><tr><td align="center"><code>DATETIME</code></td><td align="center"><code>DATE</code> 和<code>TIME</code> 的组合</td></tr><tr><td align="center"><code>TIMESTAMP</code></td><td align="center">功能和<code>DATETIME</code> 相同（但范围较小）</td></tr><tr><td align="center"><code>TIME</code></td><td align="center">格式为<code>HH:MM:SS</code></td></tr><tr><td align="center"><code>YEAR</code></td><td align="center">用2位数字表示，范围是70（1970年）～69（2069年），用4位数字表示，范围是1901年～2155年</td></tr></tbody></table><h3 id="二进制数据类型"><a href="#二进制数据类型" class="headerlink" title="二进制数据类型"></a>二进制数据类型</h3><p>二进制数据类型可存储任何数据（甚至包括二进制信息），如图像、多媒体、字处理文档等。</p><table><thead><tr><th align="center">数据类型</th><th align="center">说 明</th></tr></thead><tbody><tr><td align="center"><code>BLOB</code></td><td align="center">Blob最大长度为64 KB</td></tr><tr><td align="center"><code>MEDIUMBLOB</code></td><td align="center">Blob最大长度为16 MB</td></tr><tr><td align="center"><code>LONGBLOB</code></td><td align="center">Blob最大长度为4 GB</td></tr><tr><td align="center"><code>TINYBLOB</code></td><td align="center">Blob最大长度为255字节</td></tr></tbody></table><hr><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul><li>my.ini</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">collation-server=utf8mb4_0900_ai_ci</span><br></pre></td></tr></table></figure><ul><li>my.cnf</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">port=3306</span><br><span class="line">basedir= /home/mysql/</span><br><span class="line">datadir= /home/mysql/data</span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line">socket= /home/mysql/mysql.sock</span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为utf8mb4</span></span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"><span class="comment"># 排序</span></span><br><span class="line">collation-server=utf8mb4_0900_ai_ci</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line"></span><br><span class="line">[client]</span><br><span class="line">socket= /home/mysql/mysql.sock</span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line">default-character-set=utf8mb4</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Effective-Java</title>
      <link href="/14dc86cd.html"/>
      <url>/14dc86cd.html</url>
      
        <content type="html"><![CDATA[<h1 id="Effective-Java-中文版-（原书第三版）"><a href="#Effective-Java-中文版-（原书第三版）" class="headerlink" title="Effective Java 中文版 （原书第三版）"></a>Effective Java 中文版 （原书第三版）</h1><h2 id="创建和销毁对象"><a href="#创建和销毁对象" class="headerlink" title="创建和销毁对象"></a>创建和销毁对象</h2><ol><li>用静态工厂方法代替构造器</li><li>遇到多个构造器参数时要考虑使用构建器</li><li>用私有构造器或者枚举类型强化<code>Singleton</code>属性</li><li>通过私有构造器强化不可实例化的能力</li><li>优先考虑依赖注入来引用资源</li><li>避免创建不必要的对象</li><li>消除过期的对象引用</li><li>避免使用终结方法和清除方法</li><li><code>try-with-resource</code>优先于<code>try-finally</code></li></ol><h2 id="对于所有对象都通用的方法"><a href="#对于所有对象都通用的方法" class="headerlink" title="对于所有对象都通用的方法"></a>对于所有对象都通用的方法</h2><ol><li>覆盖<code>equals</code>时请遵守通用约定</li><li>覆盖<code>equals</code>时总要覆盖<code>hashCode</code></li><li>始终要覆盖<code>toString</code></li><li>谨慎地覆盖<code>clone</code></li><li>考虑实现<code>Comparable</code>接口</li></ol><h2 id="类和接口"><a href="#类和接口" class="headerlink" title="类和接口"></a>类和接口</h2><ol><li>使类和成员的可访问性最小化</li><li>要在公有类中使用访问方法而非公有域</li><li>要使可变性最小化</li><li>复合优先于继承</li><li>要么设计继承并提供文档说明，要么禁止继承</li><li>接口优先于抽象类</li><li>为后代设计接口</li><li>接口只用于定义类型</li><li>类层次优先于标签类</li><li>静态成员类优先于非静态成员类</li><li>限制源文件为单个顶级类</li></ol><h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><ol><li>请不要使用原生态类型</li><li>消除非受检的警告</li><li>列表优先于数组</li><li>优先考虑泛型</li><li>优先考虑泛型方法</li><li>利用有限制通配符来提升<code>API</code>的灵活性</li><li>谨慎使并用泛型和可变参数</li><li>优先考虑类型安全的异构容器</li></ol><h2 id="枚举和注解"><a href="#枚举和注解" class="headerlink" title="枚举和注解"></a>枚举和注解</h2><ol><li>用<code>enum</code>代替<code>int</code>常量</li><li>用实例域代替序数</li><li>用<code>EnumSet</code>代替位域</li><li>用<code>EnumMap</code>代替序数索引</li><li>用接口模拟可扩展的枚举</li><li>注解优先于命令模式</li><li>坚持使用<code>Override</code>注解</li><li>用标记接口定义类型</li></ol><h2 id="Lambda和Stream"><a href="#Lambda和Stream" class="headerlink" title="Lambda和Stream"></a>Lambda和Stream</h2><ol><li><code>Lambda</code>优先于匿名类</li><li>方法引用优先于<code>Lambda</code></li><li>坚持使用标准的函数接口</li><li>谨慎使用<code>Stream</code></li><li>优先选择<code>Stream</code>中无副作用的函数</li><li><code>Stream</code>要优先用<code>Collection</code>作为返回类型</li><li>谨慎使用<code>Stream</code>并行</li></ol><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ol><li>检查参数的有效性</li><li>必要时进行保护性拷贝</li><li>谨慎设计方法签名</li><li>慎用重载</li><li>慎用可变参数</li><li>返回零长度的数组或集合，而不是<code>null</code></li><li>谨慎返回<code>optional</code></li><li>为所有导出的<code>API</code>元素编写文档注释</li></ol><h2 id="通用编程"><a href="#通用编程" class="headerlink" title="通用编程"></a>通用编程</h2><ol><li>将局部变量的作用域最小化</li><li>for-each<code>循环优先于传统的</code>for&#96;循环</li><li>了解和使用类库</li><li>如果需要精确的答案，请避免使用<code>float</code>和<code>double</code></li><li>基本类型优先于装箱基本类型</li><li>如果其他类型更合适，则尽量避免使用字符串</li><li>了解字符串连接的性能</li><li>通过接口引用对象</li><li>接口优先于反射机制</li><li>谨慎地使用本地方法</li><li>谨慎地进行优化</li><li>遵守普遍接受的命名惯例</li></ol><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><ol><li>只针对异常的情况才使用异常</li><li>对可恢复的情况使用受检异常，对编程错误使用运行时异常</li><li>避免不必要地使用受检异常</li><li>优先使用标准的异常</li><li>抛出与抽象对应的异常</li><li>每个方法抛出的所有异常都要建立文档</li><li>在细节消息中包含失败 - 捕获信息</li><li>努力使失败保持原子性</li><li>不要忽略异常</li></ol><h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><ol><li>同步访问共享的可变数据</li><li>避免过度同步</li><li><code>executor</code>、<code>task</code>和<code>stream</code>优先于线程</li><li>并发工具优先于<code>wait</code>和<code>notify</code></li><li>线程安全性的文档化</li><li>慎用延迟初始化</li><li>不要依赖于线程调度器</li></ol><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><ol><li>其他方法优先于<code>Java</code>序列化</li><li>谨慎地实现<code>Serializable</code>接口</li><li>考虑使用自定义的序列化形式</li><li>保护性地编写<code>readObject</code>方法</li><li>对于实例控制，枚举类型优先于<code>readResolve</code></li><li>考虑用序列化代理代替序列化实例</li></ol>]]></content>
      
      
      <categories>
          
          <category> 编码规约 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Effective-Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Gradle</title>
      <link href="/18596a3e.html"/>
      <url>/18596a3e.html</url>
      
        <content type="html"><![CDATA[<h1 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h1><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ol><li>新建系统变量<code>GRADLE_HOME</code>：<code>C:\dev\gradle-7.5.1</code></li><li>在path变量中添加<code>%GRADLE_HOME%\bin</code></li><li>查看是否安装成功</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle -V</span><br></pre></td></tr></table></figure><ol start="4"><li>新建系统变量<code>GRADLE_USER_HOME</code>：<code>D:\repository\gradle_repo</code></li></ol><p><code>GRADLE_USER_HOME</code> 相当于配置<code>Gradle</code> 本地仓库位置和 <code>Gradle Wrapper </code>缓存目录</p><h2 id="修改依赖下载源"><a href="#修改依赖下载源" class="headerlink" title="修改依赖下载源"></a>修改依赖下载源</h2><p>打开<code>gradle</code>的<code>init.d</code>文件夹，新建<code>init.gradle</code>文件，并填入以下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">  repositories &#123;</span><br><span class="line">    maven &#123;</span><br><span class="line">      url &#x27;https://maven.aliyun.com/repository/public/&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    maven &#123;</span><br><span class="line">      url &#x27;https://maven.aliyun.com/repository/spring/&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    mavenLocal()</span><br><span class="line">    mavenCentral()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">buildscript &#123;</span><br><span class="line">repositories &#123;</span><br><span class="line">maven &#123; name &quot;Alibaba&quot; ; url &#x27;https://maven.aliyun.com/repository/public&#x27; &#125; </span><br><span class="line">maven &#123; name &quot;M2&quot; ; url &#x27;https://plugins.gradle.org/m2/&#x27; &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建gradle项目"><a href="#创建gradle项目" class="headerlink" title="创建gradle项目"></a>创建gradle项目</h2><p>build.gradle</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;groovy&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group <span class="string">&#x27;cn.luis&#x27;</span></span><br><span class="line">version <span class="string">&#x27;1.0.0&#x27;</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation <span class="string">&#x27;org.apache.groovy:groovy:4.0.2&#x27;</span></span><br><span class="line">    testImplementation <span class="string">&#x27;org.junit.jupiter:junit-jupiter-api:5.8.1&#x27;</span></span><br><span class="line">    testRuntimeOnly <span class="string">&#x27;org.junit.jupiter:junit-jupiter-engine:5.8.1&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="项目根目录"><a href="#项目根目录" class="headerlink" title="项目根目录"></a>项目根目录</h2><p>项目根目录包含属于项目的所有源文件。此外，它还包含 Gradle 生成的文件和目录，例如<code>.gradle</code>和<code>build</code>. 前者通常签入源代码管理，而后者是 Gradle 用来支持增量构建等功能的临时文件。总的来说，典型项目根目录的剖析大致如下所示：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── .gradle </span><br><span class="line">│   ├── <span class="number">4.8</span> </span><br><span class="line">│   ├── <span class="number">4.9</span> </span><br><span class="line">│   └── ⋮</span><br><span class="line">├── build </span><br><span class="line">├── gradle</span><br><span class="line">│   └── <span class="keyword">wrapper</span> </span><br><span class="line">├── gradle.properties </span><br><span class="line">├── gradlew </span><br><span class="line">├── gradlew.bat </span><br><span class="line">├── settings.gradle <span class="keyword">or</span> settings.gradle.kts </span><br><span class="line">├── subproject-one </span><br><span class="line">|   └── build.gradle <span class="keyword">or</span> build.gradle.kts </span><br><span class="line">├── subproject-two </span><br><span class="line">|   └── build.gradle <span class="keyword">or</span> build.gradle.kts </span><br><span class="line">└── ⋮</span><br></pre></td></tr></table></figure><p>以下是具体描述</p><table><thead><tr><th>目录包</th><th>描述</th></tr></thead><tbody><tr><td>.gradle</td><td>Gradle 生成的项目特定的缓存目录</td></tr><tr><td>4.8、4.9</td><td>特定于版本的缓存（例如，支持增量构建）</td></tr><tr><td>build</td><td>此项目的构建目录，Gradle 在其中生成所有构建工件</td></tr><tr><td>wrapper</td><td>包含<a href="https://docs.gradle.org/current/userguide/gradle_wrapper.html#gradle_wrapper">Gradle Wrapper的 JAR 文件和配置</a></td></tr><tr><td>gradle.properties</td><td>项目特定的<a href="https://docs.gradle.org/current/userguide/build_environment.html#sec:gradle_configuration_properties">Gradle 配置属性</a></td></tr><tr><td>gradlew 、gradlew.bat</td><td><a href="https://docs.gradle.org/current/userguide/gradle_wrapper.html#gradle_wrapper">使用Gradle Wrapper</a>执行构建的脚本</td></tr><tr><td>settings.gradle or settings.gradle.kts</td><td>定义子项目列表的项目<a href="https://docs.gradle.org/current/userguide/build_lifecycle.html#sec:settings_file">设置文件</a></td></tr><tr><td>subproject-one</td><td>通常一个项目被组织成一个或多个子项目</td></tr><tr><td>build.gradle or build.gradle.kts</td><td>每个子项目都有自己的 Gradle 构建脚本</td></tr></tbody></table><h3 id="项目缓存清理"><a href="#项目缓存清理" class="headerlink" title="项目缓存清理"></a><a href="https://docs.gradle.org/current/userguide/directory_layout.html#dir:project_root:cache_cleanup">项目缓存清理</a></h3><p>从 4.10 版本开始，Gradle 会自动清理项目特定的缓存目录。构建项目后，会定期（最多每 24 小时）检查特定于版本的缓存目录<code>.gradle/&lt;gradle-version&gt;/</code>是否仍在使用中。如果 7 天未使用，它们将被删除。</p><h2 id="gradle-wrapper"><a href="#gradle-wrapper" class="headerlink" title="gradle-wrapper"></a>gradle-wrapper</h2><blockquote><p>官方文档：<a href="https://docs.gradle.org/current/userguide/gradle_wrapper.html">https://docs.gradle.org/current/userguide/gradle_wrapper.html</a></p></blockquote><h3 id="使用GradleWrapper"><a href="#使用GradleWrapper" class="headerlink" title="使用GradleWrapper"></a>使用GradleWrapper</h3><p>项目中的gradlew、gradlew.cmd脚本用的就是wrapper中规定的gradle版本。<br>而我们上面提到的gradle指令用的是本地gradle,所以gradle指令和gradlew指令所使用的gradle版本 有可能是不一样的 。<br>gradlew、gradlew.cmd的使用方式与gradle使用方式完全一致，只不过把gradle指令换成了gradlew指令。</p><p>当然,我们也可在终端执行 gradlew 指令时，指定指定一些参数,来控制 Wrapper 的生成，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">--gradle-version</span><br><span class="line"><span class="comment"># 用于下载和执行 Wrapper 的 Gradle 版本。</span></span><br><span class="line"></span><br><span class="line">--distribution-type</span><br><span class="line"><span class="comment"># 用于 Wrapper 的 Gradle 分发类型。可用的选项是bin和all。默认值为bin。</span></span><br><span class="line"></span><br><span class="line">--gradle-distribution-url</span><br><span class="line"><span class="comment"># 指向 Gradle 分发 ZIP 文件的完整 URL。由于 URL 已包含此信息，因此--gradle-version使用此选项已过时。--distribution-# type如果您想在公司网络内托管 Gradle 发行版，此选项非常有用。</span></span><br><span class="line"></span><br><span class="line">--gradle-distribution-sha256-sum</span><br><span class="line"><span class="comment"># 用于验证下载的 Gradle 分发的 SHA256 哈希和。</span></span><br><span class="line"></span><br><span class="line">--network-timeout</span><br><span class="line"><span class="comment"># 下载 gradle 分发时使用的网络超时，以毫秒为单位。默认值为10000。</span></span><br></pre></td></tr></table></figure><h3 id="升级GradleWrapper"><a href="#升级GradleWrapper" class="headerlink" title="升级GradleWrapper"></a>升级GradleWrapper</h3><p>请注意，运行一次包装器任务只会更新<code>gradle-wrapper.properties</code>，但不会影响包装器本身<code>gradle-wrapper.jar</code>。这通常很好，因为即使使用旧的包装文件也可以运行新版本的 Gradle。如果您仍然希望<strong>所有</strong>包装文件都完全最新，则需要再次运行该<code>wrapper</code>任务。</p><p>使用 Gradle<code>wrapper</code>任务生成包装器，指定一个版本。默认为当前版本。升级包装器后，您可以通过执行检查它是否是您期望的版本<code>./gradlew --version</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 升级wrapper版本号,只是修改gradle.properties中wrapper版本未实际下载</span></span><br><span class="line">gradlew wrapper --gradle-version 7.6</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关联源码用</span></span><br><span class="line">gradle wrapper --gradle-version 7.6 --distribution-type all</span><br></pre></td></tr></table></figure><h3 id="GradleWrapper的执行流程"><a href="#GradleWrapper的执行流程" class="headerlink" title="GradleWrapper的执行流程"></a>GradleWrapper的执行流程</h3><ol><li>当我们第一次执行 .&#x2F;gradlew build 命令的时候，gradlew 会读取 gradle-wrapper.properties 文件的配置信息</li><li>将指定版本的 gradle下载并解压到指定的位置(GRADLE_USER_HOME目录下的wrapper&#x2F;dists目录中)</li><li>构建本地缓存(GRADLE_USER_HOME目录下的caches目录中)，再使用相同版本的gradle就不用下载了之后执行的 .&#x2F;gradlew 所有命令都是使用指定的 gradle 版本。</li></ol><p><em>Wrapper 工作流</em></p><p><img src="/image/code-adventure/gradle/assets/wrapper-workflow.png" alt="包装器工作流程"></p><h3 id="gradle-wrapper-properties-文件解读"><a href="#gradle-wrapper-properties-文件解读" class="headerlink" title="gradle-wrapper.properties 文件解读"></a>gradle-wrapper.properties 文件解读</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载的 gradle 压缩包解压后存储的主目录</span></span><br><span class="line"><span class="attr">distributionBase</span>=<span class="string">GRADLE_USER_HOME</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 相对于 distributionBase 的解压后的 gradle 压缩包路径</span></span><br><span class="line"><span class="attr">distributionPath</span>=<span class="string">wrapper/dists</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># gradle 发行版压缩包的下载地址</span></span><br><span class="line"><span class="attr">distributionUrl</span>=<span class="string">https\://services.gradle.org/distributions/gradle-7.4-bin.zip</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 同 distributionBase 用来存储压缩包的</span></span><br><span class="line"><span class="attr">zipStoreBase</span>=<span class="string">GRADLE_USER_HOME</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 同 distributionPath 用来存储压缩包的</span></span><br><span class="line"><span class="attr">zipStorePath</span>=<span class="string">wrapper/dists</span></span><br></pre></td></tr></table></figure><p>注意</p><p>前面提到的 GRALE_USER_HOME 环境变量用于这里的Gradle Wrapper 下载的特定版本的gradle存储目录。</p><p>如果我们没有配置过GRALE_USER_HOME 环境变量,默认在当前用户家目录下的.gradle 文件夹中。</p><p>那什么时候选择使用 gradle wrapper、什么时候选择使用本地gradle?</p><ul><li>下载别人的项目或者使用操作以前自己写的不同版本的gradle项目时：用Gradle wrapper,也即:gradlew</li><li>什么时候使用本地gradle?新建一个项目时: 使用gradle指令即可</li></ul><h2 id="搭建Springboot"><a href="#搭建Springboot" class="headerlink" title="搭建Springboot"></a>搭建Springboot</h2><p>build.gradle</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;org.springframework.boot&#x27;</span> version <span class="string">&#x27;2.4.5&#x27;</span></span><br><span class="line">    id <span class="string">&#x27;java&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">group <span class="string">&#x27;cn.luis&#x27;</span></span><br><span class="line">version <span class="string">&#x27;1.0.0&#x27;</span></span><br><span class="line"></span><br><span class="line">java &#123;</span><br><span class="line">    sourceCompatibility = JavaVersion.VERSION_1_8</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    ext &#123;</span><br><span class="line">        springbootVersion = <span class="string">&#x27;2.4.5&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// implementation. 编译项目代码所需的依赖项，但将在运行时由运行代码的容器提供（例如，Java Servlet API）</span></span><br><span class="line">    implementation platform(<span class="string">&quot;org.springframework.boot:spring-boot-dependencies:$&#123;springbootVersion&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">    implementation <span class="string">&#x27;org.springframework.boot:spring-boot-starter-web&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// testImplementation. 用于编译和运行测试的依赖项，但不是构建或运行项目运行时代码所必需的。</span></span><br><span class="line">    testImplementation(<span class="string">&#x27;org.springframework.boot:spring-boot-starter-test&#x27;</span>) &#123;</span><br><span class="line">        exclude <span class="attr">group:</span> <span class="string">&#x27;org.junit.vintage&#x27;</span>, <span class="attr">module:</span> <span class="string">&#x27;junit-vintage-engine&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">tasks.named(<span class="string">&#x27;test&#x27;</span>, Test) &#123;</span><br><span class="line">    useJUnitPlatform()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> gradle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gradle基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eureka源码历险</title>
      <link href="/b8026823.html"/>
      <url>/b8026823.html</url>
      
        <content type="html"><![CDATA[<h1 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h1><blockquote><p> 推荐：《Spring Cloud 微服务和分布式系统实践》- 杨开振 著</p></blockquote><p>Eureka是由Netflix公司开发的一款实现服务治理的、强调AP（可用性和分区容忍）的组件。</p><p>服务治理中心是微服务（分布式）架构中最基础、最核心的功能组件，它主要对各个服务实例进行管理，包括服务注册和服务发现等。</p><h1 id="服务治理中心工作原理"><a href="#服务治理中心工作原理" class="headerlink" title="服务治理中心工作原理"></a>服务治理中心工作原理</h1><p>微服务实例和服务治理中心的关系</p><ul><li>注册</li><li>续约</li><li>下线</li></ul><p>服务治理中心</p><ul><li><p>相互复制</p></li><li><p>服务剔除</p></li><li><p>自我保护</p></li></ul><p>微服务之间的相互调用</p><ul><li>服务获取</li><li>服务调用</li></ul><hr><h1 id="疑问"><a href="#疑问" class="headerlink" title="疑问"></a>疑问</h1><p>Eureka是如何实现高可用性的？</p><p>Eureka的机制是通过各种REST风格的请求来监控各个微服务甚至其他Eureka服务器是否可用，在一些情况下会剔除他们。即使某个微服务只存在一个实例也依旧可用，这就是它的高可用性。</p><p>如果某个微服务实例可能不能使用了，那么Eureka服务器就会通过服务续约机制将其剔除，不再让新的请求路由到该实例上，从而保证请求能够正常处理。</p><hr><p>如何配置多个注册中心，以及HTTP验证？</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 服务注册域地址 (用来注册微服务)</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:5001/eureka/,http://localhost:5002/eureka/</span></span><br></pre></td></tr></table></figure><p>http验证</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 服务注册域地址 (用来注册微服务)</span></span><br><span class="line">    <span class="attr">serviceUrl:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://user:password@localhost:5001/eureka/</span></span><br></pre></td></tr></table></figure><hr><p>spring cloud中微服务实例默认名称规则是？</p><p>有两种情况</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 若配置了spring.application.instance_id则为</span></span><br><span class="line"><span class="variable">$&#123;spring.cloud.hostname&#125;</span>:<span class="variable">$&#123;spring.application.name&#125;</span>:<span class="variable">$&#123;spring.application.instance_id&#125;</span></span><br><span class="line"><span class="comment"># 否则</span></span><br><span class="line"><span class="variable">$&#123;spring.cloud.hostname&#125;</span>:<span class="variable">$&#123;spring.application.name&#125;</span>:<span class="variable">$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure><p>也可自定义服务名称实例规则，如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># 服务实例名称</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">instance-id:</span> <span class="string">$&#123;eureka.instance.hostname&#125;-account-$&#123;server.port&#125;</span></span><br></pre></td></tr></table></figure><p>则服务实例名称为：localhost-account-8080</p><hr><p>如何自定义服务实例的元数据</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># 自定义服务实例的元数据</span></span><br><span class="line">    <span class="attr">metadata-map:</span></span><br><span class="line">      <span class="attr">version:</span> <span class="string">v2</span></span><br></pre></td></tr></table></figure><hr><h1 id="源码历险"><a href="#源码历险" class="headerlink" title="源码历险"></a>源码历险</h1><h2 id="Spring-cloud"><a href="#Spring-cloud" class="headerlink" title="Spring cloud"></a>Spring cloud</h2><blockquote><p>spring-cloud-commons-2.1.0.RELEASE</p></blockquote><p><code>EnableDiscoveryClient</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.cloud.client.discovery;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Inherited;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Import;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Annotation to enable a DiscoveryClient implementation.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Spencer Gibb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Import(EnableDiscoveryClientImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableDiscoveryClient &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * If true, the ServiceRegistry will automatically register the local server.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">autoRegister</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><hr><h2 id="Eureka“服务发现”功能实现"><a href="#Eureka“服务发现”功能实现" class="headerlink" title="Eureka“服务发现”功能实现"></a>Eureka“服务发现”功能实现</h2><p><code>DiscoveryClient</code>：表示通常可用于发现服务（如 Netflix Eureka 或 consul.io）的读取操作</p><blockquote><p>spring-cloud-commons-2.1.0.RELEASE</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.cloud.client.discovery;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DiscoveryClient</span> <span class="keyword">extends</span> <span class="title class_">Ordered</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它有四个实现：</p><ul><li><p><code>EurekaDiscoveryClient </code>：</p></li><li><p><code>SimpleDiscoveryClient</code>：将使用属性文件作为服务实例源的。</p></li><li><p><code>NoopDiscoveryClient</code>：在类路径上找不到实现时使用的发现客户端。</p></li><li><p><code>CompositeDiscoveryClient</code>：由其他发现客户端组成的 A DiscoveryClient ，并按顺序将调用委托给每个客户端。</p></li></ul><h3 id="EurekaDiscoveryClient"><a href="#EurekaDiscoveryClient" class="headerlink" title="EurekaDiscoveryClient"></a><code>EurekaDiscoveryClient</code></h3><blockquote><p>spring-cloud-netflix-eureka-client-2.1.0.RELEASE</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.cloud.netflix.eureka;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.netflix.appinfo.EurekaInstanceConfig;</span><br><span class="line"><span class="keyword">import</span> com.netflix.appinfo.InstanceInfo;</span><br><span class="line"><span class="keyword">import</span> com.netflix.discovery.EurekaClient;</span><br><span class="line"><span class="keyword">import</span> com.netflix.discovery.EurekaClientConfig;</span><br><span class="line"><span class="keyword">import</span> com.netflix.discovery.shared.Application;</span><br><span class="line"><span class="keyword">import</span> com.netflix.discovery.shared.Applications;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.DefaultServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.discovery.DiscoveryClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.netflix.appinfo.InstanceInfo.PortType.SECURE;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaDiscoveryClient</span> <span class="keyword">implements</span> <span class="title class_">DiscoveryClient</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DESCRIPTION</span> <span class="operator">=</span> <span class="string">&quot;Spring Cloud Eureka Discovery Client&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> EurekaClient eurekaClient;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> EurekaClientConfig clientConfig;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Deprecated</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">EurekaDiscoveryClient</span><span class="params">(EurekaInstanceConfig config, EurekaClient eurekaClient)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>(eurekaClient, eurekaClient.getEurekaClientConfig());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">EurekaDiscoveryClient</span><span class="params">(EurekaClient eurekaClient, EurekaClientConfig clientConfig)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.clientConfig = clientConfig;</span><br><span class="line"><span class="built_in">this</span>.eurekaClient = eurekaClient;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现两个关键类，它们并不属于<code>spring cloud</code>，而是来自<code>netflix</code></p><blockquote><p>eureka-client-1.9.8</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例向 Eureka 服务器注册所需的配置信息。</span></span><br><span class="line"><span class="comment">// 注册后，用户可以根据 com.netflix.discovery.EurekaClient 虚拟主机名（也称为VIPAddress）查找信息，这是最常见的方法，</span></span><br><span class="line"><span class="comment">// 或者通过其他方式获取与 在Eureka注册的其他实例进行通信所需的信息。</span></span><br><span class="line"><span class="keyword">import</span> com.netflix.appinfo.EurekaInstanceConfig;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在当前发现客户端实现上定义一个简单的接口。</span></span><br><span class="line"><span class="keyword">import</span> com.netflix.discovery.EurekaClient;</span><br></pre></td></tr></table></figure><h3 id="EurekaClient"><a href="#EurekaClient" class="headerlink" title="EurekaClient"></a>EurekaClient</h3><blockquote><p>eureka-client-1.9.8</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.netflix.discovery;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ImplementedBy(DiscoveryClient.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EurekaClient</span> <span class="keyword">extends</span> <span class="title class_">LookupService</span> &#123;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过配置项eureka.client.serviceUrl.defaultZone注册到服务中心</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@deprecated</span> see &#123;<span class="doctag">@link</span> com.netflix.discovery.endpoint.EndpointUtils&#125; for replacement</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Get the list of all eureka service urls from properties file for the eureka client to talk to.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> instanceZone The zone in which the client resides</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> preferSameZone true if we have to prefer the same zone as the client, false otherwise</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The list of all eureka service urls for the eureka client to talk to</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getServiceUrlsFromConfig</span><span class="params">(String instanceZone, <span class="type">boolean</span> preferSameZone)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.netflix.discovery;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiscoveryClient</span> <span class="keyword">implements</span> <span class="title class_">EurekaClient</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getServiceUrlsFromConfig</span><span class="params">(String instanceZone, <span class="type">boolean</span> preferSameZone)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> EndpointUtils.getServiceUrlsFromConfig(clientConfig, instanceZone, preferSameZone);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体实现见下。</p><h4 id="EndpointUtils"><a href="#EndpointUtils" class="headerlink" title="EndpointUtils"></a>EndpointUtils</h4><p>部分源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.netflix.discovery.endpoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EndpointUtils</span> &#123;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从属性文件中获取所有尤里卡服务 URL 的列表，以便尤里卡客户端与之通信。</span></span><br><span class="line"><span class="comment">     * 形参:</span></span><br><span class="line"><span class="comment">     * clientConfig – 要使用的客户端配置 </span></span><br><span class="line"><span class="comment">     * instanceZone – 客户端所在的区域 </span></span><br><span class="line"><span class="comment">     * preferSameZone – 如果我们必须首选与客户端相同的区域，则为 true，否则为 false。</span></span><br><span class="line"><span class="comment">     * 返回值:</span></span><br><span class="line"><span class="comment">     * 尤里卡客户端要与之通信的所有尤里卡服务 URL 的列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">getServiceUrlsFromConfig</span><span class="params">(EurekaClientConfig clientConfig, String instanceZone, <span class="type">boolean</span> preferSameZone)</span> &#123;</span><br><span class="line">        <span class="comment">// 有序</span></span><br><span class="line">        List&lt;String&gt; orderedUrls = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        <span class="comment">// 获取此特定实例所在的区域 if not null trim lowercase, otherwise default</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">region</span> <span class="operator">=</span> getRegion(clientConfig);</span><br><span class="line">        <span class="comment">// 获取此实例所在的区域的可用区的列表。 if not null split with &quot;,&quot;, otherwise default</span></span><br><span class="line">        String[] availZones = clientConfig.getAvailabilityZones(clientConfig.getRegion());</span><br><span class="line">        <span class="keyword">if</span> (availZones == <span class="literal">null</span> || availZones.length == <span class="number">0</span>) &#123;</span><br><span class="line">            availZones = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">1</span>];</span><br><span class="line">            availZones[<span class="number">0</span>] = DEFAULT_ZONE;</span><br><span class="line">        &#125;</span><br><span class="line">        logger.debug(<span class="string">&quot;The availability zone for the given region &#123;&#125; are &#123;&#125;&quot;</span>, region, availZones);</span><br><span class="line">        <span class="comment">// 从可用Zone数组中检索出当前实例的Zone下标，如果找不到则返回0，从而指向默认zone</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">myZoneOffset</span> <span class="operator">=</span> getZoneOffset(instanceZone, preferSameZone, availZones);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据zone获取已经存在的serviceUrl</span></span><br><span class="line">        List&lt;String&gt; serviceUrls = clientConfig.getEurekaServerServiceUrls(availZones[myZoneOffset]);</span><br><span class="line">        <span class="keyword">if</span> (serviceUrls != <span class="literal">null</span>) &#123;</span><br><span class="line">            orderedUrls.addAll(serviceUrls);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">currentOffset</span> <span class="operator">=</span> myZoneOffset == (availZones.length - <span class="number">1</span>) ? <span class="number">0</span> : (myZoneOffset + <span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 循环所有zone, 毕竟zone可以配置多个</span></span><br><span class="line">        <span class="keyword">while</span> (currentOffset != myZoneOffset) &#123;</span><br><span class="line">            serviceUrls = clientConfig.getEurekaServerServiceUrls(availZones[currentOffset]);</span><br><span class="line">            <span class="keyword">if</span> (serviceUrls != <span class="literal">null</span>) &#123;</span><br><span class="line">                orderedUrls.addAll(serviceUrls);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (currentOffset == (availZones.length - <span class="number">1</span>)) &#123;</span><br><span class="line">                currentOffset = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                currentOffset++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (orderedUrls.size() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;DiscoveryClient: invalid serviceUrl specified!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> orderedUrls;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>描述一下大致流程：</p><ol><li>一个微服务只有一个region，若未配置则默认值</li><li>根据region获取可用zone数组（可以是多个数组），若获取zone失败，则使用默认值。</li><li>在可用的zone中寻找当前zone实例，若找到返回该实例下标，否则返回0指向默认值。</li><li>将与zone匹配的已经配置好的可用的serviceUrl加入到orderUrls中。</li><li>继续遍历zone数组，获取各个zone匹配的已经配置好的serviceUrl加入到orderUrls中。</li></ol><h3 id="EurekaClientConfig"><a href="#EurekaClientConfig" class="headerlink" title="EurekaClientConfig"></a>EurekaClientConfig</h3><p>尤里卡客户端向 尤里卡 服务器注册实例所需的配置信息。<br>大多数必需的信息由默认配置 DefaultEurekaClientConfig提供。用户只需要提供尤里卡服务器服务网址。尤里卡服务器服务 URL 可以通过 2 种机制进行配置：</p><ol><li>通过在 DNS 中注册信息。</li><li>通过在配置中指定它。</li></ol><p>注册客户端后，用户可以根据EurekaClient虚拟主机名（也称为VIPAddress）查找信息，这是最常见的方法，或者通过其他方式获取与在Eureka注册的其他实例进行通信所需的信息。请注意，除非另有说明，否则所有配置在运行时都无效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.netflix.discovery;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ImplementedBy(DefaultEurekaClientConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EurekaClientConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; <span class="title function_">getEurekaServerServiceUrls</span><span class="params">(String myZone)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该类有两个具体实现</p><ul><li><code>DefaultEurekaClientConfig</code>：来自netflix</li><li><code>EurekaClientConfigBean</code>：来自spring cloud</li></ul><h4 id="DefaultEurekaClientConfig"><a href="#DefaultEurekaClientConfig" class="headerlink" title="DefaultEurekaClientConfig"></a><code>DefaultEurekaClientConfig</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="meta">@ProvidedBy(DefaultEurekaClientConfigProvider.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultEurekaClientConfig</span> <span class="keyword">implements</span> <span class="title class_">EurekaClientConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * (non-Javadoc)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @see</span></span><br><span class="line"><span class="comment">     * com.netflix.discovery.EurekaClientConfig#getEurekaServerServiceUrls()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getEurekaServerServiceUrls</span><span class="params">(String myZone)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">serviceUrls</span> <span class="operator">=</span> configInstance.getStringProperty(</span><br><span class="line">                namespace + CONFIG_EUREKA_SERVER_SERVICE_URL_PREFIX + <span class="string">&quot;.&quot;</span> + myZone, <span class="literal">null</span>).get();</span><br><span class="line">        <span class="keyword">if</span> (serviceUrls == <span class="literal">null</span> || serviceUrls.isEmpty()) &#123;</span><br><span class="line">            serviceUrls = configInstance.getStringProperty(</span><br><span class="line">                    namespace + CONFIG_EUREKA_SERVER_SERVICE_URL_PREFIX + <span class="string">&quot;.default&quot;</span>, <span class="literal">null</span>).get();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (serviceUrls != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Arrays.asList(serviceUrls.split(URL_SEPARATOR));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="EurekaClientConfigBean"><a href="#EurekaClientConfigBean" class="headerlink" title="EurekaClientConfigBean"></a><code>EurekaClientConfigBean</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(EurekaClientConfigBean.PREFIX)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaClientConfigBean</span> <span class="keyword">implements</span> <span class="title class_">EurekaClientConfig</span>, Ordered &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将可用区映射到与尤里卡服务器通信的完全限定 URL 列表。每个值可以是单个 URL，也可以是逗号分隔的备用位置列表。</span></span><br><span class="line"><span class="comment">     * 通常，尤里卡服务器 URL 带有协议、主机、端口、上下文和版本信息（如果有）。</span></span><br><span class="line"><span class="comment">     * 示例：http://ec2-256-156-243-129.compute-1.amazonaws.com:7001/eureka/ </span></span><br><span class="line"><span class="comment">     * 更改在 eurekaServiceUrlPollIntervalSeconds 指定的下一个服务 url 刷新周期的运行时生效。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Map&lt;String, String&gt; serviceUrl = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getEurekaServerServiceUrls</span><span class="params">(String myZone)</span> &#123;</span><br><span class="line">        <span class="comment">// key为zone，value为serviceUrls</span></span><br><span class="line"><span class="type">String</span> <span class="variable">serviceUrls</span> <span class="operator">=</span> <span class="built_in">this</span>.serviceUrl.get(myZone);</span><br><span class="line"><span class="keyword">if</span> (serviceUrls == <span class="literal">null</span> || serviceUrls.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">// default</span></span><br><span class="line">serviceUrls = <span class="built_in">this</span>.serviceUrl.get(DEFAULT_ZONE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!StringUtils.isEmpty(serviceUrls)) &#123;</span><br><span class="line">            <span class="comment">// 将逗号分隔的列表（例如，CSV 文件中的行）转换为字符串数组。</span></span><br><span class="line"><span class="keyword">final</span> String[] serviceUrlsSplit = StringUtils.commaDelimitedListToStringArray(serviceUrls);</span><br><span class="line">List&lt;String&gt; eurekaServiceUrls = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(serviceUrlsSplit.length);</span><br><span class="line"><span class="keyword">for</span> (String eurekaServiceUrl : serviceUrlsSplit) &#123;</span><br><span class="line">                <span class="comment">// url end add &quot;/&quot;</span></span><br><span class="line"><span class="keyword">if</span> (!endsWithSlash(eurekaServiceUrl)) &#123;</span><br><span class="line">eurekaServiceUrl += <span class="string">&quot;/&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">eurekaServiceUrls.add(eurekaServiceUrl.trim());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> eurekaServiceUrls;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Eureka“服务获取”功能实现"><a href="#Eureka“服务获取”功能实现" class="headerlink" title="Eureka“服务获取”功能实现"></a>Eureka“服务获取”功能实现</h2><p><code>DiscoveryClient</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.netflix.discovery;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiscoveryClient</span> <span class="keyword">implements</span> <span class="title class_">EurekaClient</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initScheduledTasks</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 指示此客户端是否应从 eureka 服务器获取 eureka 注册表信息</span></span><br><span class="line">        <span class="keyword">if</span> (clientConfig.shouldFetchRegistry()) &#123;</span><br><span class="line">            <span class="comment">// registry cache refresh timer  注册表缓存刷新定时器</span></span><br><span class="line">            <span class="comment">// 指示从 eureka 服务器获取注册表信息的频率（以秒为单位）</span></span><br><span class="line">            <span class="comment">// 获取注册信息的刷新时间间隔（秒）</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">registryFetchIntervalSeconds</span> <span class="operator">=</span> clientConfig.getRegistryFetchIntervalSeconds();</span><br><span class="line">            <span class="comment">// 缓存刷新执行程序指数回退相关属性。它是重试延迟的最大乘数值，以防发生一系列超时。</span></span><br><span class="line">            <span class="comment">// 获取超时最大尝试数，默认是10次 </span></span><br><span class="line">            <span class="comment">// 默认值在 EurekaClientConfigBean#cacheRefreshExecutorExponentialBackOffBound</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">expBackOffBound</span> <span class="operator">=</span> clientConfig.getCacheRefreshExecutorExponentialBackOffBound();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 启动线程按一定的时间间隔（registryFetchIntervalSeconds）执行服务获取</span></span><br><span class="line">            scheduler.schedule(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">TimedSupervisorTask</span>(</span><br><span class="line">                            <span class="string">&quot;cacheRefresh&quot;</span>,</span><br><span class="line">                            scheduler,</span><br><span class="line">                            cacheRefreshExecutor,</span><br><span class="line">                            registryFetchIntervalSeconds,</span><br><span class="line">                            TimeUnit.SECONDS,</span><br><span class="line">                            expBackOffBound,</span><br><span class="line">                            <span class="keyword">new</span> <span class="title class_">CacheRefreshThread</span>()</span><br><span class="line">                    ),</span><br><span class="line">                    registryFetchIntervalSeconds, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 是否检索服务实例清单，默认true</span></span><br><span class="line">    <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 检索服务实例清单时间间隔（秒）,默认值30</span></span><br><span class="line">    <span class="attr">registry-fetch-interval-seconds:</span> <span class="number">30</span></span><br><span class="line">    <span class="comment"># 当服务超时后，最大尝试次数，默认值10</span></span><br><span class="line">    <span class="attr">cache-refresh-executor-exponential-back-off-bound:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="Eureka“服务注册、续约”功能实现"><a href="#Eureka“服务注册、续约”功能实现" class="headerlink" title="Eureka“服务注册、续约”功能实现"></a>Eureka“服务注册、续约”功能实现</h2><p>服务注册和服务续约功能都在<code>com.netflix.discovery.DiscoveryClient#initScheduledTasks</code>方法中，服务续约通过定时任务和心跳机制实现。</p><p><code>DiscoveryClient</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.netflix.discovery;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiscoveryClient</span> <span class="keyword">implements</span> <span class="title class_">EurekaClient</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initScheduledTasks</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// 指示此客户端是否应从 eureka 服务器获取 eureka 注册表信息</span></span><br><span class="line">       <span class="keyword">if</span> (clientConfig.shouldFetchRegistry()) &#123;</span><br><span class="line">          <span class="comment">// ...</span></span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 是否启用注册功能</span></span><br><span class="line">       <span class="keyword">if</span> (clientConfig.shouldRegisterWithEureka()) &#123;</span><br><span class="line">               <span class="comment">// 续约时间，间隔默认为30s，单位秒</span></span><br><span class="line">               <span class="type">int</span> <span class="variable">renewalIntervalInSecs</span> <span class="operator">=</span> instanceInfo.getLeaseInfo().getRenewalIntervalInSecs();</span><br><span class="line">               <span class="comment">// 续约超时后，尝试最大次数，默认10</span></span><br><span class="line">               <span class="type">int</span> <span class="variable">expBackOffBound</span> <span class="operator">=</span> clientConfig.getHeartbeatExecutorExponentialBackOffBound();</span><br><span class="line">               logger.info(<span class="string">&quot;Starting heartbeat executor: &quot;</span> + <span class="string">&quot;renew interval is: &#123;&#125;&quot;</span>, renewalIntervalInSecs);</span><br><span class="line">   </span><br><span class="line">               <span class="comment">// Heartbeat timer 心跳服务维持续约</span></span><br><span class="line">               scheduler.schedule(</span><br><span class="line">                       <span class="keyword">new</span> <span class="title class_">TimedSupervisorTask</span>(</span><br><span class="line">                               <span class="string">&quot;heartbeat&quot;</span>,</span><br><span class="line">                               scheduler,</span><br><span class="line">                               heartbeatExecutor,</span><br><span class="line">                               renewalIntervalInSecs,</span><br><span class="line">                               TimeUnit.SECONDS,</span><br><span class="line">                               expBackOffBound,</span><br><span class="line">                               <span class="keyword">new</span> <span class="title class_">HeartbeatThread</span>()</span><br><span class="line">                       ),</span><br><span class="line">                       renewalIntervalInSecs, TimeUnit.SECONDS);</span><br><span class="line">   </span><br><span class="line">               <span class="comment">// InstanceInfo replicator 注册线程</span></span><br><span class="line">               instanceInfoReplicator = <span class="keyword">new</span> <span class="title class_">InstanceInfoReplicator</span>(</span><br><span class="line">                       <span class="built_in">this</span>,</span><br><span class="line">                       instanceInfo,</span><br><span class="line">                       clientConfig.getInstanceInfoReplicationIntervalSeconds(), <span class="comment">// 注册时间间隔</span></span><br><span class="line">                       <span class="number">2</span>); <span class="comment">// burstSize</span></span><br><span class="line">   </span><br><span class="line">               <span class="comment">// 客户端状态监听，如果发生变化，则守护线程会做相应的维护</span></span><br><span class="line">               statusChangeListener = <span class="keyword">new</span> <span class="title class_">ApplicationInfoManager</span>.StatusChangeListener() &#123;</span><br><span class="line">                   <span class="meta">@Override</span></span><br><span class="line">                   <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">                       <span class="keyword">return</span> <span class="string">&quot;statusChangeListener&quot;</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">   </span><br><span class="line">                   <span class="meta">@Override</span></span><br><span class="line">                   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">(StatusChangeEvent statusChangeEvent)</span> &#123;</span><br><span class="line">                       <span class="keyword">if</span> (InstanceStatus.DOWN == statusChangeEvent.getStatus() ||</span><br><span class="line">                               InstanceStatus.DOWN == statusChangeEvent.getPreviousStatus()) &#123;</span><br><span class="line">                           <span class="comment">// log at warn level if DOWN was involved</span></span><br><span class="line">                           logger.warn(<span class="string">&quot;Saw local status change event &#123;&#125;&quot;</span>, statusChangeEvent);</span><br><span class="line">                       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                           logger.info(<span class="string">&quot;Saw local status change event &#123;&#125;&quot;</span>, statusChangeEvent);</span><br><span class="line">                       &#125;</span><br><span class="line">                       instanceInfoReplicator.onDemandUpdate();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;;</span><br><span class="line">               </span><br><span class="line">               <span class="comment">// 是否使用后端守护线程监控和更新客户端状态，默认true</span></span><br><span class="line">               <span class="keyword">if</span> (clientConfig.shouldOnDemandUpdateStatusChange()) &#123;</span><br><span class="line">                   applicationInfoManager.registerStatusChangeListener(statusChangeListener);</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 启动注册线程</span></span><br><span class="line">               instanceInfoReplicator.start(</span><br><span class="line">                   <span class="comment">// 注册延迟时间</span></span><br><span class="line">                   clientConfig.getInitialInstanceInfoReplicationIntervalSeconds()</span><br><span class="line">               );</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               logger.info(<span class="string">&quot;Not registering with Eureka server per configuration&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应配置文件，均为默认值</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment"># 是否将eureka客户端注册到eureka服务器</span></span><br><span class="line">    <span class="attr">register-with-eureka:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 续约超时，最大尝试数</span></span><br><span class="line">    <span class="attr">heartbeat-executor-exponential-back-off-bound:</span> <span class="number">10</span></span><br><span class="line">    <span class="comment"># 注册任务线程时间间隔，秒</span></span><br><span class="line">    <span class="attr">instance-info-replication-interval-seconds:</span> <span class="number">30</span></span><br><span class="line">    <span class="comment"># 是否启用守护线程监听eureka客户端</span></span><br><span class="line">    <span class="attr">on-demand-update-status-change:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 首次服务注册延迟时间，秒</span></span><br><span class="line">    <span class="attr">initial-instance-info-replication-interval-seconds:</span> <span class="number">40</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">instance:</span></span><br><span class="line">    <span class="comment"># 续约时间间隔，秒</span></span><br><span class="line">    <span class="attr">lease-renewal-interval-in-seconds:</span> <span class="number">30</span></span><br></pre></td></tr></table></figure><p>重点：【两个延迟】</p><ol><li><p>为什么要设置注册时间间隔？</p><p>保证Eureka客户端能够自我恢复注册到重新启动的Eureka服务中心中。【对于服务发现】</p></li><li><p>客户端状态监听器的作用？</p><p>当状态发生变化，就会通知守护线程做出对应的动作，以适应Eureka客户端状态变化的场景。是否启用该功能受<code>clientConfig.shouldOnDemandUpdateStatusChange()</code>影响，该方法默认值为true，所以默认情况下是会使用守护线程去监听状态的。</p></li><li><p>启动注册线程中的注册延迟时间作用？</p><p>它的默认值是40，在Eureka客户端启动时会延迟40秒才发起注册请求给Eureka服务。【对于服务注册】</p></li></ol><h3 id="注册方法"><a href="#注册方法" class="headerlink" title="注册方法"></a>注册方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.netflix.discovery;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">InstanceInfoReplicator</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            discoveryClient.refreshInstanceInfo();</span><br><span class="line"></span><br><span class="line">            <span class="type">Long</span> <span class="variable">dirtyTimestamp</span> <span class="operator">=</span> instanceInfo.isDirtyWithTime();</span><br><span class="line">            <span class="keyword">if</span> (dirtyTimestamp != <span class="literal">null</span>) &#123;</span><br><span class="line">                discoveryClient.register(); <span class="comment">// 注册</span></span><br><span class="line">                instanceInfo.unsetIsDirty(dirtyTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            logger.warn(<span class="string">&quot;There was a problem with the instance info replicator&quot;</span>, t);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="type">Future</span> <span class="variable">next</span> <span class="operator">=</span> scheduler.schedule(<span class="built_in">this</span>, replicationIntervalSeconds, TimeUnit.SECONDS);</span><br><span class="line">            scheduledPeriodicRef.set(next);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册方法的具体代码，<code>DiscoveryClient#register</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.netflix.discovery;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiscoveryClient</span> <span class="keyword">implements</span> <span class="title class_">EurekaClient</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过进行适当的 REST 调用向尤里卡服务注册。</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">register</span><span class="params">()</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        logger.info(PREFIX + <span class="string">&quot;&#123;&#125;: registering service...&quot;</span>, appPathIdentifier);</span><br><span class="line">        EurekaHttpResponse&lt;Void&gt; httpResponse;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 服务注册</span></span><br><span class="line">            httpResponse = eurekaTransport.registrationClient.register(instanceInfo);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.warn(PREFIX + <span class="string">&quot;&#123;&#125; - registration failed &#123;&#125;&quot;</span>, appPathIdentifier, e.getMessage(), e);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">            logger.info(PREFIX + <span class="string">&quot;&#123;&#125; - registration status: &#123;&#125;&quot;</span>, appPathIdentifier, httpResponse.getStatusCode());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> httpResponse.getStatusCode() == Status.NO_CONTENT.getStatusCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过判断状态码为204（响应成功，但无返回内容），来确定注册成功！我们继续深入，找到真正的<code>register</code>逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.cloud.netflix.eureka.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestTemplateEurekaHttpClient</span> <span class="keyword">implements</span> <span class="title class_">EurekaHttpClient</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> EurekaHttpResponse&lt;Void&gt; <span class="title function_">register</span><span class="params">(InstanceInfo info)</span> &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">urlPath</span> <span class="operator">=</span> serviceUrl + <span class="string">&quot;apps/&quot;</span> + info.getAppName();</span><br><span class="line"></span><br><span class="line"><span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">headers.add(HttpHeaders.ACCEPT_ENCODING, <span class="string">&quot;gzip&quot;</span>);</span><br><span class="line">headers.add(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE);</span><br><span class="line"></span><br><span class="line">ResponseEntity&lt;Void&gt; response = restTemplate.exchange(urlPath, HttpMethod.POST,</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">HttpEntity</span>&lt;&gt;(info, headers), Void.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> anEurekaHttpResponse(response.getStatusCodeValue())</span><br><span class="line">.headers(headersOf(response)).build();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，请求的url是依赖于配置项的<code>eureka.client.serviceUrl.defaultZone</code>来构建的。</p><h2 id="Eureka服务配置类"><a href="#Eureka服务配置类" class="headerlink" title="Eureka服务配置类"></a>Eureka服务配置类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.cloud.netflix.eureka.server;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(EurekaServerConfigBean.PREFIX)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaServerConfigBean</span> <span class="keyword">implements</span> <span class="title class_">EurekaServerConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="客户端服务实例配置"><a href="#客户端服务实例配置" class="headerlink" title="客户端服务实例配置"></a>客户端服务实例配置</h2><p>客户端服务实例的配置是以<code>eureka.instance</code>为前缀的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.cloud.netflix.eureka;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;eureka.instance&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EurekaInstanceConfigBean</span> <span class="keyword">implements</span> <span class="title class_">CloudEurekaInstanceConfig</span>, EnvironmentAware &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>未完待续。。。</p>]]></content>
      
      
      <categories>
          
          <category> spring-cloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eureka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring初始化扫描并加载Bean的流程</title>
      <link href="/4286d89b.html"/>
      <url>/4286d89b.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-源码历险"><a href="#Spring-源码历险" class="headerlink" title="Spring 源码历险"></a>Spring 源码历险</h1><h2 id="Spring初始化扫描并加载Bean的流程"><a href="#Spring初始化扫描并加载Bean的流程" class="headerlink" title="Spring初始化扫描并加载Bean的流程"></a>Spring初始化扫描并加载Bean的流程</h2><blockquote><p>spring-framework：5.3.0</p></blockquote><h3 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h3><p>创建普通maven项目，以ClassPathXmlApplicationContext为例，pom依赖见结尾。</p><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;classpath:bean.xml&quot;</span>);</span><br><span class="line">        <span class="type">LoLService</span> <span class="variable">loLService</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;loLService&quot;</span>, LoLService.class);</span><br><span class="line">        log.info(<span class="string">&quot;loLService &#123;&#125;&quot;</span>, loLService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>服务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Luis</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoLService</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>resources下的文件：bean.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--把对象的创建交给spring管理--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id:唯一标识  class:获取创建对象的全限定类名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;loLService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cn.luis.LoLService&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ClassPathXmlApplicationContext的类图"><a href="#ClassPathXmlApplicationContext的类图" class="headerlink" title="ClassPathXmlApplicationContext的类图"></a><code>ClassPathXmlApplicationContext</code>的类图</h3><p><img src="/image/code-adventure/spring/assets/ClassPathXmlApplicationContext%E7%B1%BB%E5%9B%BE.png" alt="ClassPathXmlApplicationContext类图"></p><h3 id="ClassPathXmlApplicationContext的初始化"><a href="#ClassPathXmlApplicationContext的初始化" class="headerlink" title="ClassPathXmlApplicationContext的初始化"></a><code>ClassPathXmlApplicationContext</code>的初始化</h3><ol><li>父类<code>AbstractApplicationContext</code>初始化</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">DefaultResourceLoader</span></span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">ConfigurableApplicationContext</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">shouldIgnoreSpel</span> <span class="operator">=</span> SpringProperties.getFlag(<span class="string">&quot;spring.spel.ignore&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">// Eagerly load the ContextClosedEvent class to avoid weird classloader issues</span></span><br><span class="line"><span class="comment">// on application shutdown in WebLogic 8.1. (Reported by Dustin Woods.)</span></span><br><span class="line">ContextClosedEvent.class.getName();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>构造函数内初始化逻辑</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ClassPathXmlApplicationContext</span><span class="params">(String configLocation)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"><span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">String</span>[] &#123;configLocation&#125;, <span class="literal">true</span>, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用给定的父类创建一个新的ClassPathXmlApplicationContext，从给定的XML文件加载定义。 </span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> configLocations 资源位置数组</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> refresh 是否自动刷新上下文，加载所有bean定义并创建所有单例。或者，在进一步配置上下文之后手动调用刷新。</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> parent 父上下文</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">ClassPathXmlApplicationContext</span><span class="params">(</span></span><br><span class="line"><span class="params">String[] configLocations, <span class="type">boolean</span> refresh, <span class="meta">@Nullable</span> ApplicationContext parent)</span></span><br><span class="line"><span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 初始化父类属性 </span></span><br><span class="line">       <span class="comment">// AbstractXmlApplicationContext </span></span><br><span class="line">       <span class="comment">// AbstractRefreshableConfigApplicationContext </span></span><br><span class="line">       <span class="comment">// AbstractRefreshableApplicationContext</span></span><br><span class="line">       <span class="comment">// AbstractApplicationContext</span></span><br><span class="line"><span class="built_in">super</span>(parent);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// to AbstractRefreshableConfigApplicationContext class</span></span><br><span class="line">       <span class="comment">// 设置此应用程序上下文的配置位置。 如果没有设置，实现可以适当地使用默认值。</span></span><br><span class="line">setConfigLocations(configLocations); <span class="comment">// configLocations = &quot;classpath:bean.xml&quot;</span></span><br><span class="line"><span class="keyword">if</span> (refresh) &#123;</span><br><span class="line">refresh(); <span class="comment">// to AbstractApplicationContext class </span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="refresh方法"><a href="#refresh方法" class="headerlink" title="refresh方法"></a>refresh方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ConfigurableApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">ApplicationContext</span>, Lifecycle, Closeable &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加载或刷新配置的持久表示，它可能来自基于java的配置、XML文件、属性文件、关系数据库模式或其他格式。 </span></span><br><span class="line"><span class="comment">     * 由于这是一个启动方法，如果失败，它应该销毁已经创建的单例，以避免资源悬空。</span></span><br><span class="line"><span class="comment">     * 换句话说，在调用此方法之后，应该实例化所有或根本不实例化单例。 </span></span><br><span class="line"><span class="comment">     * 抛出: BeansException——如果无法初始化bean工厂 如果已经初始化且不支持多次刷新尝试，则返回IllegalStateException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AbstractApplicationContext</code>类提供了该方法的默认实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">DefaultResourceLoader</span></span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">ConfigurableApplicationContext</span> &#123; </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException &#123;</span><br><span class="line">        <span class="comment">// ... </span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Tell the subclass to refresh the internal bean factory. </span></span><br><span class="line">        <span class="comment">// 调用子类来刷新内部bean工厂。</span></span><br><span class="line"><span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> obtainFreshBeanFactory();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// ... </span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">        <span class="comment">// 实例化所有剩余的(非lazy-init)单例。</span></span><br><span class="line">finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> ConfigurableListableBeanFactory <span class="title function_">obtainFreshBeanFactory</span><span class="params">()</span> &#123;</span><br><span class="line">refreshBeanFactory();  <span class="comment">// to AbstractRefreshableApplicationContext class</span></span><br><span class="line"><span class="keyword">return</span> getBeanFactory();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="支线一：refreshBeanFactory方法"><a href="#支线一：refreshBeanFactory方法" class="headerlink" title="支线一：refreshBeanFactory方法"></a>支线一：refreshBeanFactory方法</h3><p><code>refreshBeanFactory</code>方法的接口类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">DefaultResourceLoader</span></span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">ConfigurableApplicationContext</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子类必须实现此方法来执行实际的配置负载。该方法在任何其他初始化工作之前由refresh()调用。 </span></span><br><span class="line"><span class="comment">     * 子类要么创建一个新的bean工厂并保存对它的引用，要么返回它所保存的单个BeanFactory实例。</span></span><br><span class="line"><span class="comment">     * 在后一种情况下，如果多次刷新上下文，它通常会抛出IllegalStateException异常。 </span></span><br><span class="line"><span class="comment">     * 抛出: BeansException——如果初始化bean工厂失败 如果已经初始化且不支持多次刷新尝试，则返回IllegalStateException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的实现（其中之一）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractRefreshableApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">AbstractApplicationContext</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">refreshBeanFactory</span><span class="params">()</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"><span class="keyword">if</span> (hasBeanFactory()) &#123;</span><br><span class="line">destroyBeans();</span><br><span class="line">closeBeanFactory();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="type">DefaultListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> createBeanFactory();</span><br><span class="line">beanFactory.setSerializationId(getId());</span><br><span class="line">customizeBeanFactory(beanFactory);</span><br><span class="line">loadBeanDefinitions(beanFactory); <span class="comment">// 调用父类方法</span></span><br><span class="line"><span class="built_in">this</span>.beanFactory = beanFactory;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ApplicationContextException</span>(<span class="string">&quot;I/O error parsing bean definition source for &quot;</span> + getDisplayName(), ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在父类查看该方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractXmlApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">AbstractRefreshableConfigApplicationContext</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过XmlBeanDefinitionReader加载bean定义。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(DefaultListableBeanFactory beanFactory)</span> <span class="keyword">throws</span> BeansException, IOException &#123;</span><br><span class="line"><span class="comment">// Create a new XmlBeanDefinitionReader for the given BeanFactory.</span></span><br><span class="line"><span class="type">XmlBeanDefinitionReader</span> <span class="variable">beanDefinitionReader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanDefinitionReader</span>(beanFactory);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Configure the bean definition reader with this context&#x27;s</span></span><br><span class="line"><span class="comment">// resource loading environment.</span></span><br><span class="line">beanDefinitionReader.setEnvironment(<span class="built_in">this</span>.getEnvironment());</span><br><span class="line">beanDefinitionReader.setResourceLoader(<span class="built_in">this</span>);</span><br><span class="line">beanDefinitionReader.setEntityResolver(<span class="keyword">new</span> <span class="title class_">ResourceEntityResolver</span>(<span class="built_in">this</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Allow a subclass to provide custom initialization of the reader,</span></span><br><span class="line"><span class="comment">// then proceed with actually loading the bean definitions.</span></span><br><span class="line">initBeanDefinitionReader(beanDefinitionReader);</span><br><span class="line">        <span class="comment">// 调用下面的loadBeanDefinitions方法</span></span><br><span class="line">loadBeanDefinitions(beanDefinitionReader); </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(XmlBeanDefinitionReader reader)</span> <span class="keyword">throws</span> BeansException, IOException &#123;</span><br><span class="line">Resource[] configResources = getConfigResources();</span><br><span class="line"><span class="keyword">if</span> (configResources != <span class="literal">null</span>) &#123;</span><br><span class="line">reader.loadBeanDefinitions(configResources);</span><br><span class="line">&#125;</span><br><span class="line">String[] configLocations = getConfigLocations();</span><br><span class="line"><span class="keyword">if</span> (configLocations != <span class="literal">null</span>) &#123;</span><br><span class="line">reader.loadBeanDefinitions(configLocations);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，BeanDefinition已成功加载</p><p><img src="/image/code-adventure/spring/assets/%E5%8A%A0%E8%BD%BDBeanDefinition.png" alt="加载BeanDefinition"></p><h3 id="支线二：finishBeanFactoryInitialization方法"><a href="#支线二：finishBeanFactoryInitialization方法" class="headerlink" title="支线二：finishBeanFactoryInitialization方法"></a>支线二：<code>finishBeanFactoryInitialization</code>方法</h3><p>了解<code>BeanDefinition</code>加载过程后，我们继续往下走</p><blockquote><p>暂时还未全部阅读，未完待续…</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">DefaultResourceLoader</span></span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">ConfigurableApplicationContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finishBeanFactoryInitialization</span><span class="params">(ConfigurableListableBeanFactory beanFactory)</span> &#123;</span><br><span class="line"><span class="comment">// Initialize conversion service for this context.</span></span><br><span class="line"><span class="keyword">if</span> (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &amp;&amp;</span><br><span class="line">beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) &#123;</span><br><span class="line">beanFactory.setConversionService(</span><br><span class="line">beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Register a default embedded value resolver if no BeanFactoryPostProcessor</span></span><br><span class="line"><span class="comment">// (such as a PropertySourcesPlaceholderConfigurer bean) registered any before:</span></span><br><span class="line"><span class="comment">// at this point, primarily for resolution in annotation attribute values.</span></span><br><span class="line"><span class="keyword">if</span> (!beanFactory.hasEmbeddedValueResolver()) &#123;</span><br><span class="line">beanFactory.addEmbeddedValueResolver(strVal -&gt; getEnvironment().resolvePlaceholders(strVal));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.</span></span><br><span class="line">String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="keyword">for</span> (String weaverAwareName : weaverAwareNames) &#123;</span><br><span class="line">getBean(weaverAwareName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Stop using the temporary ClassLoader for type matching.</span></span><br><span class="line">beanFactory.setTempClassLoader(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Allow for caching all bean definition metadata, not expecting further changes.</span></span><br><span class="line">beanFactory.freezeConfiguration();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Instantiate all remaining (non-lazy-init) singletons.</span></span><br><span class="line">beanFactory.preInstantiateSingletons();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化操作涉及到了单例池：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.beans.factory.support;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultSingletonBeanRegistry</span> <span class="keyword">extends</span> <span class="title class_">SimpleAliasRegistry</span> <span class="keyword">implements</span> <span class="title class_">SingletonBeanRegistry</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * Cache of singleton factories: bean name to ObjectFactory. </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例化所有剩余的(非lazy-init)单例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultListableBeanFactory</span> <span class="keyword">extends</span> <span class="title class_">AbstractAutowireCapableBeanFactory</span></span><br><span class="line"><span class="keyword">implements</span> <span class="title class_">ConfigurableListableBeanFactory</span>, BeanDefinitionRegistry, Serializable &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">preInstantiateSingletons</span><span class="params">()</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line"><span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">logger.trace(<span class="string">&quot;Pre-instantiating singletons in &quot;</span> + <span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Iterate over a copy to allow for init methods which in turn register new bean definitions.</span></span><br><span class="line"><span class="comment">// While this may not be part of the regular factory bootstrap, it does otherwise work fine.</span></span><br><span class="line">List&lt;String&gt; beanNames = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="built_in">this</span>.beanDefinitionNames);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Trigger initialization of all non-lazy singleton beans...</span></span><br><span class="line"><span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line"><span class="type">RootBeanDefinition</span> <span class="variable">bd</span> <span class="operator">=</span> getMergedLocalBeanDefinition(beanName);</span><br><span class="line"><span class="keyword">if</span> (!bd.isAbstract() &amp;&amp; bd.isSingleton() &amp;&amp; !bd.isLazyInit()) &#123;</span><br><span class="line"><span class="keyword">if</span> (isFactoryBean(beanName)) &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> getBean(FACTORY_BEAN_PREFIX + beanName);</span><br><span class="line"><span class="keyword">if</span> (bean <span class="keyword">instanceof</span> FactoryBean) &#123;</span><br><span class="line">FactoryBean&lt;?&gt; factory = (FactoryBean&lt;?&gt;) bean;</span><br><span class="line"><span class="type">boolean</span> isEagerInit;</span><br><span class="line"><span class="keyword">if</span> (System.getSecurityManager() != <span class="literal">null</span> &amp;&amp; factory <span class="keyword">instanceof</span> SmartFactoryBean) &#123;</span><br><span class="line">isEagerInit = AccessController.doPrivileged(</span><br><span class="line">(PrivilegedAction&lt;Boolean&gt;) ((SmartFactoryBean&lt;?&gt;) factory)::isEagerInit,</span><br><span class="line">getAccessControlContext());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">isEagerInit = (factory <span class="keyword">instanceof</span> SmartFactoryBean &amp;&amp;</span><br><span class="line">((SmartFactoryBean&lt;?&gt;) factory).isEagerInit());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (isEagerInit) &#123;</span><br><span class="line">getBean(beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">getBean(beanName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Trigger post-initialization callback for all applicable beans...</span></span><br><span class="line"><span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line"><span class="type">Object</span> <span class="variable">singletonInstance</span> <span class="operator">=</span> getSingleton(beanName);</span><br><span class="line"><span class="keyword">if</span> (singletonInstance <span class="keyword">instanceof</span> SmartInitializingSingleton) &#123;</span><br><span class="line"><span class="type">StartupStep</span> <span class="variable">smartInitialize</span> <span class="operator">=</span> <span class="built_in">this</span>.getApplicationStartup().start(<span class="string">&quot;spring.beans.smart-initialize&quot;</span>)</span><br><span class="line">.tag(<span class="string">&quot;beanName&quot;</span>, beanName);</span><br><span class="line"><span class="type">SmartInitializingSingleton</span> <span class="variable">smartSingleton</span> <span class="operator">=</span> (SmartInitializingSingleton) singletonInstance;</span><br><span class="line"><span class="keyword">if</span> (System.getSecurityManager() != <span class="literal">null</span>) &#123;</span><br><span class="line">AccessController.doPrivileged((PrivilegedAction&lt;Object&gt;) () -&gt; &#123;</span><br><span class="line">smartSingleton.afterSingletonsInstantiated();</span><br><span class="line"><span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;, getAccessControlContext());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">smartSingleton.afterSingletonsInstantiated();</span><br><span class="line">&#125;</span><br><span class="line">smartInitialize.end();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h3><p>resources下的文件：logback.xml（可选）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;logName&quot;</span> <span class="attr">source</span>=<span class="string">&quot;logging.file.name&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;log.log&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--定义日志文件的存储地址--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name=&quot;./&quot; value=&quot;app.log&quot; /&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;console&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 输出到日志文件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;appender name=&quot;FILE&quot;  class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;</span></span><br><span class="line"><span class="comment">        &lt;file&gt;$&#123;LOG_HOME&#125;&lt;/file&gt;</span></span><br><span class="line"><span class="comment">        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;&gt;</span></span><br><span class="line"><span class="comment">            &amp;lt;!&amp;ndash;日志文件输出的文件名&amp;ndash;&amp;gt;</span></span><br><span class="line"><span class="comment">            &lt;FileNamePattern&gt;$&#123;LOG_HOME&#125;.%d&#123;yyyy-MM-dd&#125;.%i&lt;/FileNamePattern&gt;</span></span><br><span class="line"><span class="comment">            &lt;MaxHistory&gt;30&lt;/MaxHistory&gt;</span></span><br><span class="line"><span class="comment">            &lt;MaxFileSize&gt;50MB&lt;/MaxFileSize&gt;</span></span><br><span class="line"><span class="comment">        &lt;/rollingPolicy&gt;</span></span><br><span class="line"><span class="comment">        &lt;encoder&gt;</span></span><br><span class="line"><span class="comment">            &lt;pattern&gt;$&#123;LOG_PATTERN&#125;&lt;/pattern&gt;</span></span><br><span class="line"><span class="comment">        &lt;/encoder&gt;</span></span><br><span class="line"><span class="comment">    &lt;/appender&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自定义logger --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;cn.luis&quot;</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--sql语句执行输出--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.apache.ibatis&quot;</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;console&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/slf4j-api --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/jcl-over-slf4j --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.slf4j/log4j-over-slf4j --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA编译JDK1.8源码及运行测试</title>
      <link href="/b9f34e31.html"/>
      <url>/b9f34e31.html</url>
      
        <content type="html"><![CDATA[<h1 id="IDEA编译JDK1-8源码及运行测试"><a href="#IDEA编译JDK1-8源码及运行测试" class="headerlink" title="IDEA编译JDK1.8源码及运行测试"></a>IDEA编译JDK1.8源码及运行测试</h1><h2 id="找到源码"><a href="#找到源码" class="headerlink" title="找到源码"></a>找到源码</h2><p>打开安装好的<code>JDK1.8</code>版本目录，找到<code>src.zip</code>，复制到另一个地方，解压，新建文件夹（名字可自定义，最好是当前版本号）<code>jdk1.8.0_333</code>。<br>将解压好的<code>src</code>文件夹放入刚刚创建的文件夹中。</p><h2 id="导入IDEA"><a href="#导入IDEA" class="headerlink" title="导入IDEA"></a>导入IDEA</h2><p>在<code>IDEA</code>中打开，并在<code>src</code>创建<code>sun</code>目录。<br>在<code>sun</code>目录下创建<code>awt</code>目录，并新增<code>UNIXToolkit</code>类。<br>在<code>sun</code>目录下创建<code>font</code>目录，并新增<code>FontConfigManager</code>类。<br>代码在结尾提供。</p><h2 id="新增SDKs"><a href="#新增SDKs" class="headerlink" title="新增SDKs"></a>新增SDKs</h2><p>打开<code>project structure</code>,选择<code>Platforms Settings</code>下的<code>SDKs</code>,<br>添加<code>Add Jdk</code>,选择安装好的<code>JDK1.8</code>版本目录,重命名<code>Name</code>并修改<code>Sourcepath</code>,将原来的<code>src.zip</code>改为当前代码的<code>src</code>目录。<br>最后在<code>Project Settings</code>的<code>project</code>切换为新增<code>SDK</code>。<br><img src="/image/code-adventure/idea/%E8%AE%BE%E7%BD%AEsdk.png" alt="设置sdk"></p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>新建test文件夹，创建如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; integers = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果代码未报错，且断点可随意设置，就成功了！</p><p>若源码断点无法自动进入，修改IDEA设置，见下图<br><img src="/image/code-adventure/jdk8/assets/IDEA%E8%AE%BE%E7%BD%AE%E5%85%81%E8%AE%B8%E8%BF%9B%E5%85%A5java%E6%BA%90%E7%A0%81%E6%96%AD%E7%82%B9.png" alt="IDEA设置允许进入java源码断点"></p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p><code>UNIXToolkit</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sun.awt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.java.swing.plaf.gtk.GTKConstants;</span><br><span class="line"><span class="keyword">import</span> sun.java2d.opengl.OGLRenderQueue;</span><br><span class="line"><span class="keyword">import</span> sun.security.action.GetIntegerAction;</span><br><span class="line"><span class="keyword">import</span> sun.security.action.GetPropertyAction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.color.ColorSpace;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.*;</span><br><span class="line"><span class="keyword">import</span> java.security.AccessController;</span><br><span class="line"><span class="keyword">import</span> java.security.PrivilegedAction;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.awt.RenderingHints.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">UNIXToolkit</span> <span class="keyword">extends</span> <span class="title class_">SunToolkit</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/** All calls into GTK should be synchronized on this lock */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">GTK_LOCK</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>[] BAND_OFFSETS = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span> &#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span>[] BAND_OFFSETS_ALPHA = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_DATATRANSFER_TIMEOUT</span> <span class="operator">=</span> <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allowed GTK versions</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">GtkVersions</span> &#123;</span><br><span class="line">        ANY(<span class="number">0</span>),</span><br><span class="line">        GTK2(Constants.GTK2_MAJOR_NUMBER),</span><br><span class="line">        GTK3(Constants.GTK3_MAJOR_NUMBER);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Constants</span> &#123;</span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">GTK2_MAJOR_NUMBER</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">GTK3_MAJOR_NUMBER</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> number;</span><br><span class="line"></span><br><span class="line">        GtkVersions(<span class="type">int</span> number) &#123;</span><br><span class="line">            <span class="built_in">this</span>.number = number;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> GtkVersions <span class="title function_">getVersion</span><span class="params">(<span class="type">int</span> number)</span> &#123;</span><br><span class="line">            <span class="keyword">switch</span> (number) &#123;</span><br><span class="line">                <span class="keyword">case</span> Constants.GTK2_MAJOR_NUMBER:</span><br><span class="line">                    <span class="keyword">return</span> GTK2;</span><br><span class="line">                <span class="keyword">case</span> Constants.GTK3_MAJOR_NUMBER:</span><br><span class="line">                    <span class="keyword">return</span> GTK3;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    <span class="keyword">return</span> ANY;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// major GTK version number</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNumber</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> number;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Boolean nativeGTKAvailable;</span><br><span class="line">    <span class="keyword">private</span> Boolean nativeGTKLoaded;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">BufferedImage</span> <span class="variable">tmpImage</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getDatatransferTimeout</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">dt</span> <span class="operator">=</span> (Integer) AccessController.doPrivileged(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">GetIntegerAction</span>(<span class="string">&quot;sun.awt.datatransfer.timeout&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span> (dt == <span class="literal">null</span> || dt &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> DEFAULT_DATATRANSFER_TIMEOUT;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> dt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns true if the native GTK libraries are capable of being</span></span><br><span class="line"><span class="comment">     * loaded and are expected to work properly, false otherwise.  Note</span></span><br><span class="line"><span class="comment">     * that this method will not leave the native GTK libraries loaded if</span></span><br><span class="line"><span class="comment">     * they haven&#x27;t already been loaded.  This allows, for example, Swing&#x27;s</span></span><br><span class="line"><span class="comment">     * GTK L&amp;F to test for the presence of native GTK support without</span></span><br><span class="line"><span class="comment">     * leaving the native libraries loaded.  To attempt long-term loading</span></span><br><span class="line"><span class="comment">     * of the native GTK libraries, use the loadGTK() method instead.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isNativeGTKAvailable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (GTK_LOCK) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nativeGTKLoaded != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// We&#x27;ve already attempted to load GTK, so just return the</span></span><br><span class="line">                <span class="comment">// status of that attempt.</span></span><br><span class="line">                <span class="keyword">return</span> nativeGTKLoaded;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nativeGTKAvailable != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// We&#x27;ve already checked the availability of the native GTK</span></span><br><span class="line">                <span class="comment">// libraries, so just return the status of that attempt.</span></span><br><span class="line">                <span class="keyword">return</span> nativeGTKAvailable;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> check_gtk(getEnabledGtkVersion().getNumber());</span><br><span class="line">                nativeGTKAvailable = success;</span><br><span class="line">                <span class="keyword">return</span> success;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Loads the GTK libraries, if necessary.  The first time this method</span></span><br><span class="line"><span class="comment">     * is called, it will attempt to load the native GTK library.  If</span></span><br><span class="line"><span class="comment">     * successful, it leaves the library open and returns true; otherwise,</span></span><br><span class="line"><span class="comment">     * the library is left closed and returns false.  On future calls to</span></span><br><span class="line"><span class="comment">     * this method, the status of the first attempt is returned (a simple</span></span><br><span class="line"><span class="comment">     * lightweight boolean check, no native calls required).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">loadGTK</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (GTK_LOCK) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nativeGTKLoaded == <span class="literal">null</span>) &#123;</span><br><span class="line">                nativeGTKLoaded = load_gtk(getEnabledGtkVersion().getNumber(),</span><br><span class="line">                        isGtkVerbose());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nativeGTKLoaded;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Overridden to handle GTK icon loading</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">lazilyLoadDesktopProperty</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (name.startsWith(<span class="string">&quot;gtk.icon.&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> lazilyLoadGTKIcon(name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.lazilyLoadDesktopProperty(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Load a native Gtk stock icon.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> longname a desktop property name. This contains icon name, size</span></span><br><span class="line"><span class="comment">     *        and orientation, e.g. &lt;code&gt;&quot;gtk.icon.gtk-add.4.rtl&quot;&lt;/code&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an &lt;code&gt;Image&lt;/code&gt; for the icon, or &lt;code&gt;null&lt;/code&gt; if the</span></span><br><span class="line"><span class="comment">     *         icon could not be loaded</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">lazilyLoadGTKIcon</span><span class="params">(String longname)</span> &#123;</span><br><span class="line">        <span class="comment">// Check if we have already loaded it.</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> desktopProperties.get(longname);</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We need to have at least gtk.icon.&lt;stock_id&gt;.&lt;size&gt;.&lt;orientation&gt;</span></span><br><span class="line">        String str[] = longname.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (str.length != <span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Parse out the stock icon size we are looking for.</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            size = Integer.parseInt(str[<span class="number">3</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException nfe) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Direction.</span></span><br><span class="line">        GTKConstants.<span class="type">TextDirection</span> <span class="variable">dir</span> <span class="operator">=</span> (<span class="string">&quot;ltr&quot;</span>.equals(str[<span class="number">4</span>]) ? GTKConstants.TextDirection.LTR :</span><br><span class="line">                GTKConstants.TextDirection.RTL);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Load the stock icon.</span></span><br><span class="line">        <span class="type">BufferedImage</span> <span class="variable">img</span> <span class="operator">=</span> getStockIcon(-<span class="number">1</span>, str[<span class="number">2</span>], size, dir.ordinal(), <span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">if</span> (img != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// Create the desktop property for the icon.</span></span><br><span class="line">            setDesktopProperty(longname, img);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> img;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a BufferedImage which contains the Gtk icon requested.  If no</span></span><br><span class="line"><span class="comment">     * such icon exists or an error occurs loading the icon the result will</span></span><br><span class="line"><span class="comment">     * be null.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The icon or null if it was not found or loaded.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> BufferedImage <span class="title function_">getGTKIcon</span><span class="params">(<span class="keyword">final</span> String filename)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!loadGTK()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Call the native method to load the icon.</span></span><br><span class="line">            <span class="keyword">synchronized</span> (GTK_LOCK) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!load_gtk_icon(filename)) &#123;</span><br><span class="line">                    tmpImage = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Return local image the callback loaded the icon into.</span></span><br><span class="line">        <span class="keyword">return</span> tmpImage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a BufferedImage which contains the Gtk stock icon requested.</span></span><br><span class="line"><span class="comment">     * If no such stock icon exists the result will be null.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> widgetType one of WidgetType values defined in GTKNativeEngine or</span></span><br><span class="line"><span class="comment">     * -1 for system default stock icon.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stockId String which defines the stock id of the gtk item.</span></span><br><span class="line"><span class="comment">     * For a complete list reference the API at www.gtk.org for StockItems.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> iconSize One of the GtkIconSize values defined in GTKConstants</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> textDirection One of the TextDirection values defined in</span></span><br><span class="line"><span class="comment">     * GTKConstants</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> detail Render detail that is passed to the native engine (feel</span></span><br><span class="line"><span class="comment">     * free to pass null)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> The stock icon or null if it was not found or loaded.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> BufferedImage <span class="title function_">getStockIcon</span><span class="params">(<span class="keyword">final</span> <span class="type">int</span> widgetType, <span class="keyword">final</span> String stockId,</span></span><br><span class="line"><span class="params">                                      <span class="keyword">final</span> <span class="type">int</span> iconSize, <span class="keyword">final</span> <span class="type">int</span> direction,</span></span><br><span class="line"><span class="params">                                      <span class="keyword">final</span> String detail)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!loadGTK()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Call the native method to load the icon.</span></span><br><span class="line">            <span class="keyword">synchronized</span> (GTK_LOCK) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!load_stock_icon(widgetType, stockId, iconSize, direction, detail)) &#123;</span><br><span class="line">                    tmpImage = <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Return local image the callback loaded the icon into.</span></span><br><span class="line">        <span class="keyword">return</span> tmpImage;  <span class="comment">// set by loadIconCallback</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This method is used by JNI as a callback from load_stock_icon.</span></span><br><span class="line"><span class="comment">     * Image data is passed back to us via this method and loaded into the</span></span><br><span class="line"><span class="comment">     * local BufferedImage and then returned via getStockIcon.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Do NOT call this method directly.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadIconCallback</span><span class="params">(<span class="type">byte</span>[] data, <span class="type">int</span> width, <span class="type">int</span> height,</span></span><br><span class="line"><span class="params">                                 <span class="type">int</span> rowStride, <span class="type">int</span> bps, <span class="type">int</span> channels, <span class="type">boolean</span> alpha)</span> &#123;</span><br><span class="line">        <span class="comment">// Reset the stock image to null.</span></span><br><span class="line">        tmpImage = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Create a new BufferedImage based on the data returned from the</span></span><br><span class="line">        <span class="comment">// JNI call.</span></span><br><span class="line">        <span class="type">DataBuffer</span> <span class="variable">dataBuf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataBufferByte</span>(data, (rowStride * height));</span><br><span class="line">        <span class="comment">// Maybe test # channels to determine band offsets?</span></span><br><span class="line">        <span class="type">WritableRaster</span> <span class="variable">raster</span> <span class="operator">=</span> Raster.createInterleavedRaster(dataBuf,</span><br><span class="line">                width, height, rowStride, channels,</span><br><span class="line">                (alpha ? BAND_OFFSETS_ALPHA : BAND_OFFSETS), <span class="literal">null</span>);</span><br><span class="line">        <span class="type">ColorModel</span> <span class="variable">colorModel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ComponentColorModel</span>(</span><br><span class="line">                ColorSpace.getInstance(ColorSpace.CS_sRGB), alpha, <span class="literal">false</span>,</span><br><span class="line">                ColorModel.TRANSLUCENT, DataBuffer.TYPE_BYTE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set the local image so we can return it later from</span></span><br><span class="line">        <span class="comment">// getStockIcon().</span></span><br><span class="line">        tmpImage = <span class="keyword">new</span> <span class="title class_">BufferedImage</span>(colorModel, raster, <span class="literal">false</span>, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">check_gtk</span><span class="params">(<span class="type">int</span> version)</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">load_gtk</span><span class="params">(<span class="type">int</span> version, <span class="type">boolean</span> verbose)</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">unload_gtk</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">load_gtk_icon</span><span class="params">(String filename)</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">load_stock_icon</span><span class="params">(<span class="type">int</span> widget_type, String stock_id,</span></span><br><span class="line"><span class="params">                                           <span class="type">int</span> iconSize, <span class="type">int</span> textDirection, String detail)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">nativeSync</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">get_gtk_version</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sync</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// flush the X11 buffer</span></span><br><span class="line">        nativeSync();</span><br><span class="line">        <span class="comment">// now flush the OGL pipeline (this is a no-op if OGL is not enabled)</span></span><br><span class="line">        OGLRenderQueue.sync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * This returns the value for the desktop property &quot;awt.font.desktophints&quot;</span></span><br><span class="line"><span class="comment">     * It builds this by querying the Gnome desktop properties to return</span></span><br><span class="line"><span class="comment">     * them as platform independent hints.</span></span><br><span class="line"><span class="comment">     * This requires that the Gnome properties have already been gathered.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FONTCONFIGAAHINT</span> <span class="operator">=</span> <span class="string">&quot;fontconfig/Antialias&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> RenderingHints <span class="title function_">getDesktopAAHints</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">aaValue</span> <span class="operator">=</span> getDesktopProperty(<span class="string">&quot;gnome.Xft/Antialias&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (aaValue == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">/* On a KDE desktop running KWin the rendering hint will</span></span><br><span class="line"><span class="comment">             * have been set as property &quot;fontconfig/Antialias&quot;.</span></span><br><span class="line"><span class="comment">             * No need to parse further in this case.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            aaValue = getDesktopProperty(FONTCONFIGAAHINT);</span><br><span class="line">            <span class="keyword">if</span> (aaValue != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RenderingHints</span>(KEY_TEXT_ANTIALIASING, aaValue);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// no Gnome or KDE Desktop properties available.</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 0 means off, 1 means some ON. What would any other value mean?</span></span><br><span class="line"><span class="comment">         * If we require &quot;1&quot; to enable AA then some new value would cause</span></span><br><span class="line"><span class="comment">         * us to default to &quot;OFF&quot;. I don&#x27;t think that&#x27;s the best guess.</span></span><br><span class="line"><span class="comment">         * So if its !=0 then lets assume AA.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">aa</span> <span class="operator">=</span> ((aaValue <span class="keyword">instanceof</span> Number)</span><br><span class="line">                &amp;&amp; ((Number) aaValue).intValue() != <span class="number">0</span>);</span><br><span class="line">        Object aaHint;</span><br><span class="line">        <span class="keyword">if</span> (aa) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">subpixOrder</span> <span class="operator">=</span></span><br><span class="line">                    (String)getDesktopProperty(<span class="string">&quot;gnome.Xft/RGBA&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (subpixOrder == <span class="literal">null</span> || subpixOrder.equals(<span class="string">&quot;none&quot;</span>)) &#123;</span><br><span class="line">                aaHint = VALUE_TEXT_ANTIALIAS_ON;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (subpixOrder.equals(<span class="string">&quot;rgb&quot;</span>)) &#123;</span><br><span class="line">                aaHint = VALUE_TEXT_ANTIALIAS_LCD_HRGB;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (subpixOrder.equals(<span class="string">&quot;bgr&quot;</span>)) &#123;</span><br><span class="line">                aaHint = VALUE_TEXT_ANTIALIAS_LCD_HBGR;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (subpixOrder.equals(<span class="string">&quot;vrgb&quot;</span>)) &#123;</span><br><span class="line">                aaHint = VALUE_TEXT_ANTIALIAS_LCD_VRGB;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (subpixOrder.equals(<span class="string">&quot;vbgr&quot;</span>)) &#123;</span><br><span class="line">                aaHint = VALUE_TEXT_ANTIALIAS_LCD_VBGR;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">/* didn&#x27;t recognise the string, but AA is requested */</span></span><br><span class="line">                aaHint = VALUE_TEXT_ANTIALIAS_ON;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            aaHint = VALUE_TEXT_ANTIALIAS_DEFAULT;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RenderingHints</span>(KEY_TEXT_ANTIALIASING, aaHint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">native</span> <span class="type">boolean</span> <span class="title function_">gtkCheckVersionImpl</span><span class="params">(<span class="type">int</span> major, <span class="type">int</span> minor,</span></span><br><span class="line"><span class="params">                                               <span class="type">int</span> micro)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns &#123;<span class="doctag">@code</span> true&#125; if the GTK+ library is compatible with the given</span></span><br><span class="line"><span class="comment">     * version.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> major</span></span><br><span class="line"><span class="comment">     *            The required major version.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minor</span></span><br><span class="line"><span class="comment">     *            The required minor version.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> micro</span></span><br><span class="line"><span class="comment">     *            The required micro version.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@code</span> true&#125; if the GTK+ library is compatible with the given</span></span><br><span class="line"><span class="comment">     *         version.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">checkGtkVersion</span><span class="params">(<span class="type">int</span> major, <span class="type">int</span> minor, <span class="type">int</span> micro)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (loadGTK()) &#123;</span><br><span class="line">            <span class="keyword">return</span> gtkCheckVersionImpl(major, minor, micro);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GtkVersions <span class="title function_">getEnabledGtkVersion</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">version</span> <span class="operator">=</span> AccessController.doPrivileged(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">GetPropertyAction</span>(<span class="string">&quot;jdk.gtk.version&quot;</span>));</span><br><span class="line">        <span class="keyword">if</span> (version == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> GtkVersions.ANY;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (version.startsWith(<span class="string">&quot;2&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> GtkVersions.GTK2;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;3&quot;</span>.equals(version) )&#123;</span><br><span class="line">            <span class="keyword">return</span> GtkVersions.GTK3;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> GtkVersions.ANY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GtkVersions <span class="title function_">getGtkVersion</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> GtkVersions.getVersion(get_gtk_version());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isGtkVerbose</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> AccessController.doPrivileged((PrivilegedAction&lt;Boolean&gt;)()</span><br><span class="line">                -&gt; Boolean.getBoolean(<span class="string">&quot;jdk.gtk.verbose&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>FontConfigManager</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> sun.font;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sun.awt.SunHints;</span><br><span class="line"><span class="keyword">import</span> sun.awt.SunToolkit;</span><br><span class="line"><span class="keyword">import</span> sun.util.logging.PlatformLogger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FontConfigManager</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="variable">fontConfigFailed</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* This is populated by native */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">FontConfigInfo</span> <span class="variable">fcInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FontConfigInfo</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Begin support for GTK Look and Feel - query libfontconfig and</span></span><br><span class="line"><span class="comment">     * return a composite Font to Swing that uses the desktop font(s).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* These next three classes are just data structures.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">FontConfigFont</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> String familyName;        <span class="comment">// eg Bitstream Vera Sans</span></span><br><span class="line">        <span class="keyword">public</span> String styleStr;          <span class="comment">// eg Bold</span></span><br><span class="line">        <span class="keyword">public</span> String fullName;          <span class="comment">// eg Bitstream Vera Sans Bold</span></span><br><span class="line">        <span class="keyword">public</span> String fontFile;          <span class="comment">// eg /usr/X11/lib/fonts/foo.ttf</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">FcCompFont</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> String fcName;            <span class="comment">// eg sans</span></span><br><span class="line">        <span class="keyword">public</span> String fcFamily;          <span class="comment">// eg sans</span></span><br><span class="line">        <span class="keyword">public</span> String jdkName;           <span class="comment">// eg sansserif</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> style;                <span class="comment">// eg 0=PLAIN</span></span><br><span class="line">        <span class="keyword">public</span> FontConfigFont firstFont;</span><br><span class="line">        <span class="keyword">public</span> FontConfigFont[] allFonts;</span><br><span class="line">        <span class="comment">//boolean preferBitmaps;    // if embedded bitmaps preferred over AA</span></span><br><span class="line">        <span class="keyword">public</span> CompositeFont compFont;   <span class="comment">// null if not yet created/known.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">FontConfigInfo</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> fcVersion;</span><br><span class="line">        <span class="keyword">public</span> String[] cacheDirs = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">4</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* fontconfig recognises slants roman, italic, as well as oblique,</span></span><br><span class="line"><span class="comment">     * and a slew of weights, where the ones that matter here are</span></span><br><span class="line"><span class="comment">     * regular and bold.</span></span><br><span class="line"><span class="comment">     * To fully qualify what we want, we can for example ask for (eg)</span></span><br><span class="line"><span class="comment">     * Font.PLAIN             : &quot;serif:regular:roman&quot;</span></span><br><span class="line"><span class="comment">     * Font.BOLD              : &quot;serif:bold:roman&quot;</span></span><br><span class="line"><span class="comment">     * Font.ITALIC            : &quot;serif:regular:italic&quot;</span></span><br><span class="line"><span class="comment">     * Font.BOLD|Font.ITALIC  : &quot;serif:bold:italic&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String[] fontConfigNames = &#123;</span><br><span class="line">            <span class="string">&quot;sans:regular:roman&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sans:bold:roman&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sans:regular:italic&quot;</span>,</span><br><span class="line">            <span class="string">&quot;sans:bold:italic&quot;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;serif:regular:roman&quot;</span>,</span><br><span class="line">            <span class="string">&quot;serif:bold:roman&quot;</span>,</span><br><span class="line">            <span class="string">&quot;serif:regular:italic&quot;</span>,</span><br><span class="line">            <span class="string">&quot;serif:bold:italic&quot;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">&quot;monospace:regular:roman&quot;</span>,</span><br><span class="line">            <span class="string">&quot;monospace:bold:roman&quot;</span>,</span><br><span class="line">            <span class="string">&quot;monospace:regular:italic&quot;</span>,</span><br><span class="line">            <span class="string">&quot;monospace:bold:italic&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* This array has the array elements created in Java code and is</span></span><br><span class="line"><span class="comment">     * passed down to native to be filled in.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> FcCompFont[] fontConfigFonts;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Instantiates a new FontConfigManager getting the default instance</span></span><br><span class="line"><span class="comment">     * of FontManager from the FontManagerFactory.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FontConfigManager</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Called from code that needs to know what are the AA settings</span></span><br><span class="line"><span class="comment">     * that apps using FC would pick up for the default desktop font.</span></span><br><span class="line"><span class="comment">     * Note apps can change the default desktop font. etc, so this</span></span><br><span class="line"><span class="comment">     * isn&#x27;t certain to be right but its going to correct for most cases.</span></span><br><span class="line"><span class="comment">     * Native return values map to the text aa values in sun.awt.SunHints.</span></span><br><span class="line"><span class="comment">     * which is used to look up the renderinghint value object.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getFontConfigAAHint</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getFontConfigAAHint(<span class="string">&quot;sans&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* This is public solely so that for debugging purposes it can be called</span></span><br><span class="line"><span class="comment">     * with other names, which might (eg) include a size, eg &quot;sans-24&quot;</span></span><br><span class="line"><span class="comment">     * The return value is a text aa rendering hint value.</span></span><br><span class="line"><span class="comment">     * Normally we should call the no-args version.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getFontConfigAAHint</span><span class="params">(String fcFamily)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (FontUtilities.isWindows) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">hint</span> <span class="operator">=</span> getFontConfigAASettings(getFCLocaleStr(), fcFamily);</span><br><span class="line">            <span class="keyword">if</span> (hint &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> SunHints.Value.get(SunHints.INTKEY_TEXT_ANTIALIASING,</span><br><span class="line">                        hint);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">getFCLocaleStr</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Locale</span> <span class="variable">l</span> <span class="operator">=</span> SunToolkit.getStartupLocale();</span><br><span class="line">        <span class="type">String</span> <span class="variable">localeStr</span> <span class="operator">=</span> l.getLanguage();</span><br><span class="line">        <span class="type">String</span> <span class="variable">country</span> <span class="operator">=</span> l.getCountry();</span><br><span class="line">        <span class="keyword">if</span> (!country.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">            localeStr = localeStr + <span class="string">&quot;-&quot;</span> + country;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> localeStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* This does cause the native libfontconfig to be loaded and unloaded,</span></span><br><span class="line"><span class="comment">     * but it does not incur the overhead of initialisation of its</span></span><br><span class="line"><span class="comment">     * data structures, so shouldn&#x27;t have a measurable impact.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="type">int</span> <span class="title function_">getFontConfigVersion</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* This can be made public if it&#x27;s needed to force a re-read</span></span><br><span class="line"><span class="comment">     * rather than using the cached values. The re-read would be needed</span></span><br><span class="line"><span class="comment">     * only if some event signalled that the fontconfig has changed.</span></span><br><span class="line"><span class="comment">     * In that event this method would need to return directly the array</span></span><br><span class="line"><span class="comment">     * to be used by the caller in case it subsequently changed.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">initFontConfigFonts</span><span class="params">(<span class="type">boolean</span> includeFallbacks)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fontConfigFonts != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!includeFallbacks || (fontConfigFonts[<span class="number">0</span>].allFonts != <span class="literal">null</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (FontUtilities.isWindows || fontConfigFailed) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">t0</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (FontUtilities.isLogging()) &#123;</span><br><span class="line">            t0 = System.nanoTime();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        FcCompFont[] fontArr = <span class="keyword">new</span> <span class="title class_">FcCompFont</span>[fontConfigNames.length];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; fontArr.length; i++) &#123;</span><br><span class="line">            fontArr[i] = <span class="keyword">new</span> <span class="title class_">FcCompFont</span>();</span><br><span class="line">            fontArr[i].fcName = fontConfigNames[i];</span><br><span class="line">            <span class="type">int</span> <span class="variable">colonPos</span> <span class="operator">=</span> fontArr[i].fcName.indexOf(<span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">            fontArr[i].fcFamily = fontArr[i].fcName.substring(<span class="number">0</span>, colonPos);</span><br><span class="line">            fontArr[i].jdkName = FontUtilities.mapFcName(fontArr[i].fcFamily);</span><br><span class="line">            fontArr[i].style = i % <span class="number">4</span>; <span class="comment">// depends on array order.</span></span><br><span class="line">        &#125;</span><br><span class="line">        getFontConfig(getFCLocaleStr(), fcInfo, fontArr, includeFallbacks);</span><br><span class="line">        <span class="type">FontConfigFont</span> <span class="variable">anyFont</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">/* If don&#x27;t find anything (eg no libfontconfig), then just return */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; fontArr.length; i++) &#123;</span><br><span class="line">            <span class="type">FcCompFont</span> <span class="variable">fci</span> <span class="operator">=</span> fontArr[i];</span><br><span class="line">            <span class="keyword">if</span> (fci.firstFont == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (FontUtilities.isLogging()) &#123;</span><br><span class="line">                    <span class="type">PlatformLogger</span> <span class="variable">logger</span> <span class="operator">=</span> FontUtilities.getLogger();</span><br><span class="line">                    logger.info(<span class="string">&quot;Fontconfig returned no font for &quot;</span> +</span><br><span class="line">                            fontArr[i].fcName);</span><br><span class="line">                &#125;</span><br><span class="line">                fontConfigFailed = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (anyFont == <span class="literal">null</span>) &#123;</span><br><span class="line">                anyFont = fci.firstFont;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (anyFont == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (FontUtilities.isLogging()) &#123;</span><br><span class="line">                <span class="type">PlatformLogger</span> <span class="variable">logger</span> <span class="operator">=</span> FontUtilities.getLogger();</span><br><span class="line">                logger.info(<span class="string">&quot;Fontconfig returned no fonts at all.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            fontConfigFailed = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fontConfigFailed) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; fontArr.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (fontArr[i].firstFont == <span class="literal">null</span>) &#123;</span><br><span class="line">                    fontArr[i].firstFont = anyFont;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fontConfigFonts = fontArr;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (FontUtilities.isLogging()) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">PlatformLogger</span> <span class="variable">logger</span> <span class="operator">=</span> FontUtilities.getLogger();</span><br><span class="line"></span><br><span class="line">            <span class="type">long</span> <span class="variable">t1</span> <span class="operator">=</span> System.nanoTime();</span><br><span class="line">            logger.info(<span class="string">&quot;Time spent accessing fontconfig=&quot;</span></span><br><span class="line">                    + ((t1 - t0) / <span class="number">1000000</span>) + <span class="string">&quot;ms.&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i&lt; fontConfigFonts.length; i++) &#123;</span><br><span class="line">                <span class="type">FcCompFont</span> <span class="variable">fci</span> <span class="operator">=</span> fontConfigFonts[i];</span><br><span class="line">                logger.info(<span class="string">&quot;FC font &quot;</span> + fci.fcName+<span class="string">&quot; maps to family &quot;</span> +</span><br><span class="line">                        fci.firstFont.familyName +</span><br><span class="line">                        <span class="string">&quot; in file &quot;</span> + fci.firstFont.fontFile);</span><br><span class="line">                <span class="keyword">if</span> (fci.allFonts != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="type">int</span> f=<span class="number">0</span>;f&lt;fci.allFonts.length;f++) &#123;</span><br><span class="line">                        <span class="type">FontConfigFont</span> <span class="variable">fcf</span> <span class="operator">=</span> fci.allFonts[f];</span><br><span class="line">                        logger.info(<span class="string">&quot;Family=&quot;</span> + fcf.familyName +</span><br><span class="line">                                <span class="string">&quot; Style=&quot;</span>+ fcf.styleStr +</span><br><span class="line">                                <span class="string">&quot; Fullname=&quot;</span>+fcf.fullName +</span><br><span class="line">                                <span class="string">&quot; File=&quot;</span>+fcf.fontFile);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> PhysicalFont <span class="title function_">registerFromFcInfo</span><span class="params">(FcCompFont fcInfo)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SunFontManager</span> <span class="variable">fm</span> <span class="operator">=</span> SunFontManager.getInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* If it&#x27;s a TTC file we need to know that as we will need to</span></span><br><span class="line"><span class="comment">         * make sure we return the right font */</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fontFile</span> <span class="operator">=</span> fcInfo.firstFont.fontFile;</span><br><span class="line">        <span class="type">int</span> <span class="variable">offset</span> <span class="operator">=</span> fontFile.length()-<span class="number">4</span>;</span><br><span class="line">        <span class="keyword">if</span> (offset &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">ext</span> <span class="operator">=</span> fontFile.substring(offset).toLowerCase();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isTTC</span> <span class="operator">=</span> ext.equals(<span class="string">&quot;.ttc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* If this file is already registered, can just return its font.</span></span><br><span class="line"><span class="comment">         * However we do need to check in case it&#x27;s a TTC as we need</span></span><br><span class="line"><span class="comment">         * a specific font, so rather than directly returning it, let</span></span><br><span class="line"><span class="comment">         * findFont2D resolve that.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">PhysicalFont</span> <span class="variable">physFont</span> <span class="operator">=</span> fm.getRegisteredFontFile(fontFile);</span><br><span class="line">        <span class="keyword">if</span> (physFont != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isTTC) &#123;</span><br><span class="line">                <span class="type">Font2D</span> <span class="variable">f2d</span> <span class="operator">=</span> fm.findFont2D(fcInfo.firstFont.familyName,</span><br><span class="line">                        fcInfo.style,</span><br><span class="line">                        FontManager.NO_FALLBACK);</span><br><span class="line">                <span class="keyword">if</span> (f2d <span class="keyword">instanceof</span> PhysicalFont) &#123; <span class="comment">/* paranoia */</span></span><br><span class="line">                    <span class="keyword">return</span> (PhysicalFont)f2d;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> physFont;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* If the font may hide a JRE font (eg fontconfig says it is</span></span><br><span class="line"><span class="comment">         * Lucida Sans), we want to use the JRE version, so make it</span></span><br><span class="line"><span class="comment">         * point to the JRE font.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        physFont = fm.findJREDeferredFont(fcInfo.firstFont.familyName,</span><br><span class="line">                fcInfo.style);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* It is also possible the font file is on the &quot;deferred&quot; list,</span></span><br><span class="line"><span class="comment">         * in which case we can just initialise it now.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (physFont == <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                fm.isDeferredFont(fontFile) == <span class="literal">true</span>) &#123;</span><br><span class="line">            physFont = fm.initialiseDeferredFont(fcInfo.firstFont.fontFile);</span><br><span class="line">            <span class="comment">/* use findFont2D to get the right font from TTC&#x27;s */</span></span><br><span class="line">            <span class="keyword">if</span> (physFont != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isTTC) &#123;</span><br><span class="line">                    <span class="type">Font2D</span> <span class="variable">f2d</span> <span class="operator">=</span> fm.findFont2D(fcInfo.firstFont.familyName,</span><br><span class="line">                            fcInfo.style,</span><br><span class="line">                            FontManager.NO_FALLBACK);</span><br><span class="line">                    <span class="keyword">if</span> (f2d <span class="keyword">instanceof</span> PhysicalFont) &#123; <span class="comment">/* paranoia */</span></span><br><span class="line">                        <span class="keyword">return</span> (PhysicalFont)f2d;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> physFont;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* In the majority of cases we reach here, and need to determine</span></span><br><span class="line"><span class="comment">         * the type and rank to register the font.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (physFont == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">fontFormat</span> <span class="operator">=</span> SunFontManager.FONTFORMAT_NONE;</span><br><span class="line">            <span class="type">int</span> <span class="variable">fontRank</span> <span class="operator">=</span> Font2D.UNKNOWN_RANK;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ext.equals(<span class="string">&quot;.ttf&quot;</span>) || isTTC) &#123;</span><br><span class="line">                fontFormat = SunFontManager.FONTFORMAT_TRUETYPE;</span><br><span class="line">                fontRank = Font2D.TTF_RANK;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ext.equals(<span class="string">&quot;.pfa&quot;</span>) || ext.equals(<span class="string">&quot;.pfb&quot;</span>)) &#123;</span><br><span class="line">                fontFormat = SunFontManager.FONTFORMAT_TYPE1;</span><br><span class="line">                fontRank = Font2D.TYPE1_RANK;</span><br><span class="line">            &#125;</span><br><span class="line">            physFont = fm.registerFontFile(fcInfo.firstFont.fontFile, <span class="literal">null</span>,</span><br><span class="line">                    fontFormat, <span class="literal">true</span>, fontRank);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> physFont;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * We need to return a Composite font which has as the font in</span></span><br><span class="line"><span class="comment">     * its first slot one obtained from fontconfig.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> CompositeFont <span class="title function_">getFontConfigFont</span><span class="params">(String name, <span class="type">int</span> style)</span> &#123;</span><br><span class="line"></span><br><span class="line">        name = name.toLowerCase();</span><br><span class="line"></span><br><span class="line">        initFontConfigFonts(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (fontConfigFonts == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// This avoids an immediate NPE if fontconfig look up failed</span></span><br><span class="line">            <span class="comment">// but doesn&#x27;t guarantee this is a recoverable situation.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">FcCompFont</span> <span class="variable">fcInfo</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;fontConfigFonts.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (name.equals(fontConfigFonts[i].fcFamily) &amp;&amp;</span><br><span class="line">                    style == fontConfigFonts[i].style) &#123;</span><br><span class="line">                fcInfo = fontConfigFonts[i];</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fcInfo == <span class="literal">null</span>) &#123;</span><br><span class="line">            fcInfo = fontConfigFonts[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (FontUtilities.isLogging()) &#123;</span><br><span class="line">            FontUtilities.getLogger()</span><br><span class="line">                    .info(<span class="string">&quot;FC name=&quot;</span> + name + <span class="string">&quot; style=&quot;</span> + style +</span><br><span class="line">                            <span class="string">&quot; uses &quot;</span> + fcInfo.firstFont.familyName +</span><br><span class="line">                            <span class="string">&quot; in file: &quot;</span> + fcInfo.firstFont.fontFile);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fcInfo.compFont != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> fcInfo.compFont;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* jdkFont is going to be used for slots 1..N and as a fallback.</span></span><br><span class="line"><span class="comment">         * Slot 0 will be the physical font from fontconfig.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">FontManager</span> <span class="variable">fm</span> <span class="operator">=</span> FontManagerFactory.getInstance();</span><br><span class="line">        <span class="type">CompositeFont</span> <span class="variable">jdkFont</span> <span class="operator">=</span> (CompositeFont)</span><br><span class="line">                fm.findFont2D(fcInfo.jdkName, style, FontManager.LOGICAL_FALLBACK);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fcInfo.firstFont.familyName == <span class="literal">null</span> ||</span><br><span class="line">                fcInfo.firstFont.fontFile == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (fcInfo.compFont = jdkFont);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* First, see if the family and exact style is already registered.</span></span><br><span class="line"><span class="comment">         * If it is, use it. If it&#x27;s not, then try to register it.</span></span><br><span class="line"><span class="comment">         * If that registration fails (signalled by null) just return the</span></span><br><span class="line"><span class="comment">         * regular JDK composite.</span></span><br><span class="line"><span class="comment">         * Algorithmically styled fonts won&#x27;t match on exact style, so</span></span><br><span class="line"><span class="comment">         * will fall through this code, but the regisration code will</span></span><br><span class="line"><span class="comment">         * find that file already registered and return its font.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">FontFamily</span> <span class="variable">family</span> <span class="operator">=</span> FontFamily.getFamily(fcInfo.firstFont.familyName);</span><br><span class="line">        <span class="type">PhysicalFont</span> <span class="variable">physFont</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (family != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">Font2D</span> <span class="variable">f2D</span> <span class="operator">=</span> family.getFontWithExactStyleMatch(fcInfo.style);</span><br><span class="line">            <span class="keyword">if</span> (f2D <span class="keyword">instanceof</span> PhysicalFont) &#123;</span><br><span class="line">                physFont = (PhysicalFont)f2D;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (physFont == <span class="literal">null</span> ||</span><br><span class="line">                !fcInfo.firstFont.fontFile.equals(physFont.platName)) &#123;</span><br><span class="line">            physFont = registerFromFcInfo(fcInfo);</span><br><span class="line">            <span class="keyword">if</span> (physFont == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> (fcInfo.compFont = jdkFont);</span><br><span class="line">            &#125;</span><br><span class="line">            family = FontFamily.getFamily(physFont.getFamilyName(<span class="literal">null</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Now register the fonts in the family (the other styles) after</span></span><br><span class="line"><span class="comment">         * checking that they aren&#x27;t already registered and are actually in</span></span><br><span class="line"><span class="comment">         * a different file. They may be the same file in CJK cases.</span></span><br><span class="line"><span class="comment">         * For cases where they are different font files - eg as is common for</span></span><br><span class="line"><span class="comment">         * Latin fonts, then we rely on fontconfig to report these correctly.</span></span><br><span class="line"><span class="comment">         * Assume that all styles of this font are found by fontconfig,</span></span><br><span class="line"><span class="comment">         * so we can find all the family members which must be registered</span></span><br><span class="line"><span class="comment">         * together to prevent synthetic styling.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; i&lt;fontConfigFonts.length; i++) &#123;</span><br><span class="line">            <span class="type">FcCompFont</span> <span class="variable">fc</span> <span class="operator">=</span> fontConfigFonts[i];</span><br><span class="line">            <span class="keyword">if</span> (fc != fcInfo &amp;&amp;</span><br><span class="line">                    physFont.getFamilyName(<span class="literal">null</span>).equals(fc.firstFont.familyName) &amp;&amp;</span><br><span class="line">                    !fc.firstFont.fontFile.equals(physFont.platName) &amp;&amp;</span><br><span class="line">                    family.getFontWithExactStyleMatch(fc.style) == <span class="literal">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                registerFromFcInfo(fontConfigFonts[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Now we have a physical font. We will back this up with the JDK</span></span><br><span class="line"><span class="comment">         * logical font (sansserif, serif, or monospaced) that corresponds</span></span><br><span class="line"><span class="comment">         * to the Pango/GTK/FC logical font name.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> (fcInfo.compFont = <span class="keyword">new</span> <span class="title class_">CompositeFont</span>(physFont, jdkFont));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> locale</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fcFamily</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> FcCompFont[] getFontConfigFonts() &#123;</span><br><span class="line">        <span class="keyword">return</span> fontConfigFonts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Return an array of FcCompFont structs describing the primary</span></span><br><span class="line"><span class="comment">     * font located for each of fontconfig/GTK/Pango&#x27;s logical font names.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">getFontConfig</span><span class="params">(String locale,</span></span><br><span class="line"><span class="params">                                             FontConfigInfo fcInfo,</span></span><br><span class="line"><span class="params">                                             FcCompFont[] fonts,</span></span><br><span class="line"><span class="params">                                             <span class="type">boolean</span> includeFallbacks)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">populateFontConfig</span><span class="params">(FcCompFont[] fcInfo)</span> &#123;</span><br><span class="line">        fontConfigFonts = fcInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FcCompFont[] loadFontConfig() &#123;</span><br><span class="line">        initFontConfigFonts(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> fontConfigFonts;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FontConfigInfo <span class="title function_">getFontConfigInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        initFontConfigFonts(<span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> fcInfo;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="type">int</span></span><br><span class="line">    <span class="title function_">getFontConfigAASettings</span><span class="params">(String locale, String fcFamily)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://blog.csdn.net/qq_41055045/article/details/112002440">https://blog.csdn.net/qq_41055045/article/details/112002440</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JDK8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JDK8源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Integer源码历险</title>
      <link href="/c063f707.html"/>
      <url>/c063f707.html</url>
      
        <content type="html"><![CDATA[<h1 id="Integer"><a href="#Integer" class="headerlink" title="Integer"></a>Integer</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="类结构"><a href="#类结构" class="headerlink" title="类结构"></a>类结构</h3><blockquote><p>包路径: <code>java.lang.Integer</code></p></blockquote><p><img src="/image/code-adventure/jdk8/java/lang/Integer/Integer%E7%B1%BB%E5%9B%BE.png" alt="Integer类图"></p><h2 id="IntegerCache私有静态内部类"><a href="#IntegerCache私有静态内部类" class="headerlink" title="IntegerCache私有静态内部类"></a><code>IntegerCache</code>私有静态内部类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Integer</span> <span class="keyword">extends</span> <span class="title class_">Number</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Integer&gt; &#123;   </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存以支持 JLS 要求的 -128 和 127（含）之间的值的自动装箱的对象标识语义。缓存在首次使用时初始化。</span></span><br><span class="line"><span class="comment">     * 缓存的大小可以通过该 -XX:AutoBoxCacheMax=&lt;size&gt; 选项控制。</span></span><br><span class="line"><span class="comment">     * 在虚拟机初始化期间，java.lang.Integer.IntegerCache.high</span></span><br><span class="line"><span class="comment">     * 属性可以设置并保存在 sun.misc.VM 类的专用系统属性中。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IntegerCache</span> &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> -<span class="number">128</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> high;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="comment">// high value may be configured by property</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">integerCacheHighPropValue</span> <span class="operator">=</span></span><br><span class="line">                sun.misc.VM.getSavedProperty(<span class="string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (integerCacheHighPropValue != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> parseInt(integerCacheHighPropValue);</span><br><span class="line">                    i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                    <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                    h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                    <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            high = h;</span><br><span class="line"></span><br><span class="line">            cache = <span class="keyword">new</span> <span class="title class_">Integer</span>[(high - low) + <span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> low;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">                cache[k] = <span class="keyword">new</span> <span class="title class_">Integer</span>(j++);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">            <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">IntegerCache</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Luis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IntegerTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 缓存以支持 JLS 要求的 -128 和 127（含）之间的值的自动装箱的对象标识语义。缓存在首次使用时初始化。</span></span><br><span class="line"><span class="comment">     * 缓存的大小可以通过该 -XX:AutoBoxCacheMax=&lt;size&gt; 选项控制。</span></span><br><span class="line"><span class="comment">     * 在虚拟机初始化期间，java.lang.Integer.IntegerCache.high</span></span><br><span class="line"><span class="comment">     * 属性可以设置并保存在 sun.misc.VM 类的专用系统属性中。</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 比较的时候要用equals方法</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Integer.IntegerCache IntegerCache的实现使用了享元模式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Integer.IntegerCache#cache</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Integer#valueOf(int) 如果不需要新的Integer实例，通常应该优先使用该方法，而不是构造函数Integer(int)，</span></span><br><span class="line"><span class="comment">     * 因为该方法通过缓存频繁请求的值，可能会产生显著更好的空间和时间性能。</span></span><br><span class="line"><span class="comment">     * 该方法将始终缓存范围为-128到127的值(包括)，并可能缓存该范围以外的其他值。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testCache</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">newNum</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">127</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">cacheNum</span> <span class="operator">=</span> Integer.valueOf(<span class="number">127</span>);</span><br><span class="line">        <span class="comment">// same like cacheNum</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// == 比较的是内存地址</span></span><br><span class="line">        Assertions.assertFalse(cacheNum == newNum);</span><br><span class="line">        Assertions.assertTrue(cacheNum == Integer.valueOf(<span class="number">127</span>));</span><br><span class="line"></span><br><span class="line">        Assertions.assertFalse(num == newNum);</span><br><span class="line">        Assertions.assertTrue(num == cacheNum);</span><br><span class="line">        Assertions.assertTrue(num == Integer.valueOf(<span class="number">127</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 128 all false</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">newNum2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">128</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">cacheNum2</span> <span class="operator">=</span> Integer.valueOf(<span class="number">128</span>);</span><br><span class="line">        <span class="comment">// same like cacheNum</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">num2</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">        Assertions.assertFalse(cacheNum2 == newNum2);</span><br><span class="line">        Assertions.assertFalse(cacheNum2 == Integer.valueOf(<span class="number">128</span>));</span><br><span class="line"></span><br><span class="line">        Assertions.assertFalse(num2 == newNum);</span><br><span class="line">        Assertions.assertFalse(num2 == cacheNum2);</span><br><span class="line">        Assertions.assertFalse(num2 == Integer.valueOf(<span class="number">128</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h2><ol><li>优先使用<code>Integer.valueOf()</code>方法</li></ol><h2 id="避坑指南"><a href="#避坑指南" class="headerlink" title="避坑指南"></a>避坑指南</h2><h3 id="equals方法比较"><a href="#equals方法比较" class="headerlink" title="equals方法比较"></a>equals方法比较</h3><p>将此对象与指定对象进行比较。当且仅当实参不是null并且是一个包含与此对象相同int值的Integer对象时，结果为true。</p><p>源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Integer</span> <span class="keyword">extends</span> <span class="title class_">Number</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Integer&gt; &#123;   </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">                <span class="keyword">return</span> value == ((Integer)obj).intValue();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 包装类的equals方法会做类型校验</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> Integer#equals(Object)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testEquals</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">numLong</span> <span class="operator">=</span> <span class="number">2L</span>;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">numLongClass</span> <span class="operator">=</span> <span class="number">2L</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包装类的equals方法会做类型校验</span></span><br><span class="line">        Assertions.assertFalse(num.equals(numLong));</span><br><span class="line">        Assertions.assertFalse(num.equals(numLongClass));</span><br><span class="line">        Assertions.assertTrue(numLongClass.equals(numLong));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><blockquote><p>结论：使用equals方法比较的时候，需要注意类型一致</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JDK8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Integer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Arrays源码历险</title>
      <link href="/4ac34d5d.html"/>
      <url>/4ac34d5d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Arrays源码历险"><a href="#Arrays源码历险" class="headerlink" title="Arrays源码历险"></a>Arrays源码历险</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><blockquote><p>包路径: <code>java.util.Arrays</code></p></blockquote><p><img src="/image/code-adventure/jdk8/java/util/Arrays/Arrays%E5%86%85%E9%83%A8%E7%B1%BB.png" alt="Arrays内部类"></p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a><code>ArrayList</code></h3><p>查看源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">RandomAccess</span>, java.io.Serializable&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承自<code>AbstractList</code>类，查看Abstract源码可看到<code>add()、set()、remove()</code>方法均抛异常<code>UnsupportedOperationException</code>（不支持的操作异常）并且<code>ArrayList</code>只重写了<code>set()</code>方法，其他方法并未重写。</p><p>实现<code>RandomAccess</code>接口，指示它们支持快速（通常是恒定时间）随机访问。</p><h2 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h2><p><strong><code>Arrays.asList()</code>不允许修改列表数量</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArraysTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> AbstractList#remove(int)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> AbstractList#remove(Object)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; integers = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        integers.set(<span class="number">1</span>, <span class="number">10</span>);</span><br><span class="line">        Assertions.assertThrows(UnsupportedOperationException.class, () -&gt; integers.add(<span class="number">4</span>));</span><br><span class="line">        Assertions.assertThrows(UnsupportedOperationException.class, () -&gt; integers.remove(<span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * java.lang.UnsupportedOperationException</span></span><br><span class="line"><span class="comment">         * at java.util.AbstractList.remove(AbstractList.java:161)</span></span><br><span class="line"><span class="comment">         * at java.util.AbstractList$Itr.remove(AbstractList.java:374)</span></span><br><span class="line"><span class="comment">         * at java.util.AbstractCollection.remove(AbstractCollection.java:293)</span></span><br><span class="line"><span class="comment">         * at cn.luis.jdk8.source.java.util.ArraysTest.test(ArraysTest.java:26)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Assertions.assertThrows(UnsupportedOperationException.class, </span><br><span class="line">                                () -&gt; integers.remove(Integer.valueOf(<span class="number">3</span>)));</span><br><span class="line">        Assertions.assertThrows(UnsupportedOperationException.class, () -&gt; integers.clear());</span><br><span class="line"></span><br><span class="line">        Assertions.assertEquals(Arrays.asList(<span class="number">1</span>, <span class="number">10</span>, <span class="number">3</span>), integers);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>Arrays.asList()</code>是泛型方法，传递的数组必须是对象数组，而不是基本类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArraysTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">generic</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arrayNum = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        List&lt;<span class="type">int</span>[]&gt; ints = Arrays.asList(arrayNum);</span><br><span class="line">        System.out.println(Arrays.toString(ints.get(<span class="number">0</span>)));</span><br><span class="line">        Assertions.assertEquals(ints.get(<span class="number">0</span>), arrayNum);</span><br><span class="line">        Assertions.assertThrows(ArrayIndexOutOfBoundsException.class, () -&gt; ints.get(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="避坑指南"><a href="#避坑指南" class="headerlink" title="避坑指南"></a>避坑指南</h2><ol><li>Arrays内部类ArrayList是不支持增删改操作的，把它当做一个数据的视图吧。</li></ol>]]></content>
      
      
      <categories>
          
          <category> JDK8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Arrays </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayList源码历险</title>
      <link href="/570a0ca1.html"/>
      <url>/570a0ca1.html</url>
      
        <content type="html"><![CDATA[<h1 id="ArrayList源码历险"><a href="#ArrayList源码历险" class="headerlink" title="ArrayList源码历险"></a>ArrayList源码历险</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="类结构"><a href="#类结构" class="headerlink" title="类结构"></a>类结构</h3><blockquote><p>包路径: <code>java.util.ArrayList</code></p></blockquote><p><img src="/image/code-adventure/jdk8/java/util/ArrayList/ArrayList%E7%B1%BB%E4%B8%8A%E5%B1%82%E7%BB%93%E6%9E%84.png" alt="ArrayList类上层结构"></p><p>查看属性</p><p><img src="/image/code-adventure/jdk8/java/util/ArrayList/ArrayList%E5%AE%8C%E6%95%B4%E7%B1%BB%E5%9B%BE.png" alt="ArrayList完整类图"></p><h2 id="源码属性"><a href="#源码属性" class="headerlink" title="源码属性"></a>源码属性</h2><h3 id="AbstractList中的modCount字段阐述"><a href="#AbstractList中的modCount字段阐述" class="headerlink" title="AbstractList中的modCount字段阐述"></a><code>AbstractList</code>中的<code>modCount</code>字段阐述</h3><p>此列表被结构修改的次数。结构修改是指改变列表的大小，或者以某种方式扰乱列表，从而导致正在进行的迭代可能产生不正确的结果。 </p><p>该字段由迭代器和listIterator方法返回的迭代器和列表迭代器实现使用。</p><p>如果该字段的值意外更改，迭代器(或列表迭代器)将抛出<code>ConcurrentModificationException</code>异常，以响应<code>next</code>、<code>remove</code>、<code>previous</code>、<code>set</code>或<code>add</code>操作。</p><p>这提供了快速故障行为，而不是在迭代期间面对并发修改时的非确定性行为。</p><p>子类是否使用此字段是可选的。如果一个子类希望提供快速失败迭代器(和列表迭代器)，那么它只需要在它的<code>add(int, E)</code>和<code>remove(int)</code>方法(以及它覆盖的导致列表结构修改的任何其他方法)中增加这个字段。</p><p>单个调用<code>add(int, E)</code>或<code>remove(int)</code>必须向该字段添加不超过一个，否则迭代器(和列表迭代器)将抛出虚假的<code>concurrentmodificationexception</code>异常。</p><p>如果实现不希望提供快速失败迭代器，则可以忽略此字段。</p><h2 id="源码方法"><a href="#源码方法" class="headerlink" title="源码方法"></a>源码方法</h2><h3 id="removeIf-Predicate"><a href="#removeIf-Predicate" class="headerlink" title="removeIf(Predicate)"></a>removeIf(Predicate)</h3><h4 id="逻辑分析"><a href="#逻辑分析" class="headerlink" title="逻辑分析"></a>逻辑分析</h4><p>大致可分为几个步骤：</p><ol><li>入参判空</li><li>初始化<code>removeCount</code>: 方便后面对并发修改异常判断</li><li><code>BitSet</code>：位图</li><li>expectedModCount ：预期修改的数量，<code>modCount</code>为<code>ArrayList</code>的属性继承自<code>AbstractList</code>，本文末尾会对<code>modCount</code>字段进行翻译</li><li>遍历符合remove条件的元素存入<code>BitSet</code></li><li>判断是否并发修改异常（<code>ConcurrentModificationException</code>）</li><li>将幸存的元素移到被删除的元素所留下的空间上 [借助<code>BitSet</code>]，gc回收（将<code>newSize</code>后面的元素手动置空，消除引用），判断是否并发修改异常</li><li><code>removeCount &gt; 0</code>返回结果</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">removeIf</span><span class="params">(Predicate&lt;? <span class="built_in">super</span> E&gt; filter)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(filter);</span><br><span class="line">    <span class="comment">// figure out which elements are to be removed [找出要删除的元素]</span></span><br><span class="line">    <span class="comment">// any exception thrown from the filter predicate at this stage [在此阶段从筛选器谓词抛出的任何异常]</span></span><br><span class="line">    <span class="comment">// will leave the collection unmodified [将不修改集合]</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">removeCount</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">BitSet</span> <span class="variable">removeSet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BitSet</span>(size);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> <span class="built_in">this</span>.size;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>; modCount == expectedModCount &amp;&amp; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">E</span> <span class="variable">element</span> <span class="operator">=</span> (E) elementData[i];</span><br><span class="line">        <span class="keyword">if</span> (filter.test(element)) &#123;</span><br><span class="line">            removeSet.set(i);</span><br><span class="line">            removeCount++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// shift surviving elements left over the spaces left by removed elements [将幸存的元素移到被删除的元素所留下的空间上]</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">anyToRemove</span> <span class="operator">=</span> removeCount &gt; <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (anyToRemove) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">newSize</span> <span class="operator">=</span> size - removeCount;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>, j=<span class="number">0</span>; (i &lt; size) &amp;&amp; (j &lt; newSize); i++, j++) &#123;</span><br><span class="line">            i = removeSet.nextClearBit(i);</span><br><span class="line">            elementData[j] = elementData[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k=newSize; k &lt; size; k++) &#123;</span><br><span class="line">            elementData[k] = <span class="literal">null</span>;  <span class="comment">// Let gc do its work  [gc 回收]</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.size = newSize;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        modCount++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> anyToRemove;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，实际发挥作用的是一个<code>Bitset</code>，有兴趣的小伙伴可以去了解下，这里仅做简单介绍【埋坑】！</p><h4 id="Bitset"><a href="#Bitset" class="headerlink" title="Bitset"></a><code>Bitset</code></h4><p>Bitset，也就是位图，由于可以用非常紧凑的格式来表示给定范围的连续数据而经常出现在各种算法设计中。</p><p>基本原理是，用1位来表示一个数据是否出现过，0为没有出现过，1表示出现过。使用用的时候既可根据某一个是否为0表示此数是否出现过。一个1G的空间，有 8<em>1024</em>1024<em>1024&#x3D;8.58</em>10^9bit，也就是可以表示85亿个不同的数。常见的应用是那些需要对海量数据进行一些统计工作的时候，比如日志分析等。</p><h2 id="经验总结"><a href="#经验总结" class="headerlink" title="经验总结"></a>经验总结</h2><h3 id="ArrayList扩容的执行流程"><a href="#ArrayList扩容的执行流程" class="headerlink" title="ArrayList扩容的执行流程"></a><code>ArrayList</code>扩容的执行流程</h3><p>先看下面代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ArrayListMoreTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">ensureCapacity</span><span class="params">()</span> &#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">// 扩容</span></span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Integer[] nums = <span class="keyword">new</span> <span class="title class_">Integer</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">        Integer[] newNums = Arrays.copyOf(nums, <span class="number">6</span>);</span><br><span class="line">        Integer[] newNums2 = <span class="keyword">new</span> <span class="title class_">Integer</span>[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">        System.arraycopy(nums, <span class="number">0</span>, newNums2, <span class="number">0</span>,</span><br><span class="line">                Math.min(nums.length, newNums2.length));</span><br><span class="line"></span><br><span class="line">        System.out.println(nums.equals(newNums));</span><br><span class="line">        System.out.println(nums.equals(newNums2));</span><br><span class="line">        System.out.println(Arrays.toString(nums) + <span class="string">&quot;: &quot;</span> + nums.length);</span><br><span class="line">        System.out.println(Arrays.toString(newNums) + <span class="string">&quot;: &quot;</span> + newNums.length);</span><br><span class="line">        System.out.println(Arrays.toString(newNums2) + <span class="string">&quot;: &quot;</span> + newNums2.length);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对JDK源码断点追踪后，梳理了扩容流程：</p><p>扩容分为三步：确保内部容量、赋值、返回true</p><p>确保内部容量 <code>&#123;@link ArrayList#ensureCapacityInternal(int)&#125;</code>可进一步分解：</p><ul><li>计算最小容量<code>&#123;@link ArrayList#calculateCapacity(Object[], int)&#125;</code>，若当前数组无数据，则设置默认长度为10，否则为<code>minCapacity</code></li><li>确保显式容量<code>&#123;@link ArrayList#ensureExplicitCapacity(int)&#125;</code> 关键步骤，做了<code>modCount++</code>及<code>&#123;@link ArrayList#grow(int)&#125; </code>当<code>minCapacity</code>大于<code>elementData.length</code>时，会触发扩容操作</li></ul><p>扩容操作</p><ol><li><p>按照<code>oldCapacity = elementData.length</code>位运算 右移 (x + x&#x2F;2) 不等于1.5倍，获得新的容量newCapacity</p></li><li><p>新容量与<code>minCapacity</code>比较，取最大值为新容量，且最值要保证在<code>Integer.MAX </code>与 0 (<code>over flow</code>)之间</p></li><li><p>根据新容量大小，拷贝原数据至新数组（新容量大小为新数组长度）</p></li></ol><h2 id="避坑指南"><a href="#避坑指南" class="headerlink" title="避坑指南"></a>避坑指南</h2><h3 id="ArrayList并发add问题"><a href="#ArrayList并发add问题" class="headerlink" title="ArrayList并发add问题"></a><code>ArrayList</code>并发<code>add</code>问题</h3><ol><li>数据丢失问题</li><li>值为null</li></ol><p>在<code>ArrayList#add(Object)</code>源码中涉及两个重要参数<code>modCount</code>和<code>size</code>。由于<code>add</code>方法内没有对<code>modCount</code>做并发修改校验,<br>所以不会触发<code>fail-fast</code>；而<code>size</code>, 它是非volatile，所以不保证可读性（故千万不能用<code>size</code>来判断一个并发add操作是否完成）。<br>根据以上描述，我们可以用一行代码<code>elementData[size++] = e;</code>解释上面的两个问题：</p><ul><li>存在非原子操作size++ 【故存在数据丢失问题】</li><li>e可能存在指令重排， 在刚刚申请内存空间并绑定内存地址却未赋值时，就被其他线程拿去添加数据了</li></ul><h3 id="ArrayList迭代器remove-及-for循环remove"><a href="#ArrayList迭代器remove-及-for循环remove" class="headerlink" title="ArrayList迭代器remove 及 for循环remove"></a><code>ArrayList</code>迭代器remove 及 for循环remove</h3><blockquote><p>先说结论，要使用迭代器来进行remove操作，for循环remove会报错</p></blockquote><p><strong>迭代器是如何保证循环删除不报错的？</strong></p><p>在<code>ArrayList#iterator()</code>内部实例化自己重写的迭代器操作,我们可以看到<code>ArrayList.Itr</code>在<code>Itr</code>类中有句代码<br><code>int expectedModCount = modCount;</code>,当执行迭代器内相关方法时会检查两值的变化，若不相等则触发并发修改异常<br><code>java.util.ConcurrentModificationException</code>。 </p><p>在<code>Itr</code>类重写的相关方法中，我们会看到手动维护两值相等的语句<code>&#123;@code expectedModCount = modCount;&#125;</code>。 通过这个细节，我们可以去<code>&#123;@link  ArrayList#remove(Object)&#125;</code>源码中寻找踪迹，该方法调用了<code>ArrayList#fastRemove()</code>方法，<code>fastRemove</code>方法中只对<code>modCount++;</code>做了操作，在迭代器中的<code>&#123;@code expectedModCount&#125;</code>就不会与之相等，进而触发并发修改异常（fail-fast）。<br>参照：<code>ArrayList#removeIf(Predicate)</code> 也维护了<code>final int expectedModCount = modCount;</code></p><h2 id="埋坑"><a href="#埋坑" class="headerlink" title="埋坑"></a>埋坑</h2><ul><li>什么是<code>Bitset</code>?</li></ul>]]></content>
      
      
      <categories>
          
          <category> JDK8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ArrayList </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis3 整体架构</title>
      <link href="/5ce30391.html"/>
      <url>/5ce30391.html</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis-整体架构"><a href="#MyBatis-整体架构" class="headerlink" title="MyBatis 整体架构"></a>MyBatis 整体架构</h1><h2 id="源码结构"><a href="#源码结构" class="headerlink" title="源码结构"></a>源码结构</h2><p><img src="/image/code-adventure/mybatis3/assets/MyBatis3%E6%BA%90%E7%A0%81%E7%BB%93%E6%9E%84.png" alt="MyBatis3源码结构"></p><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><p><img src="/image/code-adventure/mybatis3/assets/MyBatis3%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.png" alt="MyBatis3整体架构"></p><h2 id="基础支持层"><a href="#基础支持层" class="headerlink" title="基础支持层"></a>基础支持层</h2><h3 id="反射模块"><a href="#反射模块" class="headerlink" title="反射模块"></a>反射模块</h3><p>该模块对Java原生的反射进行了良好的封装，并且对反射操作进行了一系列优化，例如缓存了类的元数据，提高了反射操作的性能。</p><h3 id="类型转换模块"><a href="#类型转换模块" class="headerlink" title="类型转换模块"></a>类型转换模块</h3><p>作用：</p><ol><li>为简化配置文件提供了别名机制</li><li>实现JDBC类型与Java类型之间的转换，该功能在为SQL语句绑定实参以及映射查询结果集时都会涉及。</li></ol><h3 id="资源加载模块"><a href="#资源加载模块" class="headerlink" title="资源加载模块"></a>资源加载模块</h3><p>对类加载器进行封装，确定类加载器的使用顺序，并提供了加载类文件以及其他资源文件的功能。</p><h3 id="解析器模块"><a href="#解析器模块" class="headerlink" title="解析器模块"></a>解析器模块</h3><p>主要提供了两个功能：</p><ol><li>对XPath进行封装，为MyBatis初始化时解析mybatis-config.xml配置文件以及映射配置文件提供支持。</li><li>为处理动态SQL语句中的占位符提供支持。</li></ol><h3 id="缓存模块"><a href="#缓存模块" class="headerlink" title="缓存模块"></a>缓存模块</h3><p>MyBatis中提供了一级缓存和二级缓存，而这两级缓存都是依赖于基础支持层中的缓存模块实现的。</p><p>MyBatis中自带的这两级缓存与MyBatis以及整个应用是运行在同一个JVM中的，共享同一块堆内存。</p><p><img src="/image/code-adventure/mybatis3/assets/%E7%BC%93%E5%AD%98%E6%B5%81%E7%A8%8B.png" alt="/image/code-adventure/mybatis3/assets/缓存流程.png"></p><h3 id="Binding模块"><a href="#Binding模块" class="headerlink" title="Binding模块"></a>Binding模块</h3><p>MyBatis通过Binding模块将用户自定义的Mapper接口与映射配置文件关联起来，</p><p>系统可以通过调用自定义Mapper接口中的方法执行相应的SQL语句完成数据库操作。</p><h2 id="核心处理层"><a href="#核心处理层" class="headerlink" title="核心处理层"></a>核心处理层</h2><h3 id="配置解析"><a href="#配置解析" class="headerlink" title="配置解析"></a>配置解析</h3><p>在MyBatis初始化过程中，会加载mybatis-config.xml配置文件、映射配置文件以及Mapper接口中的注解信息，解析后的配置信息会形成相应的对象并保存到Configuration对象中。</p><h3 id="SQL解析与scripting模块"><a href="#SQL解析与scripting模块" class="headerlink" title="SQL解析与scripting模块"></a>SQL解析与scripting模块</h3><p>MyBatis中的scripting模块会根据用户传入的实参，解析映射文件中定义的动态SQL节点，并形成数据库可执行的SQL语句。之后会处理SQL语句中的占位符，绑定用户传入的实参。</p><h3 id="SQL执行"><a href="#SQL执行" class="headerlink" title="SQL执行"></a>SQL执行</h3><p>SQL语句的执行涉及多个组件，其中比较重要的是Executor、StatementHandler、ParameterHandler和ResultSetHandler。</p><p>Executor主要负责维护一级缓存和二级缓存，并提供事务管理的相关操作，它会将数据库相关操作委托给StatementHandler完成。</p><p>StatementHandler首先通过ParameterHandler完成SQL语句的实参绑定，然后通过java.sql.Statement对象执行SQL语句并得到结果集，最后通过ResultSetHandler完成结果集的映射，得到结果对象并返回。</p><p>下图展示了MyBatis执行一条SQL语句的大致过程。</p><p><img src="/image/code-adventure/mybatis3/assets/Sql%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B.png" alt="Sql执行过程"></p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>可以通过添加用户自定义插件的方式对MyBatis进行扩展。</p><h2 id="接口层"><a href="#接口层" class="headerlink" title="接口层"></a>接口层</h2><p>核心是SqlSession接口，该接口中定义了MyBatis暴露给应用程序调用的API，也就是上层应用与MyBatis交互的桥梁。</p><p>接口层在接收到调用请求时，会调用核心处理层的相应模块来完成具体的数据库操作。</p>]]></content>
      
      
      <categories>
          
          <category> MyBatis3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis3 整体架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中介模式</title>
      <link href="/3c7ba7.html"/>
      <url>/3c7ba7.html</url>
      
        <content type="html"><![CDATA[<h1 id="中介模式（行为型）"><a href="#中介模式（行为型）" class="headerlink" title="中介模式（行为型）"></a>中介模式（行为型）</h1><p>中介者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。<br>这种模式提供了一个中介类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。中介者模式属于行为型模式。</p><p>中介模式定义了一个单独的（中介）对象，来封装一组对象之间的交互。将这组对象之间的交互委派给与中介对象交互，来避免对象之间的直接交互。</p><blockquote><p>核心：引入中间层</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong> 用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。</p><p><strong>主要解决：</strong> 对象与对象之间存在大量的关联关系，这样势必会导致系统的结构变得很复杂，<br>同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理。</p><p><strong>何时使用：</strong> 多个类相互耦合，形成了网状结构。</p><p><strong>如何解决：</strong> 将上述网状结构分离为星型结构。</p><p><strong>关键代码：</strong> 对象 Colleague 之间的通信封装到一个类中单独处理。</p><p><strong>应用实例：</strong></p><ol><li>机场调度系统。</li><li>MVC 框架，其中C（控制器）就是 M（模型）和 V（视图）的中介者。</li></ol><p><strong>优点：</strong></p><ol><li>降低了类的复杂度，将一对多转化成了一对一。</li><li>各个类之间的解耦。</li><li>符合迪米特原则。</li></ol><p><strong>缺点：</strong> 中介者会庞大，变得复杂难以维护。</p><p><strong>使用场景：</strong></p><ol><li>系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象。</li><li>想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。</li></ol><p><strong>注意事项：</strong> 不应当在职责混乱的时候使用。</p><h2 id="经典案例：机场调度"><a href="#经典案例：机场调度" class="headerlink" title="经典案例：机场调度"></a>经典案例：机场调度</h2><p>为了让飞机在飞行的时候互不干扰，每架飞机都需要知道其他飞机每时每刻的位置，这就需要时刻跟其他飞机通信。飞机通信形成的通信网络就会无比复杂。</p><p><img src="/image/design-pattern/behavioral/%E4%B8%AD%E4%BB%8B%E6%A8%A1%E5%BC%8F/%E6%97%A0%E5%A1%94%E5%8F%B0%E8%B0%83%E5%BA%A6%E5%9C%BA%E6%99%AF.png" alt="无塔台调度场景"></p><p>这个时候，我们通过引入“塔台”这样一个中介，让每架飞机只跟塔台来通信，发送自己的位置给塔台，由塔台来负责每架飞机的航线调度。这样就大大简化了通信网络。</p><p><img src="/image/design-pattern/behavioral/%E4%B8%AD%E4%BB%8B%E6%A8%A1%E5%BC%8F/%E5%A1%94%E5%8F%B0%E8%B0%83%E5%BA%A6%E5%9C%BA%E6%99%AF.png" alt="塔台调度场景"></p><p>代码</p><p>中介</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tower</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">chatLog</span><span class="params">(Plane plane, String message)</span> &#123;</span><br><span class="line">        System.out.println(plane.hashCode() + <span class="string">&quot; message: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Plane</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String sayWords;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">chat</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        Tower.chatLog(<span class="built_in">this</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MediatorTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Plane</span> <span class="variable">planeA</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Plane</span>();</span><br><span class="line">        <span class="type">Plane</span> <span class="variable">planeB</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Plane</span>();</span><br><span class="line"></span><br><span class="line">        planeA.chat(<span class="string">&quot;It&#x27;s sunny&quot;</span>);</span><br><span class="line">        planeB.chat(<span class="string">&quot;It rains&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">858952163 message: It&#x27;s sunny</span><br><span class="line">1201484275 message: It rains</span><br></pre></td></tr></table></figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote><ul><li><a href="https://www.runoob.com/design-pattern">菜鸟编程</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1281319541669922">廖雪峰设计模式</a></li><li>设计模式之美：王争</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行为型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解析器模式</title>
      <link href="/a76c78cc.html"/>
      <url>/a76c78cc.html</url>
      
        <content type="html"><![CDATA[<h1 id="解析器模式（行为型）"><a href="#解析器模式（行为型）" class="headerlink" title="解析器模式（行为型）"></a>解析器模式（行为型）</h1><p>解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式，它属于行为型模式。<br>这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong> 给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。</p><p><strong>主要解决：</strong> 对于一些固定文法构建一个解释句子的解释器。</p><p><strong>何时使用：</strong> 如果一种特定类型的问题发生的频率足够高，那么可能就值得将该问题的各个实例表述为一个简单语言中的句子。<br>这样就可以构建一个解释器，该解释器通过解释这些句子来解决该问题。</p><p><strong>如何解决：</strong> 构建语法树，定义终结符与非终结符。</p><p><strong>关键代码：</strong> 构建环境类，包含解释器之外的一些全局信息，一般是 HashMap。</p><p><strong>应用实例：</strong> 编译器、运算表达式计算。</p><p><strong>优点：</strong></p><ol><li>可扩展性比较好，灵活。</li><li>增加了新的解释表达式的方式。</li><li>易于实现简单文法。</li></ol><p><strong>缺点：</strong></p><ol><li>可利用场景比较少。</li><li>对于复杂的文法比较难维护。</li><li>解释器模式会引起类膨胀。</li><li>解释器模式采用递归调用方法。</li></ol><p><strong>使用场景：</strong></p><ol><li>可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。</li><li>一些重复出现的问题可以用一种简单的语言来进行表达。</li><li>一个简单语法需要解释的场景。</li></ol><p><strong>注意事项：</strong> 可利用场景比较少，JAVA 中如果碰到可以用 expression4J 代替。</p><h2 id="案例：姓名解析器"><a href="#案例：姓名解析器" class="headerlink" title="案例：姓名解析器"></a>案例：姓名解析器</h2><p>定义解析器接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TextExpression</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">interpret</span><span class="params">(String context)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NameTextExpression</span> <span class="keyword">implements</span> <span class="title class_">TextExpression</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NameTextExpression</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">interpret</span><span class="params">(String context)</span> &#123;</span><br><span class="line">        <span class="comment">// 判断姓氏</span></span><br><span class="line">        <span class="keyword">return</span> name.startsWith(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建组合式表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AndExpression</span> <span class="keyword">implements</span> <span class="title class_">TextExpression</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TextExpression expr1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TextExpression expr2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AndExpression</span><span class="params">(TextExpression expr1, TextExpression expr2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.expr1 = expr1;</span><br><span class="line">        <span class="built_in">this</span>.expr2 = expr2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">interpret</span><span class="params">(String context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> expr1.interpret(context) &amp;&amp; expr2.interpret(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrExpression</span> <span class="keyword">implements</span> <span class="title class_">TextExpression</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TextExpression expr1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TextExpression expr2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrExpression</span><span class="params">(TextExpression expr1, TextExpression expr2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.expr1 = expr1;</span><br><span class="line">        <span class="built_in">this</span>.expr2 = expr2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">interpret</span><span class="params">(String context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> expr1.interpret(context) || expr2.interpret(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterpreterPatternTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">TextExpression</span> <span class="variable">z3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NameTextExpression</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        <span class="type">TextExpression</span> <span class="variable">z4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NameTextExpression</span>(<span class="string">&quot;张四&quot;</span>);</span><br><span class="line">        <span class="type">TextExpression</span> <span class="variable">l4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NameTextExpression</span>(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// z3、z4 俩人都姓张吗</span></span><br><span class="line">        <span class="type">AndExpression</span> <span class="variable">andExpression</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AndExpression</span>(z3, z4);</span><br><span class="line">        <span class="comment">// z4、l4 俩人都姓张吗</span></span><br><span class="line">        <span class="type">AndExpression</span> <span class="variable">andExpression2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AndExpression</span>(z4, l4);</span><br><span class="line">        <span class="comment">// z3、z4 俩人有姓张的吗</span></span><br><span class="line">        <span class="type">OrExpression</span> <span class="variable">orExpression</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrExpression</span>(z3, z4);</span><br><span class="line"></span><br><span class="line">        System.out.println(andExpression.interpret(<span class="string">&quot;张&quot;</span>));</span><br><span class="line">        System.out.println(andExpression2.interpret(<span class="string">&quot;张&quot;</span>));</span><br><span class="line">        System.out.println(orExpression.interpret(<span class="string">&quot;张&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">true</span><br><span class="line">false</span><br><span class="line">true</span><br></pre></td></tr></table></figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote><ul><li><a href="https://www.runoob.com/design-pattern">菜鸟编程</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1281319508115489">廖雪峰设计模式</a></li><li>设计模式之美：王争</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行为型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令模式</title>
      <link href="/78134e07.html"/>
      <url>/78134e07.html</url>
      
        <content type="html"><![CDATA[<h1 id="命令模式（行为型）"><a href="#命令模式（行为型）" class="headerlink" title="命令模式（行为型）"></a>命令模式（行为型）</h1><blockquote><p>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。</p></blockquote><p>命令模式（Command Pattern）是一种数据驱动的设计模式，它属于行为型模式。请求以命令的形式包裹在对象中，并传给调用对象。<br>调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong> 将一个请求封装成一个对象，从而使您可以用不同的请求对客户进行参数化。</p><p><strong>主要解决：</strong> 在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，<br>但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。</p><p><strong>何时使用：</strong> 在某些场合，比如要对行为进行”记录、撤销&#x2F;重做、事务”<br>等处理，这种无法抵御变化的紧耦合是不合适的。在这种情况下，如何将”行为请求者”与”行为实现者”解耦？将一组行为抽象为对象，可以实现二者之间的松耦合。</p><p><strong>如何解决：</strong> 通过调用者调用接受者执行命令，顺序：调用者→命令→接受者。</p><p><strong>关键代码：</strong> 定义三个角色：</p><ol><li>接受者（received）：具体的执行命令对象</li><li>命令（command）：包括命令的抽象、命令的实现</li><li>调用者（invoker）：使用命令对象的入口</li></ol><p><strong>优点：</strong></p><ol><li>降低了系统耦合度。</li><li>新的命令可以很容易添加到系统中去。</li></ol><p><strong>缺点：</strong> 使用命令模式可能会导致某些系统有过多的具体命令类。</p><p><strong>使用场景：</strong> 认为是命令的地方都可以使用命令模式&gt;</p><p><strong>注意事项：</strong> 系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作，也可以考虑使用命令模式。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>命令的抽象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令接受者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Receiver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Receiver</span><span class="params">(String name, <span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;buy &quot;</span> + count + <span class="string">&quot; 个 &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sell &quot;</span> + count + <span class="string">&quot; 个 &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体的命令</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BuyOrder</span> <span class="keyword">implements</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Receiver receiver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BuyOrder</span><span class="params">(Receiver receiver)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        receiver.buy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SellOrder</span> <span class="keyword">implements</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Receiver receiver;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SellOrder</span><span class="params">(Receiver receiver)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.receiver = receiver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        receiver.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令请求者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Invoker</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟请求排队</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Order&gt; orderList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">takeOrder</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        orderList.add(order);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">undoOrder</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        orderList.remove(order);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">placeOrders</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Order order : orderList) &#123;</span><br><span class="line">            order.execute();</span><br><span class="line">        &#125;</span><br><span class="line">        orderList.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommandPatternTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Receiver</span> <span class="variable">receiver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Receiver</span>(<span class="string">&quot;土豆&quot;</span>, <span class="number">100</span>);</span><br><span class="line">        <span class="type">BuyOrder</span> <span class="variable">buyOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BuyOrder</span>(receiver);</span><br><span class="line">        <span class="type">SellOrder</span> <span class="variable">sellOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SellOrder</span>(receiver);</span><br><span class="line"></span><br><span class="line">        <span class="type">Invoker</span> <span class="variable">invoker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Invoker</span>();</span><br><span class="line">        <span class="comment">// 添加请求</span></span><br><span class="line">        invoker.takeOrder(buyOrder);</span><br><span class="line">        invoker.takeOrder(sellOrder);</span><br><span class="line">        invoker.takeOrder(sellOrder);</span><br><span class="line">        <span class="comment">// 撤销请求</span></span><br><span class="line">        invoker.undoOrder(sellOrder);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历执行请求</span></span><br><span class="line">        invoker.placeOrders();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">buy 100个 土豆</span><br><span class="line">sell 100个 土豆</span><br></pre></td></tr></table></figure><h2 id="命令模式和访问者模式区别"><a href="#命令模式和访问者模式区别" class="headerlink" title="命令模式和访问者模式区别"></a>命令模式和访问者模式区别</h2><h3 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h3><p>两种设计模式都是对操作来进行封装因为两种模式中的操作都是多变可生成多种的。</p><p><code>命令模式</code>，封装的是请求操作。</p><p><code>访问者模式</code>，封装的是对某个数据结构的操作。</p><h3 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h3><p>设计思想的不同</p><p><code>命令模式</code>，重点是为了对命令请求者和命令接受者两种角色间的解耦，对于命令接受者，能对请求进行参数化操作，请求排队，撤销或恢复的操作。</p><p><code>访问者模式</code>，重点是在操作接受者（数据结构元素）和对数据结构元素的新操作的添加和定义上。</p><h3 id="使用偏好"><a href="#使用偏好" class="headerlink" title="使用偏好"></a>使用偏好</h3><p><code>命令模式</code>，常用在要对行为操作进行”记录、撤销&#x2F;重做、事务”等处理，并且需要对抵御变化的紧耦合，能实现”行为请求者”与”行为实现者”的解耦。</p><p><code>访问者模式</code>，需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”（不改变该对象的数据结构）这些对象的类。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>它主要的应用场景是给命令的执行附加功能，换句话说，就是控制命令的执行，比如，排队、异步、延迟执行命令、给命令执行记录日志、撤销重做命令等等。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote><ul><li><a href="https://www.runoob.com/design-pattern">菜鸟编程</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1281319491338273">廖雪峰设计模式</a></li><li>设计模式之美：王争</li><li><a href="https://www.freesion.com/article/8281851088/">命令模式和访问者模式区别</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行为型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>备忘录模式</title>
      <link href="/c3176455.html"/>
      <url>/c3176455.html</url>
      
        <content type="html"><![CDATA[<h1 id="备忘录模式（行为型）"><a href="#备忘录模式（行为型）" class="headerlink" title="备忘录模式（行为型）"></a>备忘录模式（行为型）</h1><p>备忘录模式（Memento Pattern）保存一个对象的某个状态，以便在适当的时候恢复对象。备忘录模式属于行为型模式。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong> 在<strong>不破坏封装性</strong>的前提下，捕获一个对象的内部状态，并在<strong>该对象之外保存</strong>这个状态。</p><p><strong>主要解决：</strong> 所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态。</p><p><strong>何时使用：</strong> 很多时候我们总是需要记录一个对象的内部状态，这样做的目的就是为了允许用户取消不确定或者错误的操作，能够恢复到他原先的状态。</p><p><strong>如何解决：</strong> 通过一个备忘录类专门存储对象状态。</p><p><strong>关键代码：</strong> 客户不与备忘录类耦合，与备忘录管理类耦合。</p><p><strong>优点：</strong></p><ol><li>给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。</li><li>实现了信息的封装，使得用户不需要关心状态的保存细节。</li></ol><p><strong>缺点：</strong> 消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。</p><p><strong>使用场景：</strong></p><ol><li>需要保存&#x2F;恢复数据的相关状态场景。</li><li>提供一个可回滚的操作。</li></ol><p><strong>注意事项：</strong></p><ol><li>为了符合迪米特原则，还要增加一个管理备忘录的类。</li><li>为了节约内存，可使用原型模式+备忘录模式。</li></ol><blockquote><p>快照本身是不可变的，理论上讲，不应该包含任何 set() 等修改内部状态的函数</p></blockquote><h2 id="案例：小记"><a href="#案例：小记" class="headerlink" title="案例：小记"></a>案例：小记</h2><p>备忘录类（快照类）: 包含了要被恢复的对象的状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NoteMemento</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String tip;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NoteMemento</span><span class="params">(String tip)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tip = tip;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建备忘录：提供创建、恢复快照操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Originator</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String tip;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> NoteMemento <span class="title function_">createSnapshot</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NoteMemento</span>(tip);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">restoreSnapshotTip</span><span class="params">(NoteMemento snapshot)</span> &#123;</span><br><span class="line">        tip = snapshot.getTip();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>备忘录管理: 增量备份，提供恢复功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Caretaker</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;NoteMemento&gt; SNAPSHOTS = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(NoteMemento state)</span> &#123;</span><br><span class="line">        SNAPSHOTS.add(state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> NoteMemento <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SNAPSHOTS.get(index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MementoTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Caretaker</span> <span class="variable">management</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Caretaker</span>();</span><br><span class="line">        <span class="type">Originator</span> <span class="variable">originator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Originator</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// snapshot</span></span><br><span class="line">        originator.setTip(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="type">NoteMemento</span> <span class="variable">snapshot</span> <span class="operator">=</span> originator.createSnapshot();</span><br><span class="line">        management.add(snapshot);</span><br><span class="line"></span><br><span class="line">        originator.setTip(<span class="string">&quot;444&quot;</span>);</span><br><span class="line">        <span class="type">NoteMemento</span> <span class="variable">snapshot2</span> <span class="operator">=</span> originator.createSnapshot();</span><br><span class="line">        management.add(snapshot2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// restore</span></span><br><span class="line">        <span class="type">NoteMemento</span> <span class="variable">snapshot3</span> <span class="operator">=</span> management.get(<span class="number">1</span>);</span><br><span class="line">        originator.restoreSnapshotTip(snapshot3);</span><br><span class="line">        System.out.println(originator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Originator(tip=444)</span><br></pre></td></tr></table></figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote><ul><li><a href="https://www.runoob.com/design-pattern">菜鸟编程</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1281319562641441">廖雪峰设计模式</a></li><li>设计模式之美：王争</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行为型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>访问者模式</title>
      <link href="/64b51ed9.html"/>
      <url>/64b51ed9.html</url>
      
        <content type="html"><![CDATA[<h1 id="访问者模式（行为型）"><a href="#访问者模式（行为型）" class="headerlink" title="访问者模式（行为型）"></a>访问者模式（行为型）</h1><p>在访问者模式（Visitor Pattern）中，我们使用了一个访问者类，它改变了元素类的执行算法。<br>通过这种方式，元素的执行算法可以随着访问者改变而改变。这种类型的设计模式属于行为型模式。<br>根据模式，元素对象已接受访问者对象，这样访问者对象就可以处理元素对象上的操作。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong> 主要将数据结构与数据操作分离。</p><p><strong>主要解决：</strong> 稳定的数据结构和易变的操作耦合问题。</p><p><strong>何时使用：</strong> 需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”这些对象的类，使用访问者模式将这些封装到类中。</p><p><strong>如何解决：</strong> 在被访问的类里面加一个对外提供接待访问者的接口。</p><p><strong>关键代码：</strong> 在数据基础类里面有一个方法接受访问者，将自身引用传入访问者。</p><p><strong>应用实例：</strong> 您在朋友家做客，您是访问者，朋友接受您的访问，您通过朋友的描述，然后对朋友的描述做出一个判断，这就是访问者模式。</p><p><strong>优点：</strong></p><ol><li>符合单一职责原则。</li><li>优秀的扩展性。</li><li>灵活性。</li></ol><p><strong>缺点：</strong></p><ol><li>具体元素对访问者公布细节，违反了迪米特原则。</li><li>具体元素变更比较困难。</li><li>违反了依赖倒置原则，依赖了具体类，没有依赖抽象。</li></ol><p><strong>使用场景：</strong></p><ol><li>对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。</li><li>需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”这些对象的类，也不希望在增加新操作时修改这些类。</li></ol><p><strong>注意事项：</strong> 访问者可以对功能进行统一，可以做报表、UI、拦截器与过滤器。</p><blockquote><p>访问者模式（Visitor）是一种操作一组对象的操作，它的目的是不改变对象的定义，但允许新增不同的访问者，来定义新的操作。</p></blockquote><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><blockquote><p><a href="https://www.runoob.com/design-pattern/visitor-pattern.html">菜鸟教程代码案例</a></p></blockquote><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>假设我们从网站上爬取了很多资源文件，它们的格式有三种：PDF、PPT、Word。我们现在要开发一个工具来处理这批资源文件。<br>这个工具的其中一个功能是，把这些资源文件中的文本内容抽取出来放到 txt 文件中。如何实现？</p><p>抽象访问者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ResourceFile</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String filePath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResourceFile</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.filePath = filePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义访问者的功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">extract2txt</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PdfFile</span> <span class="keyword">extends</span> <span class="title class_">ResourceFile</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PdfFile</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(filePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">extract2txt</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Extract PDF.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PPTFile</span> <span class="keyword">extends</span> <span class="title class_">ResourceFile</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PPTFile</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(filePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">extract2txt</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Extract PPT.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VisitorTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testA</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resourceDirectory</span> <span class="operator">=</span> <span class="string">&quot;D&quot;</span> + File.pathSeparator;</span><br><span class="line"></span><br><span class="line">        List&lt;ResourceFile&gt; resourceFiles = listAllResourceFilesA(resourceDirectory);</span><br><span class="line">        <span class="keyword">for</span> (ResourceFile resourceFile : resourceFiles) &#123;</span><br><span class="line">            resourceFile.extract2txt();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;ResourceFile&gt; <span class="title function_">listAllResourceFilesA</span><span class="params">(String resourceDirectory)</span> &#123;</span><br><span class="line">        List&lt;ResourceFile&gt; resourceFiles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        resourceFiles.add(<span class="keyword">new</span> <span class="title class_">PdfFile</span>(resourceDirectory + <span class="string">&quot;a.pdf&quot;</span>));</span><br><span class="line">        resourceFiles.add(<span class="keyword">new</span> <span class="title class_">PPTFile</span>(resourceDirectory + <span class="string">&quot;c.ppt&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> resourceFiles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Extract PDF.</span><br><span class="line">Extract PPT.</span><br></pre></td></tr></table></figure><h4 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h4><p>如果要继续添加新的功能，那么对于访问者类<code>PdfFile</code> 、<code>PPTFile</code> 来说会越来越臃肿，我们该如何避免呢？</p><ul><li>需要将访问者类中功能的代码解耦，单独实现。</li></ul><p>代码具体实现见迭代一。</p><h3 id="迭代一-fail"><a href="#迭代一-fail" class="headerlink" title="迭代一 [fail]"></a>迭代一 [fail]</h3><p>我们把抽取文本内容的操作，设计成重载函数，具体代码如下：</p><p>访问者类中功能单独实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtractorB</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">extract2txt</span><span class="params">(PPTFileB pptFile)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Extract PPT.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">extract2txt</span><span class="params">(PdfFileB pdfFileB)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Extract PDF.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象访问者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ResourceFileB</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String filePath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResourceFileB</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.filePath = filePath;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体访问者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PdfFileB</span> <span class="keyword">extends</span> <span class="title class_">ResourceFileB</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PdfFileB</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(filePath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PPTFileB</span> <span class="keyword">extends</span> <span class="title class_">ResourceFileB</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PPTFileB</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(filePath);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VisitorTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testB</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">resourceDirectory</span> <span class="operator">=</span> <span class="string">&quot;D&quot;</span> + File.pathSeparator;</span><br><span class="line"></span><br><span class="line">        List&lt;ResourceFile&gt; resourceFiles = listAllResourceFilesA(resourceDirectory);</span><br><span class="line">        <span class="keyword">for</span> (ResourceFile resourceFile : resourceFiles) &#123;</span><br><span class="line">            resourceFile.extract2txt(); <span class="comment">// [编译失败]</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;ResourceFile&gt; <span class="title function_">listAllResourceFilesB</span><span class="params">(String resourceDirectory)</span> &#123;</span><br><span class="line">        List&lt;ResourceFileB&gt; resourceFiles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        resourceFiles.add(<span class="keyword">new</span> <span class="title class_">PdfFileB</span>(resourceDirectory + <span class="string">&quot;a.pdf&quot;</span>));</span><br><span class="line">        resourceFiles.add(<span class="keyword">new</span> <span class="title class_">PPTFileB</span>(resourceDirectory + <span class="string">&quot;c.ppt&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> resourceFiles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编译失败：因为Java不支持双分派技术 ，这里我们不过多阐述，但是我们应该知道Java的多态和方法重载</strong></p><h4 id="Java的多态、重载简述"><a href="#Java的多态、重载简述" class="headerlink" title="Java的多态、重载简述"></a>Java的多态、重载简述</h4><ul><li><p>多态是一种动态绑定，可以在运行时获取对象的实际类型，来运行实际类型对应的方法。</p></li><li><p>（方法、函数）重载是一种静态绑定，在编译时并不能获取对象的实际类型，而是根据声明类型执行声明类型对应的方法。</p></li></ul><h3 id="迭代二-ok"><a href="#迭代二-ok" class="headerlink" title="迭代二 [ok]"></a>迭代二 [ok]</h3><p>既然直接调用<code>resourceFile.extract2txt()</code>方式不可取，那我们不妨换个思路。</p><ol><li>根据多态的特性，我们可以将<code>功能类</code>作为方法的入参，在抽象访问者中定义一个<code>accept</code>方法，来接受这个功能。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ResourceFileCVisitor</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ExtractorC extractor)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>根据方法重载的特性，在具体访问者中实现accpet方法时，声明对应类型，调用功能类中对应方法。</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PdfFileC</span> <span class="keyword">extends</span> <span class="title class_">ResourceFileCVisitor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ExtractorC extractor)</span> &#123;</span><br><span class="line">        extractor.extract2txt(<span class="built_in">this</span>); <span class="comment">// this代表PdfFileC 实例，就能顺利对应Extractor.extract2txt(PPTFileB pptFile)方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>没有什么是套一层解决不了的，如果有就再套一层</p></blockquote><h4 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h4><p>实现访问者的主要功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtractorC</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">extract2txt</span><span class="params">(PPTFileC pptFile)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Extract PPT.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">extract2txt</span><span class="params">(PdfFileC pdfFileB)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Extract PDF.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>抽象访问者，定义访问者接受什么功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ResourceFileCVisitor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String filePath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResourceFileCVisitor</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.filePath = filePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ExtractorC extractor)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体访问者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PdfFileC</span> <span class="keyword">extends</span> <span class="title class_">ResourceFileCVisitor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PdfFileC</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(filePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ExtractorC extractor)</span> &#123;</span><br><span class="line">        extractor.extract2txt(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PPTFileC</span> <span class="keyword">extends</span> <span class="title class_">ResourceFileCVisitor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PPTFileC</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(filePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ExtractorC extractor)</span> &#123;</span><br><span class="line">        extractor.extract2txt(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VisitorTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testC</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">resourceDirectory</span> <span class="operator">=</span> <span class="string">&quot;D&quot;</span> + File.pathSeparator;</span><br><span class="line"></span><br><span class="line">        <span class="type">ExtractorC</span> <span class="variable">extractor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExtractorC</span>();</span><br><span class="line">        List&lt;ResourceFileC&gt; resourceFiles = listAllResourceFilesC(resourceDirectory);</span><br><span class="line">        <span class="keyword">for</span> (ResourceFileC resourceFile : resourceFiles) &#123;</span><br><span class="line">            resourceFile.accept(extractor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;ResourceFile&gt; <span class="title function_">listAllResourceFilesC</span><span class="params">(String resourceDirectory)</span> &#123;</span><br><span class="line">        List&lt;ResourceFile&gt; resourceFiles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        resourceFiles.add(<span class="keyword">new</span> <span class="title class_">PdfFileC</span>(resourceDirectory + <span class="string">&quot;a.pdf&quot;</span>));</span><br><span class="line">        resourceFiles.add(<span class="keyword">new</span> <span class="title class_">PPTFileC</span>(resourceDirectory + <span class="string">&quot;c.ppt&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> resourceFiles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Extract PDF.</span><br><span class="line">Extract PPT.</span><br></pre></td></tr></table></figure><h3 id="迭代三-需求变更"><a href="#迭代三-需求变更" class="headerlink" title="迭代三 [需求变更]"></a>迭代三 [需求变更]</h3><p>如果工具的功能不停地扩展，不仅要能抽取文本内容，还要支持压缩、提取文件元信息（文件名、大小、更新时间等等）构建索引等一系列的功能，<br>如果继续按照上面的实现思路，就会存在这样几个问题：</p><ol><li>违背开闭原则，添加一个新的功能，所有类的代码都要修改；</li><li>虽然功能增多，每个类的代码都不断膨胀，可读性和可维护性都变差了；</li><li>把所有比较上层的业务逻辑都耦合到 PdfFile、PPTFile 类中，导致这些类的职责不够单一，变成了大杂烩。</li></ol><h4 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h4><p>针对上面的问题，我们常用的解决方法就是拆分解耦，把<strong>业务操作跟具体的数据结构解耦，设计成独立的类</strong><br>。这里我们按照访问者模式的演进思路来对上面的代码进行重构。</p><p>访问者：PdfFileD 、PPTFileD</p><p>主要功能：解析文本、压缩</p><blockquote><p>访问者数量和主要功能都可以继续拓展。</p></blockquote><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>抽象访问者的主要功能（可能有多个功能，定义多个接口即可），本案例有两个主要功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ExtractorAble</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">extract2txt</span><span class="params">(PdfFileD pdfFile)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">extract2txt</span><span class="params">(PPTFileD pdfFile)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CompressorAble</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">compress</span><span class="params">(PdfFileD pdfFile)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">compress</span><span class="params">(PPTFileD pdfFile)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现访问者的主要功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtractorD</span> <span class="keyword">implements</span> <span class="title class_">ExtractorAble</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">extract2txt</span><span class="params">(PdfFileD pdfFile)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Extract PDF.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">extract2txt</span><span class="params">(PPTFileD pdfFile)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Extract PPT.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompressorD</span> <span class="keyword">implements</span> <span class="title class_">CompressorAble</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">compress</span><span class="params">(PdfFileD pdfFile)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;compressor PDF.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">compress</span><span class="params">(PPTFileD pdfFile)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;compressor PPT.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象访问者，定义访问者接受什么功能（可能有多个功能，定义多个抽象方法即可）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ResourceFileD</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String filePath;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ResourceFileD</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.filePath = filePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ExtractorAble able)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(CompressorAble able)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问者的具体实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PdfFileD</span> <span class="keyword">extends</span> <span class="title class_">ResourceFileD</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PdfFileD</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(filePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ExtractorAble able)</span> &#123;</span><br><span class="line">        able.extract2txt(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(CompressorAble able)</span> &#123;</span><br><span class="line">        able.compress(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PPTFileD</span> <span class="keyword">extends</span> <span class="title class_">ResourceFileD</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PPTFileD</span><span class="params">(String filePath)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(filePath);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(ExtractorAble able)</span> &#123;</span><br><span class="line">        able.extract2txt(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(CompressorAble able)</span> &#123;</span><br><span class="line">        able.compress(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VisitorTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testD</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">resourceDirectory</span> <span class="operator">=</span> <span class="string">&quot;D&quot;</span> + File.pathSeparator;</span><br><span class="line"></span><br><span class="line">        <span class="type">ExtractorD</span> <span class="variable">extractor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExtractorD</span>();</span><br><span class="line">        List&lt;ResourceFileDVisitor&gt; resourceFiles = listAllResourceFilesD(resourceDirectory);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (ResourceFileDVisitor resourceFile : resourceFiles) &#123;</span><br><span class="line">            resourceFile.accept(extractor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">CompressorD</span> <span class="variable">compressorD</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CompressorD</span>();</span><br><span class="line">        <span class="keyword">for</span> (ResourceFileDVisitor resourceFile : resourceFiles) &#123;</span><br><span class="line">            resourceFile.accept(compressorD);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;ResourceFileDVisitor&gt; <span class="title function_">listAllResourceFilesD</span><span class="params">(String resourceDirectory)</span> &#123;</span><br><span class="line">        List&lt;ResourceFileDVisitor&gt; resourceFiles = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        resourceFiles.add(<span class="keyword">new</span> <span class="title class_">PdfFileD</span>(resourceDirectory + <span class="string">&quot;a.pdf&quot;</span>));</span><br><span class="line">        resourceFiles.add(<span class="keyword">new</span> <span class="title class_">PPTFileD</span>(resourceDirectory + <span class="string">&quot;c.ppt&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> resourceFiles;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Extract PDF.</span><br><span class="line">Extract PPT.</span><br><span class="line">compressor PDF.</span><br><span class="line">compressor PPT.</span><br></pre></td></tr></table></figure><h2 id="为什么支持双分派的语言不需要访问者模式"><a href="#为什么支持双分派的语言不需要访问者模式" class="headerlink" title="为什么支持双分派的语言不需要访问者模式"></a>为什么支持双分派的语言不需要访问者模式</h2><p>在面向对象编程语言中，方法调用可以理解为一种消息传递（Dispatch）。一个对象调用另一个对象的方法，相当于给它发送一条消息，<br>这条消息起码要包含对象名、方法名和方法参数。</p><ul><li>Single Dispatch，指的是执行哪个对象的方法，根据对象的运行时类型来决定；执行对象的哪个方法，**<br>根据方法参数的编译时类型来决定**。</li><li>Double Dispatch，指的是执行哪个对象的方法，根据对象的运行时类型来决定；执行对象的哪个方法，**<br>根据方法参数的运行时类型来决定**。</li></ul><p>具体到编程语言的语法机制，Single Dispatch 和 Double Dispatch 跟多态和函数重载直接相关。<br>当前主流的面向对象编程语言（比如，Java、C++、C#）都只支持 Single Dispatch，不支持 Double Dispatch。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote><ul><li><a href="https://www.runoob.com/design-pattern">菜鸟编程</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1281319659110433">廖雪峰设计模式</a></li><li>设计模式之美：王争</li><li><a href="https://blog.csdn.net/weixin_43887184/article/details/124266081">Java与双分派技术</a></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行为型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迭代器模式</title>
      <link href="/9055d217.html"/>
      <url>/9055d217.html</url>
      
        <content type="html"><![CDATA[<h1 id="迭代器模式（行为型）"><a href="#迭代器模式（行为型）" class="headerlink" title="迭代器模式（行为型）"></a>迭代器模式（行为型）</h1><p>迭代器模式（Iterator Pattern）是 Java 和 .Net 编程环境中非常常用的设计模式。<br>这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。 迭代器模式属于行为型模式。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong> 提供一种方法顺序访问一个聚合对象中各个元素, 而又无须暴露该对象的内部表示。</p><p><strong>主要解决：</strong> 不同的方式来遍历整个整合对象。</p><p><strong>何时使用：</strong> 遍历一个聚合对象。</p><p><strong>如何解决：</strong> 把在元素之间游走的责任交给迭代器，而不是聚合对象。</p><p><strong>关键代码：</strong> 定义接口：hasNext, next。</p><p><strong>应用实例：</strong> JAVA 中的 iterator。</p><p><strong>优点：</strong></p><ol><li>它支持以不同的方式遍历一个聚合对象。</li><li>迭代器简化了聚合类。</li><li>在同一个聚合上可以有多个遍历。</li><li>在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。</li></ol><p><strong>缺点：</strong> 由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。</p><p><strong>使用场景：</strong></p><ol><li>访问一个聚合对象的内容而无须暴露它的内部表示。</li><li>需要为聚合对象提供多种遍历方式。</li><li>为遍历不同的聚合结构提供一个统一的接口。</li></ol><p><strong>注意事项：</strong> 迭代器模式就是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样既可以做到不暴露集合的内部结构，又可让外部代码透明地访问集合内部的数据。</p><h2 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h2><p><img src="/image/design-pattern/behavioral/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/%E8%BF%AD%E4%BB%A3%E5%99%A8.png" alt="迭代器"></p><p>细化</p><p><img src="/image/design-pattern/behavioral/%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%BB%86%E5%8C%96.png" alt="迭代器细化"></p><h2 id="实现一个“迭代器”"><a href="#实现一个“迭代器”" class="headerlink" title="实现一个“迭代器”"></a>实现一个“迭代器”</h2><p>迭代器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Iterator</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    E <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">List</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体容器（组合迭代器）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyArrayList</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 暂不不考虑扩容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">final</span> Object[] elementData;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyArrayList</span><span class="params">(Object[] elementData)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.elementData = elementData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">NameItr</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">NameItr</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> index &lt; elementData.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.hasNext()) &#123;</span><br><span class="line">                <span class="keyword">return</span> (E) elementData[index++];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyArrayListTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        Integer[] elementData = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        MyArrayList&lt;Integer&gt; myArrayList = <span class="keyword">new</span> <span class="title class_">MyArrayList</span>&lt;&gt;(elementData);</span><br><span class="line">        Iterator&lt;Integer&gt; iterator = myArrayList.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h2 id="Java迭代器-ArrayList"><a href="#Java迭代器-ArrayList" class="headerlink" title="Java迭代器 - ArrayList"></a>Java迭代器 - ArrayList</h2><p>使用内部类的好处是内部类隐含地持有一个它所在对象的<code>this</code>引用，可以通过<code>ArrayList.this</code>引用到它所在的集合。</p><p>上述代码实现的逻辑非常简单，但是实际应用时，如果考虑到多线程访问， 当一个线程正在迭代某个集合，<br>而另一个线程修改了集合的内容时，是否能继续安全地迭代，还是抛出<code>ConcurrentModificationException</code>，就需要更仔细地设计。</p><h3 id="类关系图"><a href="#类关系图" class="headerlink" title="类关系图"></a>类关系图</h3><p><img src="https://cdn.jsdelivr.net/gh/iluis97/imgbed/blog/Java%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%B1%BB%E5%9B%BE.png" alt="Java迭代器类图"></p><h2 id="Java的For循环"><a href="#Java的For循环" class="headerlink" title="Java的For循环"></a>Java的For循环</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForEachDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;Integer&gt; nums = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        nums.add(<span class="number">1</span>);</span><br><span class="line">        nums.add(<span class="number">2</span>);</span><br><span class="line">        nums.add(<span class="number">3</span>);</span><br><span class="line">        nums.add(<span class="number">4</span>);</span><br><span class="line">        nums.add(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 语法糖</span></span><br><span class="line">        <span class="keyword">for</span> (Integer num : nums) &#123;</span><br><span class="line">            System.out.println(num);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.size(); i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Iterator&lt;Integer&gt; iterator = nums.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>迭代器模式将集合对象的遍历操作从集合类中拆分出来，放到迭代器类中，让两者的职责更加单一。</p><p>迭代器是用来遍历容器的，所以，一个完整的迭代器模式一般会涉及容器和容器迭代器两部分内容。<br>为了达到基于接口而非实现编程的目的，容器又包含容器接口、容器实现类，迭代器又包含迭代器接口、迭代器实现类。</p><p>将游标指向的当前位置等信息，存储在迭代器类中，每个迭代器独享游标信息。这样，我们就可以创建多个不同的迭代器，同时对同一个容器进行遍历而互不影响。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote><ul><li><a href="https://www.runoob.com/design-pattern">菜鸟编程</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1281319524892705">廖雪峰设计模式</a></li><li>设计模式之美：王争</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行为型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>状态模式</title>
      <link href="/8acb1976.html"/>
      <url>/8acb1976.html</url>
      
        <content type="html"><![CDATA[<h1 id="状态模式（行为型）"><a href="#状态模式（行为型）" class="headerlink" title="状态模式（行为型）"></a>状态模式（行为型）</h1><p>在状态模式（State Pattern）中，类的行为是基于它的状态改变的。这种类型的设计模式属于行为型模式。</p><p>在状态模式中，我们创建表示各种状态的对象和一个行为随着状态对象改变而改变的 context 对象。</p><blockquote><p>状态模式目的：为了把切换状态的逻辑给分拆到不同的状态类中，使得将来增加状态比较容易</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong> 允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。</p><p><strong>主要解决：</strong> 对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。</p><p><strong>何时使用：</strong> 代码中包含大量与对象状态有关的条件语句。</p><p><strong>如何解决：</strong> 将各种具体的状态类抽象出来。</p><p><strong>关键代码：</strong><br>通常命令模式的接口中只有一个方法。而状态模式的接口中有一个或者多个方法。而且，状态模式的实现类的方法，一般返回值，或者是改变实例变量的值。<br>也就是说，状态模式一般和对象的状态有关。实现类的方法有不同的功能，覆盖接口中的方法。<br>状态模式和命令模式一样，也可以用于消除 <code>if...else</code> 等条件选择语句。</p><h2 id="案例：用户状态"><a href="#案例：用户状态" class="headerlink" title="案例：用户状态"></a>案例：用户状态</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> StateEnum stateEnum;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 状态</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">StateEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    ONLINE, OFFLINE, BUSY</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>状态接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserState</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换状态的动作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doAction</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>状态实现类（三种状态）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusyState</span> <span class="keyword">implements</span> <span class="title class_">UserState</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAction</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        user.setStateEnum(StateEnum.BUSY);</span><br><span class="line">        System.out.println(<span class="string">&quot;set state: &quot;</span> + user.getStateEnum());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OfflineState</span> <span class="keyword">implements</span> <span class="title class_">UserState</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAction</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        user.setStateEnum(StateEnum.OFFLINE);</span><br><span class="line">        System.out.println(<span class="string">&quot;set state: &quot;</span> + user.getStateEnum());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OnlineState</span> <span class="keyword">implements</span> <span class="title class_">UserState</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAction</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        user.setStateEnum(StateEnum.ONLINE);</span><br><span class="line">        System.out.println(<span class="string">&quot;set state: &quot;</span> + user.getStateEnum());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StateTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态模式的目的是为了把切换状态的逻辑给分拆到不同的状态类中，使得将来增加状态比较容易</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">BusyState</span> <span class="variable">busyState</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BusyState</span>();</span><br><span class="line">        busyState.doAction(user);</span><br><span class="line"></span><br><span class="line">        <span class="type">OfflineState</span> <span class="variable">offlineState</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OfflineState</span>();</span><br><span class="line">        offlineState.doAction(user);</span><br><span class="line"></span><br><span class="line">        <span class="type">OnlineState</span> <span class="variable">onlineState</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OnlineState</span>();</span><br><span class="line">        onlineState.doAction(user);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set state: BUSY</span><br><span class="line">set state: OFFLINE</span><br><span class="line">set state: ONLINE</span><br></pre></td></tr></table></figure><p>优化：可以统一管理具体状态，使用工厂模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StateFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;StateEnum, UserState&gt; STATES = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        STATES.put(StateEnum.ONLINE, <span class="keyword">new</span> <span class="title class_">OnlineState</span>());</span><br><span class="line">        STATES.put(StateEnum.BUSY, <span class="keyword">new</span> <span class="title class_">BusyState</span>());</span><br><span class="line">        STATES.put(StateEnum.OFFLINE, <span class="keyword">new</span> <span class="title class_">OfflineState</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserState <span class="title function_">build</span><span class="params">(StateEnum stateEnum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(STATES.get(stateEnum))</span><br><span class="line">                .orElseThrow(() -&gt; <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;no this stateEnum&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StateTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"></span><br><span class="line">        StateFactory.build(StateEnum.ONLINE).doAction(user);</span><br><span class="line">        StateFactory.build(StateEnum.BUSY).doAction(user);</span><br><span class="line">        StateFactory.build(StateEnum.OFFLINE).doAction(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set state: BUSY</span><br><span class="line">set state: OFFLINE</span><br><span class="line">set state: ONLINE</span><br></pre></td></tr></table></figure><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h3><p>状态模式是状态机的一种实现方式。状态机又叫有限状态机，它有 3 个部分组成：<strong>状态、事件、动作</strong>。</p><p>其中，事件也称为转移条件。事件触发状态的转移及动作的执行。不过，动作不是必须的，也可能只转移状态，不执行任何动作。</p><p>状态机的实现方式：</p><ol><li>分支逻辑法：利用 if-else 或者 switch-case 分支逻辑</li><li>查表法</li><li>状态模式</li></ol><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote><ul><li><a href="https://www.runoob.com/design-pattern">菜鸟编程</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1281319592001569">廖雪峰设计模式</a></li><li>设计模式之美：王争</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行为型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>责任链模式</title>
      <link href="/6208627e.html"/>
      <url>/6208627e.html</url>
      
        <content type="html"><![CDATA[<h1 id="责任链模式（行为型）"><a href="#责任链模式（行为型）" class="headerlink" title="责任链模式（行为型）"></a>责任链模式（行为型）</h1><p>顾名思义，责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。<br>这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于行为型模式。</p><p>在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong> 避免请求发送者与接收者耦合在一起，让多个对象都有可能接收请求，将这些对象连接成一条链，并且沿着这条链传递请求，直到有对象处理它为止。</p><p><strong>主要解决：</strong> 职责链上的处理者负责处理请求，客户只需要将请求发送到职责链上即可，无须关心请求的处理细节和请求的传递，<br>所以职责链将请求的发送者和请求的处理者解耦了。</p><p><strong>何时使用：</strong> 在处理消息的时候以过滤很多道。</p><p><strong>如何解决：</strong> 拦截的类都实现统一接口。</p><p><strong>关键代码：</strong> Handler 里面聚合它自己，在 HandlerRequest 里判断是否合适，如果没达到条件则向下传递，向谁传递之前 set 进去。</p><blockquote><p>框架开发中职责链模式具体是怎么应用的：Servlet Filter、Spring Interceptor</p></blockquote><h2 id="责任链的多种形式"><a href="#责任链的多种形式" class="headerlink" title="责任链的多种形式"></a>责任链的多种形式</h2><ol><li>通过某个Handler手动调用下一个Handler来传递Request【案例一】</li><li>请求不会中途终止传递，而是会被所有（符合约定规则）的处理器都处理一遍 【案例一】</li><li>使用链表或数组来存储处理器 【案例二】</li></ol><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h3 id="log（菜鸟编程）"><a href="#log（菜鸟编程）" class="headerlink" title="log（菜鸟编程）"></a>log（菜鸟编程）</h3><p>一个抽象处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractLogger</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">INFO</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">DEBUG</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">ERROR</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> level;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 责任链中的下一个元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> AbstractLogger nextLogger;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNextLogger</span><span class="params">(AbstractLogger nextLogger)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nextLogger = nextLogger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String message)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 走遍每个 this.level &lt;= level 的handler</span></span><br><span class="line"><span class="comment">     * 走遍所有handler</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logMessage</span><span class="params">(<span class="type">int</span> level, String message)</span> &#123;</span><br><span class="line">        <span class="comment">//if (this.level &lt;= level) &#123;</span></span><br><span class="line">        write(message);</span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (nextLogger != <span class="literal">null</span>) &#123;</span><br><span class="line">            nextLogger.logMessage(level, message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只走相等的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logMessageOnce</span><span class="params">(<span class="type">int</span> level, String message)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.level == level) &#123;</span><br><span class="line">            write(message);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------------&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (nextLogger != <span class="literal">null</span>) &#123;</span><br><span class="line">            nextLogger.logMessageOnce(level, message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体责任链实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsoleLogger</span> <span class="keyword">extends</span> <span class="title class_">AbstractLogger</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConsoleLogger</span><span class="params">(<span class="type">int</span> level)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Standard Console::Logger: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileLogger</span> <span class="keyword">extends</span> <span class="title class_">AbstractLogger</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FileLogger</span><span class="params">(<span class="type">int</span> level)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;File::Logger: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ErrorLogger</span> <span class="keyword">extends</span> <span class="title class_">AbstractLogger</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ErrorLogger</span><span class="params">(<span class="type">int</span> level)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Error Console::Logger: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>责任链组装测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testVariant_1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">AbstractLogger</span> <span class="variable">errorLogger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorLogger</span>(AbstractLogger.ERROR);</span><br><span class="line">        <span class="type">AbstractLogger</span> <span class="variable">fileLogger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileLogger</span>(AbstractLogger.DEBUG);</span><br><span class="line">        <span class="type">AbstractLogger</span> <span class="variable">consoleLogger</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConsoleLogger</span>(AbstractLogger.INFO);</span><br><span class="line"></span><br><span class="line">        errorLogger.setNextLogger(fileLogger);</span><br><span class="line">        fileLogger.setNextLogger(consoleLogger);</span><br><span class="line"></span><br><span class="line">        errorLogger.logMessage(AbstractLogger.INFO, <span class="string">&quot;This is an information.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        errorLogger.logMessage(AbstractLogger.DEBUG, <span class="string">&quot;This is a debug level information.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        errorLogger.logMessage(AbstractLogger.ERROR, <span class="string">&quot;This is an error information.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;++++++++++++++++++++++++++++++&quot;</span>);</span><br><span class="line"></span><br><span class="line">        errorLogger.logMessageOnce(AbstractLogger.INFO, <span class="string">&quot;This is an information.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        errorLogger.logMessageOnce(AbstractLogger.DEBUG, <span class="string">&quot;This is a debug level information.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        errorLogger.logMessageOnce(AbstractLogger.ERROR, <span class="string">&quot;This is an error information.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用户请求处理"><a href="#用户请求处理" class="headerlink" title="用户请求处理"></a>用户请求处理</h3><p>抽象出请求对象，它将在责任链上传递（和一些模拟业务所需的条件）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要处理的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> LevelEnum level;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户等级</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">LevelEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    AVERAGE, VIP, SVIP</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 黑名单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserBlackList</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; AVERAGE_NAMES = Arrays.asList(<span class="string">&quot;z3&quot;</span>, <span class="string">&quot;l4&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> List&lt;String&gt; VIP_NAMES = Collections.singletonList(<span class="string">&quot;w5&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象出处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象出一个处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回值：</span></span><br><span class="line"><span class="comment">     * Boolean.TRUE = 成功</span></span><br><span class="line"><span class="comment">     * Boolean.FALSE = 拒绝</span></span><br><span class="line"><span class="comment">     * null = 交下一个处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">execute</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>处理器的具体实现（两个）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通客户Handler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AverageUserHandler</span> <span class="keyword">implements</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">execute</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!LevelEnum.AVERAGE.equals(user.getLevel())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.getClass().getSimpleName() + <span class="string">&quot; process...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> UserBlackList.AVERAGE_NAMES.contains(user.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * VIP用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VipUserHandler</span> <span class="keyword">implements</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">execute</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!LevelEnum.VIP.equals(user.getLevel())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.getClass().getSimpleName() + <span class="string">&quot; process...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> UserBlackList.VIP_NAMES.contains(user.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把这些<code>Handler</code>组合起来，变成一个链，并通过一个统一入口处理</p><blockquote><p>Handler添加的顺序很重要，如果顺序不对，处理的结果可能不符合要求</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HandlerChain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 持有所有Handler，Handler添加的顺序很重要，如果顺序不对，处理的结果可能不符合要求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Handler&gt; HANDLERS = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addHandler</span><span class="params">(Handler handler)</span> &#123;</span><br><span class="line">        HANDLERS.add(handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// 依次调用每个Handler</span></span><br><span class="line">        <span class="keyword">for</span> (Handler handler : HANDLERS) &#123;</span><br><span class="line">            <span class="type">Boolean</span> <span class="variable">r</span> <span class="operator">=</span> handler.execute(user);</span><br><span class="line">            <span class="keyword">if</span> (r != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果返回TRUE或FALSE，处理结束</span></span><br><span class="line">                System.out.println(user + <span class="string">&quot; &quot;</span> + (r ? <span class="string">&quot;Approved by &quot;</span> : <span class="string">&quot;Denied by &quot;</span>) + handler.getClass().getSimpleName());</span><br><span class="line">                <span class="comment">// 控制是否继续</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;Could not handle request: &quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HandlerChainTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 构造责任链</span></span><br><span class="line">        <span class="type">HandlerChain</span> <span class="variable">chain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HandlerChain</span>();</span><br><span class="line">        chain.addHandler(<span class="keyword">new</span> <span class="title class_">AverageUserHandler</span>());</span><br><span class="line">        chain.addHandler(<span class="keyword">new</span> <span class="title class_">VipUserHandler</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理请求</span></span><br><span class="line">        chain.execute(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;z3&quot;</span>, LevelEnum.AVERAGE));</span><br><span class="line">        chain.execute(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;w5&quot;</span>, LevelEnum.VIP));</span><br><span class="line">        <span class="comment">// exception</span></span><br><span class="line">        chain.execute(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;z3&quot;</span>, LevelEnum.SVIP));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AverageUserHandler process...</span><br><span class="line">User(name=z3, level=AVERAGE) Approved by AverageUserHandler</span><br><span class="line">VipUserHandler process...</span><br><span class="line">User(name=w5, level=VIP) Approved by VipUserHandler</span><br><span class="line"></span><br><span class="line">java.lang.RuntimeException: Could not handle request: User(name=z3, level=SVIP)</span><br></pre></td></tr></table></figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote><ul><li><a href="https://www.runoob.com/design-pattern">菜鸟编程</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1281319474561057">廖雪峰设计模式</a></li><li>设计模式之美：王争</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行为型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>观察者模式</title>
      <link href="/9a246216.html"/>
      <url>/9a246216.html</url>
      
        <content type="html"><![CDATA[<h1 id="观察者模式（行为型）"><a href="#观察者模式（行为型）" class="headerlink" title="观察者模式（行为型）"></a>观察者模式（行为型）</h1><p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知依赖它的对象。观察者模式属于行为型模式。</p><p>Observer本来的意思是”观察者“，但实际上Observer角色并非主动地去观察，而是被动接受来自Subject角色的通知。<br>因此，Observer模式也被称为Publisher-Subscribe(发布-订阅)模式。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong> 定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。</p><p><strong>主要解决：</strong> 一个对象状态改变给其他对象通知的问题，而且要考虑到易用和低耦合，保证高度的协作。</p><p><strong>何时使用：</strong> 一个对象（目标对象）的状态发生改变，所有的依赖对象（观察者对象）都将得到通知，进行广播通知。</p><p><strong>如何解决：</strong> 使用面向对象技术，可以将这种依赖关系弱化。</p><p><strong>关键代码：</strong> 在抽象类里有一个 ArrayList 存放观察者们。</p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="案例一：最常见的实现方式"><a href="#案例一：最常见的实现方式" class="headerlink" title="案例一：最常见的实现方式"></a>案例一：最常见的实现方式</h3><p>抽象被观察者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象被观察者</span></span><br><span class="line"><span class="comment"> * 帮助被观察者（作者）管理观察者（也就是订阅者）的新增、删除、和通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">WechatSubject</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订阅者列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;WechatObserver&gt; OBSERVERS = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文章</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getContent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改文章</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContent</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">        <span class="built_in">this</span>.notifyAllObservers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加观察者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerObserver</span><span class="params">(WechatObserver subscribeNoObserver)</span> &#123;</span><br><span class="line">        OBSERVERS.add(subscribeNoObserver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除观察者</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeObserver</span><span class="params">(WechatObserver subscribeNoObserver)</span> &#123;</span><br><span class="line">        OBSERVERS.remove(subscribeNoObserver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知所有订阅者（观察者）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">notifyAllObservers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (WechatObserver observer : OBSERVERS) &#123;</span><br><span class="line">            observer.update(content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>被观察者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被观察者A （想象成作者A）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ASubject</span> <span class="keyword">extends</span> <span class="title class_">WechatSubject</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 被观察者B（想象成作者B）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BSubject</span> <span class="keyword">extends</span> <span class="title class_">WechatSubject</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察者接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 观察者接口：（订阅者）接收推送文章</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WechatObserver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收文章（更新）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String content)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体观察者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第一位观察者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstObserver</span> <span class="keyword">implements</span> <span class="title class_">WechatObserver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.getClass().getSimpleName() + <span class="string">&quot; accept content: &quot;</span> + content);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第二位观察者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecondObserver</span> <span class="keyword">implements</span> <span class="title class_">WechatObserver</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.getClass().getSimpleName() + <span class="string">&quot; accept content: &quot;</span> + content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObserveTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建作者 Subject</span></span><br><span class="line">        <span class="type">WechatSubject</span> <span class="variable">aCreator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ASubject</span>();</span><br><span class="line">        <span class="type">WechatSubject</span> <span class="variable">bCreator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BSubject</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册订阅者 Observer</span></span><br><span class="line">        aCreator.registerObserver(<span class="keyword">new</span> <span class="title class_">FirstObserver</span>());</span><br><span class="line">        aCreator.registerObserver(<span class="keyword">new</span> <span class="title class_">SecondObserver</span>());</span><br><span class="line">        bCreator.registerObserver(<span class="keyword">new</span> <span class="title class_">FirstObserver</span>());</span><br><span class="line">        bCreator.registerObserver(<span class="keyword">new</span> <span class="title class_">SecondObserver</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 作者修改文章</span></span><br><span class="line">        aCreator.setContent(<span class="string">&quot;墙外有两株树，一株是枣树，另一株也是枣树&quot;</span>);</span><br><span class="line">        aCreator.setContent(<span class="string">&quot;墙外有三株树，一株是枣树，一株也是枣树，还有一株仍是枣树&quot;</span>);</span><br><span class="line">        bCreator.setContent(<span class="string">&quot;卖大导弹的小女孩&quot;</span>);</span><br><span class="line">        bCreator.setContent(<span class="string">&quot;卖小导弹的小女孩&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FirstObserver accept content: 墙外有两株树，一株是枣树，另一株也是枣树</span><br><span class="line">SecondObserver accept content: 墙外有两株树，一株是枣树，另一株也是枣树</span><br><span class="line">FirstObserver accept content: 墙外有三株树，一株是枣树，一株也是枣树，还有一株仍是枣树</span><br><span class="line">SecondObserver accept content: 墙外有三株树，一株是枣树，一株也是枣树，还有一株仍是枣树</span><br><span class="line">FirstObserver accept content: 卖大导弹的小女孩</span><br><span class="line">SecondObserver accept content: 卖大导弹的小女孩</span><br><span class="line">FirstObserver accept content: 卖小导弹的小女孩</span><br><span class="line">SecondObserver accept content: 卖小导弹的小女孩</span><br></pre></td></tr></table></figure><h3 id="案例二：jdk8的实现方式"><a href="#案例二：jdk8的实现方式" class="headerlink" title="案例二：jdk8的实现方式"></a>案例二：jdk8的实现方式</h3><p>被观察者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySubject</span> <span class="keyword">extends</span> <span class="title class_">Observable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getContent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContent</span><span class="params">(String content)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (content != <span class="literal">null</span> &amp;&amp; !content.equals(<span class="built_in">this</span>.content)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.content = content;</span><br><span class="line">            <span class="comment">// 标注已经被更改</span></span><br><span class="line">            <span class="built_in">super</span>.setChanged();</span><br><span class="line">            <span class="comment">// 通知观察者数据已被更改</span></span><br><span class="line">            <span class="built_in">super</span>.notifyObservers(content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyObserver</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Observable o, Object arg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;arg的值是（notifyObservers方法的入参）: &quot;</span> + arg);</span><br><span class="line">        <span class="keyword">if</span> (o <span class="keyword">instanceof</span> MySubject mySubject) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;content修改为: &quot;</span> + mySubject.getContent());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObserveTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJdk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MySubject</span> <span class="variable">mySubject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MySubject</span>();</span><br><span class="line">        <span class="type">MyObserver</span> <span class="variable">myObserver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyObserver</span>();</span><br><span class="line">        mySubject.addObserver(myObserver);</span><br><span class="line">        mySubject.setContent(<span class="string">&quot;你是谁啊&quot;</span>);</span><br><span class="line">        mySubject.notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arg的值是（notifyObservers方法的入参）: 你是谁啊</span><br><span class="line">content修改为: 你是谁啊</span><br></pre></td></tr></table></figure><p>设计模式要干的事情就是解耦。创建型模式是将创建和使用代码解耦，结构型模式是将不同功能代码解耦，行为型模式是将不同的行为代码解耦。</p><p>具体到观察者模式，它是将观察者和被观察者代码解耦。 借助设计模式，我们利用更好的代码结构，<br>将一大坨代码拆分成职责更单一的小类，让其满足开闭原则、高内聚松耦合等特性，以此来控制和应对代码的复杂性，提高代码的可扩展性。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>观察者模式的应用场景非常广泛，小到代码层面的解耦，大到架构层面的系统解耦，都有这种模式的影子，比如，邮件订阅、RSS本质上都是观察者模式。</p><p>不同的应用场景和需求下，这个模式也有截然不同的实现方式，有同步阻塞的实现方式，也有异步非阻塞的实现方式；有进程内的实现方式，也有跨进程的实现方式。</p><blockquote><p>例如注册接口是一个调用比较频繁的接口，对性能非常敏感，希望接口的响应时间尽可能短，<br>那我们可以将同步阻塞的实现方式改为异步非阻塞的实现方式，以此来减少响应时间</p></blockquote><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="Guava-EventBus"><a href="#Guava-EventBus" class="headerlink" title="Guava EventBus"></a>Guava EventBus</h3><p>EventBus<br>翻译为“事件总线”，它提供了实现观察者模式的骨架代码。我们可以基于此框架，非常容易地在自己的业务场景中实现观察者模式，不需要从零开始开发。<br>其中，Google Guava EventBus 就是一个比较著名的EventBus 框架，它不仅仅支持异步非阻塞模式，同时也支持同步阻塞模式。</p><p>代码演示：</p><p>被监听者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginMessage</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String tip;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>监听者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 作为标记使用：use guava eventbus</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EventListener</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginEventListener</span> <span class="keyword">implements</span> <span class="title class_">EventListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 如果发送了loginMessage消息，会进入到该函数的处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> loginMessage 消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Subscribe</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">success</span><span class="params">(LoginMessage loginMessage)</span> &#123;</span><br><span class="line">        <span class="comment">// mock slow</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">3L</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(loginMessage.getTip());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObserveTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eventBus</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">DEFAULT_EVENTBUS_THREAD_POOL_SIZE</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 同步阻塞模式</span></span><br><span class="line">        <span class="comment">// EventBus eventBus = new EventBus(&quot;test&quot;);</span></span><br><span class="line">        <span class="comment">// 异步非阻塞模式</span></span><br><span class="line">        <span class="type">EventBus</span> <span class="variable">eventBus</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AsyncEventBus</span>(Executors.newFixedThreadPool(DEFAULT_EVENTBUS_THREAD_POOL_SIZE));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注册监听者</span></span><br><span class="line">        eventBus.register(<span class="keyword">new</span> <span class="title class_">LoginEventListener</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">LoginMessage</span> <span class="variable">loginMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginMessage</span>();</span><br><span class="line">        loginMessage.setTip(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发布消息</span></span><br><span class="line">        eventBus.post(loginMessage);</span><br><span class="line">        loginMessage.setTip(<span class="string">&quot;Hello EveryOne&quot;</span>);</span><br><span class="line">        eventBus.post(loginMessage);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;ok!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 同步阻塞模式</span><br><span class="line">Hello</span><br><span class="line">Hello EveryOne</span><br><span class="line">ok!</span><br><span class="line"></span><br><span class="line">// 异步非阻塞模式</span><br><span class="line">ok!</span><br></pre></td></tr></table></figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote><ul><li><a href="https://www.runoob.com/design-pattern">菜鸟编程</a></li><li>设计模式之美：王争</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行为型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/72e3b671.html"/>
      <url>/72e3b671.html</url>
      
        <content type="html"><![CDATA[<h1 id="策略模式（行为型）"><a href="#策略模式（行为型）" class="headerlink" title="策略模式（行为型）"></a>策略模式（行为型）</h1><p>在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于行为型模式。</p><p>策略模式定义一族算法类，将每个算法分别封装起来，让它们可以互相替换。策略模式可以使算法的变化独立于使用它们的客户端（这里的客户端代指使用算法的代码）。</p><ul><li><p>策略模式主要的作用还是解耦策略的定义、创建和使用，控制代码的复杂度，让每个部分都不至于过于复杂、代码量过多。</p></li><li><p>除此之外，对于复杂代码来说，策略模式还能让其满足开闭原则，添加新策略的时候，最小化、集中化代码改动，减少引入 bug 的风险。</p></li></ul><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong> 定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换。</p><p><strong>主要解决：</strong> 在有多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护。</p><p><strong>何时使用：</strong> 一个系统有许多许多类，而区分它们的只是他们直接的行为。</p><p><strong>如何解决：</strong> 将这些算法封装成一个一个的类，任意地替换。</p><p><strong>关键代码：</strong> 实现同一个接口。</p><h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>策略模式用来解耦策略的定义、创建、使用。实际上，一个完整的策略模式就是由这三个部分组成的。</p><ol><li>策略类的定义比较简单，包含一个策略接口和一组实现这个接口的策略类。</li><li>策略的创建由工厂类来完成，封装策略创建的细节。</li><li>策略模式包含一组策略可选，客户端代码如何选择使用哪个策略，有两种确定方法：编译时静态确定和运行时动态确定。<br>其中，“运行时动态确定”才是策略模式最典型的应用场景。</li></ol><p>除此之外，我们还可以通过策略模式来移除 if-else 分支判断。<br>实际上，这得益于策略工厂类，更本质上点讲，是借助“查表法”，根据<code>type</code>查表，替代根据<code>type</code>分支判断。</p><p><strong>策略模式优化</strong></p><ol><li>也就是将策略的定义分离出来（new LoL()、new CF()）。</li><li>若每个类是无状态的，没必要在每次使用的时候，都重新创建一个新的对象。所以，可以使用工厂模式对对象的创建进行封装</li><li>省略掉所有if-else的前提：把所有“查表”条件都存到Map中，作为唯一主键</li></ol><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>策略接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 游戏手册</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">GameManual</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 攻击</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>策略类实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoL</span> <span class="keyword">implements</span> <span class="title class_">GameManual</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;lol use the right mouse button&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CF</span> <span class="keyword">implements</span> <span class="title class_">GameManual</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attack</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cf use the left mouse button&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>策略工厂：封装策略创建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 游戏工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GameFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 选择游戏教程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GameManual <span class="title function_">select</span><span class="params">(GameEnum gameEnum)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (GameEnum.LOL.equals(gameEnum)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LoL</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (GameEnum.CF.equals(gameEnum)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CF</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>策略工厂优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 游戏工厂</span></span><br><span class="line"><span class="comment"> * 策略模式主要的作用还是解耦策略的定义、创建和使用，控制代码的复杂度，让每个部分都不至于过于复杂、代码量过多。</span></span><br><span class="line"><span class="comment"> * 除此之外，对于复杂代码来说，策略模式还能让其满足开闭原则，添加新策略的时候，最小化、集中化代码改动，减少引入 bug 的风险。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GameFactoryPro</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;GameEnum, GameManual&gt; GAMES = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(GameEnum.values().length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        GAMES.put(GameEnum.LOL, <span class="keyword">new</span> <span class="title class_">LoL</span>());</span><br><span class="line">        GAMES.put(GameEnum.CF, <span class="keyword">new</span> <span class="title class_">CF</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 选择游戏教程</span></span><br><span class="line"><span class="comment">     * 策略模式优化：</span></span><br><span class="line"><span class="comment">     * 1. 也就是将策略的定义分离出来（new LoL()、new CF()）。</span></span><br><span class="line"><span class="comment">     * 2. 若每个类是无状态的，没必要在每次使用的时候，都重新创建一个新的对象。所以，可以使用工厂模式对对象的创建进行封装</span></span><br><span class="line"><span class="comment">     * 3. 省略掉所有if-else的前提：把所有“查表”条件都存到Map中，作为唯一主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> GameManual <span class="title function_">select</span><span class="params">(GameEnum gameEnum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> GAMES.get(gameEnum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrategyTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        Objects.requireNonNull(GameFactory.select(GameEnum.LOL)).attack();</span><br><span class="line"></span><br><span class="line">        Objects.requireNonNull(GameFactoryPro.select(GameEnum.CF)).attack();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lol use the right mouse button</span><br><span class="line">cf use the left mouse button</span><br></pre></td></tr></table></figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote><ul><li><a href="https://www.runoob.com/design-pattern">菜鸟编程</a></li><li>设计模式之美：王争</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行为型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模板模式</title>
      <link href="/150e036b.html"/>
      <url>/150e036b.html</url>
      
        <content type="html"><![CDATA[<h1 id="模板模式（行为型）"><a href="#模板模式（行为型）" class="headerlink" title="模板模式（行为型）"></a>模板模式（行为型）</h1><p>又叫做模板方法，模板方法的核心思想是：父类定义骨架，子类实现某些细节。</p><p>为了防止子类重写父类的骨架方法，可以在父类中对骨架方法使用<code>final</code>。<br>对于需要子类实现的抽象方法，一般声明为<code>protected</code>，使得这些方法对外部客户端不可见。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong> 定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><p><strong>主要解决：</strong> 一些方法通用，却在每一个子类都重新写了这一方法。</p><p><strong>何时使用：</strong> 有一些通用的方法。</p><p><strong>如何解决：</strong> 将这些通用算法抽象出来。</p><p><strong>关键代码：</strong> 在抽象类实现，其他步骤在子类实现。</p><h2 id="案例-Game"><a href="#案例-Game" class="headerlink" title="案例 Game"></a>案例 Game</h2><p>父类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractGameTemplate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">()</span> &#123;</span><br><span class="line">        start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        end();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">end</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CfGame</span> <span class="keyword">extends</span> <span class="title class_">AbstractGameTemplate</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;fire in the hole&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">end</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ACE&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LolGame</span> <span class="keyword">extends</span> <span class="title class_">AbstractGameTemplate</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;欢迎来到英雄联盟,全军出击&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">end</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MVP&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplateTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">AbstractGameTemplate</span> <span class="variable">template</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LolGame</span>();</span><br><span class="line">        template.play();</span><br><span class="line"></span><br><span class="line">        <span class="type">AbstractGameTemplate</span> <span class="variable">template1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CfGame</span>();</span><br><span class="line">        template1.play();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">欢迎来到英雄联盟,全军出击</span><br><span class="line">MVP</span><br><span class="line">fire in the hole</span><br><span class="line">ACE</span><br></pre></td></tr></table></figure><h2 id="模板模式作用"><a href="#模板模式作用" class="headerlink" title="模板模式作用"></a>模板模式作用</h2><p>模板模式有两大作用：复用和扩展</p><h3 id="复用"><a href="#复用" class="headerlink" title="复用"></a>复用</h3><p>模板模式把一个算法中不变的流程抽象到父类的模板方法中，将可变的部分 留给子类来实现。所有的子类都可以复用父类中模板方法定义的流程代码。</p><ul><li>Java IO 类库：有很多类的设计用到了模板模式，比如 InputStream、OutputStream、Reader、Writer。</li><li>Java AbstractList 类中，addAll() 函数可以看作模板方法，add() 是子类需要重写的方法，尽管没有声明为 abstract 的，但函数实现直接抛出了<br>UnsupportedOperationException 异常。前提是，如果子类不重写是不能使用的。</li></ul><p><code>java.util.AbstractList</code> 源码（JDK8）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractCollection</span>&lt;E&gt; <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(<span class="type">int</span> index, Collection&lt;? extends E&gt; c)</span> &#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">modified</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (E e : c) &#123;</span><br><span class="line">            add(index++, e);</span><br><span class="line">            modified = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> modified;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index, E element)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p><code>javax.servlet.GenericServlet</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">GenericServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span>, ServletConfig, java.io.Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 由servlet容器调用，以允许servlet响应请求。看到Servlet.service。 </span></span><br><span class="line"><span class="comment">     * 该方法被声明为抽象的，因此子类(如HttpServlet)必须重写它。 </span></span><br><span class="line"><span class="comment">     * 形参: req—包含客户端请求的ServletRequest对象res—包含servlet响应的ServletResponse对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>javax.servlet.http.HttpServlet</code></p><p>HttpServlet 的 <code>service(HttpServletRequest req, HttpServletResponse resp)</code>方法就是一个模板方法，它实现了整个 HTTP<br>请求的执行流程，doGet()、doPost() 是模板中可以由子类来定制的部分。</p><p>实际上，这就相当于 Servlet 框架提供了一个扩展点（doGet()、doPost() 方法，子类若想使用该方法必须重写才行），让框架用户在不用修改<br>Servlet 框架源码的情况下，将业务代码通过扩展点镶嵌到框架中执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">HttpServlet</span> <span class="keyword">extends</span> <span class="title class_">GenericServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        HttpServletRequest request;</span><br><span class="line">        HttpServletResponse response;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!(req <span class="keyword">instanceof</span> HttpServletRequest &amp;&amp; res <span class="keyword">instanceof</span> HttpServletResponse)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(<span class="string">&quot;non-HTTP request or response&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        request = (HttpServletRequest) req;</span><br><span class="line">        response = (HttpServletResponse) res;</span><br><span class="line"></span><br><span class="line">        service(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从公共服务方法接收标准HTTP请求，并将它们分发给该类中定义的doXXX方法。</span></span><br><span class="line"><span class="comment">     * 该方法是Servlet的一个特定于http的版本。服务方法。没有必要重写这个方法。 </span></span><br><span class="line"><span class="comment">     * 形参: req——HttpServletRequest对象，它包含客户端对servlet resp的请求——HttpServletResponse对象，它包含servlet返回给客户端的响应</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> req.getMethod();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (method.equals(METHOD_GET)) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> getLastModified(req);</span><br><span class="line">            <span class="keyword">if</span> (lastModified == -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// servlet doesn&#x27;t support if-modified-since, no reason</span></span><br><span class="line">                <span class="comment">// to go through further expensive logic</span></span><br><span class="line">                doGet(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">long</span> <span class="variable">ifModifiedSince</span> <span class="operator">=</span> req.getDateHeader(HEADER_IFMODSINCE);</span><br><span class="line">                <span class="keyword">if</span> (ifModifiedSince &lt; lastModified) &#123;</span><br><span class="line">                    <span class="comment">// If the servlet mod time is later, call doGet()</span></span><br><span class="line">                    <span class="comment">// Round down to the nearest second for a proper compare</span></span><br><span class="line">                    <span class="comment">// A ifModifiedSince of -1 will always be less</span></span><br><span class="line">                    maybeSetLastModified(resp, lastModified);</span><br><span class="line">                    doGet(req, resp);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resp.setStatus(HttpServletResponse.SC_NOT_MODIFIED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_HEAD)) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">lastModified</span> <span class="operator">=</span> getLastModified(req);</span><br><span class="line">            maybeSetLastModified(resp, lastModified);</span><br><span class="line">            doHead(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_POST)) &#123;</span><br><span class="line">            doPost(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_PUT)) &#123;</span><br><span class="line">            doPut(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_DELETE)) &#123;</span><br><span class="line">            doDelete(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_OPTIONS)) &#123;</span><br><span class="line">            doOptions(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(METHOD_TRACE)) &#123;</span><br><span class="line">            doTrace(req, resp);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">            <span class="comment">// Note that this means NO servlet supports whatever</span></span><br><span class="line">            <span class="comment">// method was requested, anywhere on this server.</span></span><br><span class="line">            <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">errMsg</span> <span class="operator">=</span> lStrings.getString(<span class="string">&quot;http.method_not_implemented&quot;</span>);</span><br><span class="line">            Object[] errArgs = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">1</span>];</span><br><span class="line">            errArgs[<span class="number">0</span>] = method;</span><br><span class="line">            errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line"></span><br><span class="line">            resp.sendError(HttpServletResponse.SC_NOT_IMPLEMENTED, errMsg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 由服务器(通过服务方法)调用，以允许servlet处理GET请求。 </span></span><br><span class="line"><span class="comment">     * 重写此方法以支持GET请求也会自动支持HTTP HEAD请求。</span></span><br><span class="line"><span class="comment">     * HEAD请求是一个GET请求，它在响应中不返回任何主体，只返回请求报头字段。 </span></span><br><span class="line"><span class="comment">     * 重写此方法时，读取请求数据，写入响应标头，获取响应的写入器或输出流对象，最后写入响应数据。最好包括内容类型和编码。</span></span><br><span class="line"><span class="comment">     * 当使用PrintWriter对象返回响应时，在访问PrintWriter对象之前设置内容类型。 servlet容器必须在提交响应之前写入报头，因为在HTTP中，报头必须在响应体之前发送。</span></span><br><span class="line"><span class="comment">     * 在可能的情况下，设置Content-Length报头(使用ServletResponse。setContentLength方法)，以允许servlet容器使用持久连接将其响应返回给客户机，从而提高性能。</span></span><br><span class="line"><span class="comment">     * 如果整个响应适合在响应缓冲区内，则自动设置内容长度。 当使用HTTP 1.1分块编码(这意味着响应具有Transfer-Encoding报头)时，不要设置Content-Length报头。</span></span><br><span class="line"><span class="comment">     * GET方法应该是安全的，也就是说，没有任何需要用户负责的副作用。例如，大多数表单查询没有副作用。如果客户端请求旨在更改存储的数据，则该请求应该使用其他HTTP方法。 </span></span><br><span class="line"><span class="comment">     * GET方法也应该是幂等的，这意味着它可以安全地重复。有时使一个方法安全也使它幂等。例如，重复查询既安全又幂等，但在线购买产品或修改数据既不安全也不幂等。</span></span><br><span class="line"><span class="comment">     * 如果请求格式不正确，doGet返回一个HTTP“Bad request”消息。 </span></span><br><span class="line"><span class="comment">     * 形参: req——一个HttpServletRequest对象，它包含客户端对servlet resp的请求——一个HttpServletResponse对象，它包含servlet发送给客户端的响应</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> req.getProtocol();</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> lStrings.getString(<span class="string">&quot;http.method_get_not_supported&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (protocol.endsWith(<span class="string">&quot;1.1&quot;</span>)) &#123;</span><br><span class="line">            resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 由服务器(通过服务方法)调用，以允许servlet处理POST请求。</span></span><br><span class="line"><span class="comment">     * HTTP POST方法允许客户端一次性向Web服务器发送长度不限的数据，在发布诸如信用卡号之类的信息时非常有用。 </span></span><br><span class="line"><span class="comment">     * 重写此方法时，读取请求数据，写入响应标头，获取响应的写入器或输出流对象，最后写入响应数据。最好包括内容类型和编码。</span></span><br><span class="line"><span class="comment">     * 当使用PrintWriter对象返回响应时，在访问PrintWriter对象之前设置内容类型。 servlet容器必须在提交响应之前写入报头，因为在HTTP中，报头必须在响应体之前发送。</span></span><br><span class="line"><span class="comment">     * 在可能的情况下，设置Content-Length报头(使用ServletResponse。setContentLength方法)，以允许servlet容器使用持久连接将其响应返回给客户机，从而提高性能。</span></span><br><span class="line"><span class="comment">     * 如果整个响应适合在响应缓冲区内，则自动设置内容长度。 当使用HTTP 1.1分块编码(这意味着响应具有Transfer-Encoding报头)时，不要设置Content-Length报头。 这种方法不需要是安全的或幂等的。</span></span><br><span class="line"><span class="comment">     * 通过POST请求的操作可能会产生副作用，用户可能会为此负责，例如，更新存储的数据或在线购买商品。 如果HTTP POST请求格式不正确，doPost将返回一个HTTP“Bad request”消息。 </span></span><br><span class="line"><span class="comment">     * 形参: req——一个HttpServletRequest对象，它包含客户端对servlet resp的请求——一个HttpServletResponse对象，它包含servlet发送给客户端的响应</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span></span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> req.getProtocol();</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> lStrings.getString(<span class="string">&quot;http.method_post_not_supported&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (protocol.endsWith(<span class="string">&quot;1.1&quot;</span>)) &#123;</span><br><span class="line">            resp.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resp.sendError(HttpServletResponse.SC_BAD_REQUEST, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模板模式-VS-回调"><a href="#模板模式-VS-回调" class="headerlink" title="模板模式 VS 回调"></a>模板模式 VS 回调</h2><p>从应用场景上来看，同步回调看起来更像模板模式，异步回调看起来更像观察者模式。</p><ul><li>同步回调：<code>JdbcTemplate</code></li><li>异步回调：<code>Runtime#addShutdownHook(Thread hook)</code></li></ul><h3 id="回调模板"><a href="#回调模板" class="headerlink" title="回调模板"></a>回调模板</h3><p>回调对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包裹了回调函数的类对象，我们简称为回调对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICallback</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 回调函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">methodToCallback</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二次封装回调对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 二次封装回调对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DiyCallback</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(ICallback callback)</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        System.out.println(<span class="string">&quot;check...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        callback.methodToCallback();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        System.out.println(<span class="string">&quot;other...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端角色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户端角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ok</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//回调对象</span></span><br><span class="line">        <span class="type">ICallback</span> <span class="variable">iCallback</span> <span class="operator">=</span> () -&gt; System.out.println(<span class="string">&quot;ICallback ...&quot;</span>);</span><br><span class="line">        iCallback.methodToCallback();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ok2</span><span class="params">(DiyCallback b)</span> &#123;</span><br><span class="line">        b.execute(() -&gt; System.out.println(<span class="string">&quot;DiyCallback ...&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从代码实现中，我们可以看出，回调跟模板模式一样，也具有复用和扩展的功能。</span></span><br><span class="line"><span class="comment"> * 除了回调函数之外，DiyCallback 类的 execute() 函数中的逻辑都可以复用。</span></span><br><span class="line"><span class="comment"> * 如果 ICallback、DiyCallback 类是框架代码，Client 是使用框架的客户端代码，我们可以通过 ICallback 定制 execute() 函数，</span></span><br><span class="line"><span class="comment"> * 也就是说，框架因此具有了扩展的能力。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Client</span> <span class="variable">client</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Client</span>();</span><br><span class="line">        <span class="type">DiyCallback</span> <span class="variable">diyCallback</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DiyCallback</span>();</span><br><span class="line">        client.ok();</span><br><span class="line">        client.ok2(diyCallback);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ICallback...</span><br><span class="line">check...</span><br><span class="line">DiyCallback...</span><br><span class="line">other...</span><br></pre></td></tr></table></figure><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><blockquote><p>模板模式基于继承来实现，回调基于组合来实现</p></blockquote><p>从应用场景上来看，同步回调跟模板模式几乎一致。它们都是在一个大的算法骨架中，自由替换其中的某个步骤，起到代码复用和扩展的目的。<br>而异步回调跟模板模式有较大差别，更像是观察者模式。</p><p>从代码实现上来看，回调和模板模式完全不同。回调基于组合关系来实现，把一个对象传递给另一个对象，是一种对象之间的关系；<br>模板模式基于继承关系来实现，子类重写父类的抽象方法，是类之间的关系。</p><p>组合优于继承。在代码实现上，回调相对于模板模式会更加灵活，主要体现在下面几点。</p><ol><li>像<code>Java</code>这种只支持单继承的语言，基于模板模式编写的子类，已经继承了一个父类，不再具有继承的能力。</li><li>回调可以使用匿名类来创建回调对象，可以不用事先定义类；而模板模式针对不同的实现都要定义不同的子类。</li><li>如果某个类中定义了多个模板方法，每个方法都有对应的抽象方法，即便只用到其中的一个模板方法，子类也必须实现所有的抽象方法。</li><li>回调更加灵活，只需要往用到的模板方法中注入回调对象即可。</li></ol><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote><ul><li><a href="https://www.runoob.com/design-pattern">菜鸟编程</a></li><li>设计模式之美：王争</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 行为型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>享元模式</title>
      <link href="/e19da94a.html"/>
      <url>/e19da94a.html</url>
      
        <content type="html"><![CDATA[<h1 id="享元模式（结构型）"><a href="#享元模式（结构型）" class="headerlink" title="享元模式（结构型）"></a>享元模式（结构型）</h1><p>享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于结构型模式，<br>它提供了减少对象数量从而改善应用所需的对象结构的方式。</p><p>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。所谓“享元”，顾名思义就是被共享的单元。<br>享元模式的意图是复用对象，节省内存，前提是享元对象是不可变对象。</p><p>具体来讲，当一个系统中存在大量重复对象的时候，我们就可以利用享元模式，将对象设计成享元，<br>在内存中只保留一份实例，供多处代码引用，这样可以减少内存中对象的数量，以起到节省内存的目的。</p><p>实际上，不仅仅相同对象可以设计成享元，对于相似对象，我们也可以将这些对象中相同的部分（字段），提取出来设计成享元，让这些大量相似对象引用这些享元。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong> 运用共享技术有效地支持大量细粒度的对象。</p><p><strong>主要解决：</strong> 在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。</p><p><strong>何时使用：</strong></p><ol><li>系统中有大量对象。</li><li>这些对象消耗大量内存。</li><li>这些对象的状态大部分可以外部化。</li><li>这些对象可以按照内蕴状态分为很多组，当把外蕴对象从对象中剔除出来时，每一组对象都可以用一个对象来代替。</li><li>系统不依赖于这些对象身份，这些对象是不可分辨的。</li></ol><p><strong>如何解决：</strong> 用唯一标识码判断，如果在内存中有，则返回这个唯一标识码所标识的对象。</p><p><strong>关键代码：</strong> 用 HashMap 存储这些对象。</p><h2 id="享元模式中存在两种状态"><a href="#享元模式中存在两种状态" class="headerlink" title="享元模式中存在两种状态"></a>享元模式中存在两种状态</h2><ol><li>内部状态，不会随着环境的改变而改变的可共享部分。</li><li>外部状态，随环境改变而改变的不可以共享的部分。享元模式的实现要领就是区分应用中的这两种状态，并将外部状态外部化。</li></ol><h2 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h2><p>抽象享元角色类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象享元角色类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体享元对象（第一种状态：内部状态）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体享元对象</span></span><br><span class="line"><span class="comment"> * 第一种状态-内部状态，不会随着环境的改变而改变的可共享部分</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ColorEnum colorEnum;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Circle</span><span class="params">(ColorEnum colorEnum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.colorEnum = colorEnum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">draw</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;画个&quot;</span> + colorEnum.name() + <span class="string">&quot;圈圈诅咒你&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ColorEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    RED, GREENUM, BLUE</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>享元工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 享元工厂</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 工厂模式 + 享元模式（不是和单例模式，最明显的差别，if (circle == null) 然后 new ）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShapeFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HashMap&lt;ColorEnum, Shape&gt; circleMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(ColorEnum.values().length);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Shape <span class="title function_">getCircle</span><span class="params">(ColorEnum colorEnum)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Circle</span> <span class="variable">circle</span> <span class="operator">=</span> (Circle) circleMap.get(colorEnum);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (circle == <span class="literal">null</span>) &#123;</span><br><span class="line">            circle = <span class="keyword">new</span> <span class="title class_">Circle</span>(colorEnum);</span><br><span class="line">            circleMap.put(colorEnum, circle);</span><br><span class="line">            System.out.println(<span class="string">&quot;Creating circle of color : &quot;</span> + colorEnum.name());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> circle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FlyWeightTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Shape</span> <span class="variable">redCircle</span> <span class="operator">=</span> ShapeFactory.getCircle(ColorEnum.RED);</span><br><span class="line">        redCircle.draw();</span><br><span class="line"></span><br><span class="line">        <span class="type">Shape</span> <span class="variable">redCircle2</span> <span class="operator">=</span> ShapeFactory.getCircle(ColorEnum.RED);</span><br><span class="line">        redCircle2.draw();</span><br><span class="line"></span><br><span class="line">        <span class="type">Shape</span> <span class="variable">blueCircle</span> <span class="operator">=</span> ShapeFactory.getCircle(ColorEnum.BLUE);</span><br><span class="line">        blueCircle.draw();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Creating circle of color : RED</span><br><span class="line">画个RED圈圈诅咒你</span><br><span class="line">画个RED圈圈诅咒你</span><br><span class="line">Creating circle of color : BLUE</span><br><span class="line">画个BLUE圈圈诅咒你</span><br></pre></td></tr></table></figure><p>拓展，若原享用对象还有外部状态（随环境改变而改变的不可以共享的部分），我们可以通过组合的方式将外部状态外部化，内部状态存储在享元工厂。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 第二种状态-外部状态，随环境改变而改变的不可以共享的部分。享元模式的实现要领就是区分应用中的这两种状态，并将外部状态外部化</span></span><br><span class="line"><span class="comment"> * x、y、radius是可以变化的，但是Circle就是固定的几种，我们可以通过组合的方式将外部状态外部化</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CirclePro</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Circle circle;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> x;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> y;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> radius;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CirclePro</span><span class="params">(Circle circle)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.circle = circle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><h3 id="享元模式跟单例的区别"><a href="#享元模式跟单例的区别" class="headerlink" title="享元模式跟单例的区别"></a>享元模式跟单例的区别</h3><p>在单例模式中，一个类只能创建一个对象，而在享元模式中，一个类可以创建多个对象，每个对象被多处代码引用共享。<br>实际上，享元模式有点类似于之前讲到的单例的变体：多例。</p><p>我们前面也多次提到，区别两种设计模式，不能光看代码实现，而是要看设计意图，也就是要解决的问题。<br>尽管从代码实现上来看，享元模式和多例有很多相似之处，但从设计意图上来看，它们是完全不同的。<br>应用享元模式是为了对象复用，节省内存，而应用多例模式是为了限制对象的个数。</p><h3 id="享元模式跟缓存的区别"><a href="#享元模式跟缓存的区别" class="headerlink" title="享元模式跟缓存的区别"></a>享元模式跟缓存的区别</h3><p>在享元模式的实现中，我们通过工厂类来“缓存”已经创建好的对象。这里的“缓存”实际上是“存储”的意思，跟我们平时所说的数据库缓存、CPU缓存、MemCache缓存是两回事。<br>我们平时所讲的缓存，主要是为了提高访问效率，而非复用。</p><h3 id="享元模式跟对象池的区别"><a href="#享元模式跟对象池的区别" class="headerlink" title="享元模式跟对象池的区别"></a>享元模式跟对象池的区别</h3><p>对象池、连接池（比如数据库连接池）、线程池等也是为了复用，那它们跟享元模式有什么区别呢？</p><p>简单解释一下对象池。像 C++这样的编程语言，内存的管理是由程序员负责的。<br>为了避免频繁地进行对象创建和释放导致内存碎片，我们可以预先申请一片连续的内存空间，也就是这里说的对象池。<br>每次创建对象时，我们从对象池中直接取出一个空闲对象来使用，对象使用完成之后，再放回到对象池中以供后续复用，而非直接释放掉。</p><p>虽然对象池、连接池、线程池、享元模式都是为了复用，但是，如果我们再细致地抠一抠“复用”这个字眼的话，<br>对象池、连接池、线程池等池化技术中的“复用”和享元模式中的“复用”实际上是不同的概念。</p><p>池化技术中的“复用”可以理解为“重复使用”，主要目的是节省时间（比如从数据库池中取一个连接，不需要重新创建）。<br>在任意时刻，每一个对象、连接、线程，并不会被多处使用，而是被一个使用者独占，当使用完成之后，放回到池中，再由其他使用者重复利用。</p><p>享元模式中的“复用”可以理解为“共享使用”，在整个生命周期中，都是被所有使用者共享的，主要目的是节省空间。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>为了使对象可以共享，需要将一些不能共享的状态外部化，这将增加程序的复杂性。</li><li>读取享元模式的外部状态会使得运行时间稍微变长。</li><li>享元模式对 <code>JVM</code>的垃圾回收并不友好。因为享元工厂类一直保存了对享元对象的引用，<br>这就导致享元对象在没有任何代码使用的情况下，也并不会被<code>JVM</code>垃圾回收机制自动回收掉。</li></ol><p>因此，在某些情况下，如果对象的生命周期很短，也不会被密集使用，利用享元模式反倒可能会浪费更多的内存。<br>所以，除非经过线上验证，利用享元模式真的可以大大节省内存，否则，就不要过度使用这个模式，为了一点点内存的节省而引入一个复杂的设计模式，得不偿失啊。</p><h2 id="享元模式在java源码中的应用"><a href="#享元模式在java源码中的应用" class="headerlink" title="享元模式在java源码中的应用"></a>享元模式在java源码中的应用</h2><ul><li><code>IntegerCache</code>：-128 到 127 之间的整型对象会被事先创建好，当我们使用自动装箱或者valueOf() 来创建这个数值区间的整型对象时，会复用<br><code>IntegerCache</code>类事先创建好的对象，这里的 IntegerCache 类就是享元工厂类，事先创建好的整型对象就是享元对象。</li><li>在 <code>Java String</code> 类的实现中，JVM 开辟一块存储区专门存储字符串常量，这块存储区叫作字符串常量池，<br>类似于 <code>Integer</code>中的<code>IntegerCache</code>。 不过，跟 IntegerCache不同的是，它并非事先创建好需要共享的对象，而是在程序的运行期间，根据需要来创建和缓存字符串常量。</li></ul><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote><ul><li><a href="https://www.runoob.com/design-pattern">菜鸟编程</a></li><li>设计模式之美：王争</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 结构型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>组合模式</title>
      <link href="/df879792.html"/>
      <url>/df879792.html</url>
      
        <content type="html"><![CDATA[<h1 id="组合模式（结构型）"><a href="#组合模式（结构型）" class="headerlink" title="组合模式（结构型）"></a>组合模式（结构型）</h1><p>组合模式（Composite Pattern），又叫部分整体模式，将一组对象组织成树形结构，将单个对象和组合对象都看做树中的节点，以统一处理逻辑，<br>并且它利用树形结构的特点，递归地处理每个子树，依次简化代码实现。<br><strong>这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式</strong>。</p><p>组合模式的设计思路，与其说是一种设计模式，倒不如说是对业务场景的一种数据结构和算法的抽象。<br>其中，数据可以表示成树这种数据结构，业务需求可以通过在树上的递归遍历算法来实现。使用组合模式的前提在于，你的业务场景必须能够表示成树形结构。<br>所以，组合模式的应用场景也比较局限，它并不是一种很常用的设计模式。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong> 将对象组合成树形结构以表示”部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p><p><strong>主要解决：</strong> 它在我们树型结构的问题中，模糊了简单元素和复杂元素的概念，客户程序可以像处理简单元素一样来处理复杂元素，从而使得客户程序与复杂元素的内部结构解耦。</p><p><strong>何时使用：</strong></p><ol><li>想表示对象的部分-整体层次结构（树形结构）。</li><li>望用户忽略组合对象与单个对象的不同，用户将统一地使用组合结构中的所有对象。</li></ol><p><strong>如何解决：</strong> 树枝和叶子实现统一接口，树枝内部组合该接口。</p><p><strong>关键代码：</strong> 树枝内部组合该接口，并且含有内部属性 List，里面放 Component。</p><h2 id="案例：员工与带队领导"><a href="#案例：员工与带队领导" class="headerlink" title="案例：员工与带队领导"></a>案例：员工与带队领导</h2><p>人</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Human</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 薪资</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">double</span> salary;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">Human</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算薪资</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">double</span> <span class="title function_">calculateSalary</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>员工</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 员工</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(<span class="type">double</span> salary)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.salary = salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculateSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>带队领导</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 带队领导</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Leader</span> <span class="keyword">extends</span> <span class="title class_">Human</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Human&gt; SUB_NODES = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Leader</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Human e)</span> &#123;</span><br><span class="line">        SUB_NODES.add(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(Human e)</span> &#123;</span><br><span class="line">        SUB_NODES.remove(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Human&gt; <span class="title function_">getSubNodes</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SUB_NODES;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 要注意递归调用问题！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculateSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SUB_NODES.stream()</span><br><span class="line">                .map(Human::calculateSalary)</span><br><span class="line">                .reduce(Double::sum)</span><br><span class="line">                .orElse(<span class="number">0.00</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CompositeTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 员工</span></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">li4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1000</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">z3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1000</span>);</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">w5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 计算每个领导 team salary （领导工资不算入内）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 领导</span></span><br><span class="line">        <span class="type">Leader</span> <span class="variable">leader1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Leader</span>();</span><br><span class="line">        leader1.add(li4);</span><br><span class="line">        leader1.add(z3);</span><br><span class="line">        System.out.println(<span class="string">&quot;leader1 team salary: &quot;</span> + leader1.calculateSalary());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 中层领导</span></span><br><span class="line">        <span class="type">Leader</span> <span class="variable">leader2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Leader</span>();</span><br><span class="line">        leader2.add(w5);</span><br><span class="line">        System.out.println(<span class="string">&quot;leader2 team salary: &quot;</span> + leader2.calculateSalary());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 大领导</span></span><br><span class="line">        <span class="type">Leader</span> <span class="variable">boss</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Leader</span>();</span><br><span class="line">        boss.add(leader1);</span><br><span class="line">        boss.add(leader2);</span><br><span class="line">        System.out.println(<span class="string">&quot;boss team salary: &quot;</span> + boss.calculateSalary());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">leader1 team salary: 2000.0</span><br><span class="line">leader2 team salary: 1000.0</span><br><span class="line">boss team salary: 3000.0</span><br></pre></td></tr></table></figure><blockquote><p>注意：calculateSalary()会被递归调用，不要添加导致栈溢出的操作，如下面代码</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误示例，想把leader自己也添加到SUB_NODES中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">calculateSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">double</span> <span class="variable">teamSalary</span> <span class="operator">=</span> <span class="number">0.00</span>;</span><br><span class="line">        SUB_NODES.add(<span class="built_in">this</span>); <span class="comment">// 递归 导致 一直 add this ，且没有递归终止条件</span></span><br><span class="line">        <span class="keyword">for</span> (StackOverFlowDemo sub_node : SUB_NODES) &#123;</span><br><span class="line">            System.out.println(SUB_NODES.size());</span><br><span class="line">            teamSalary += sub_node.calculateSalary(); <span class="comment">// 递归</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> teamSalary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote><ul><li><a href="https://www.runoob.com/design-pattern">菜鸟编程</a></li><li>设计模式之美：王争</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 结构型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>外观模式</title>
      <link href="/f7de8aa8.html"/>
      <url>/f7de8aa8.html</url>
      
        <content type="html"><![CDATA[<h1 id="外观模式（结构型）"><a href="#外观模式（结构型）" class="headerlink" title="外观模式（结构型）"></a>外观模式（结构型）</h1><p>又叫做门面模式。实际上，从隐藏实现复杂性，提供更易用接口这个意图来看，<br>门面模式类似之前讲到的迪米特法则（最少知识原则）和接口隔离原则： 两个有交互的系统，只暴露有限的必要的接口。<br>除此之外，门面模式还有点类似之前提到封装、抽象的设计思想，提供更抽象的接口，封装底层实现细节。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong> 为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。</p><p><strong>主要解决：</strong> 降低访问复杂系统的内部子系统时的复杂度，简化客户端之间的接口。</p><p><strong>何时使用：</strong></p><ol><li>客户端不需要知道系统内部的复杂联系，整个系统只需提供一个”接待员”即可。</li><li>定义系统的入口。</li></ol><p><strong>如何解决：</strong> 客户端不与系统耦合，外观类与系统耦合。</p><p><strong>关键代码：</strong> 在客户端和复杂系统之间再加一层，这一层将调用顺序、依赖关系等处理好。</p><h2 id="案例：医院"><a href="#案例：医院" class="headerlink" title="案例：医院"></a>案例：医院</h2><p>科室</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 科室接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Department</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 医疗</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">treat</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 内科</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MedicalDepartment</span> <span class="keyword">implements</span> <span class="title class_">Department</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">treat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;治疗内科&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 外科</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SurgicalDepartment</span> <span class="keyword">implements</span> <span class="title class_">Department</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">treat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;治疗外科&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>门面：专家会诊</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 外观模式</span></span><br><span class="line"><span class="comment"> * 专家会诊，及其众多科室能力，对外提供服务，不暴露具体科室</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> luis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 2022/5/1 9:37</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExpertConsultationFace</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MedicalDepartment medicalDepartment;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SurgicalDepartment surgicalDepartment;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ExpertConsultationFace</span><span class="params">(MedicalDepartment medicalDepartment, SurgicalDepartment surgicalDepartment)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.medicalDepartment = medicalDepartment;</span><br><span class="line">        <span class="built_in">this</span>.surgicalDepartment = surgicalDepartment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">treatMedical</span><span class="params">()</span> &#123;</span><br><span class="line">        medicalDepartment.treat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">treatSurgical</span><span class="params">()</span> &#123;</span><br><span class="line">        surgicalDepartment.treat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FaceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ExpertConsultationFace</span> <span class="variable">expertConsultation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExpertConsultationFace</span>(<span class="keyword">new</span> <span class="title class_">MedicalDepartment</span>(), <span class="keyword">new</span> <span class="title class_">SurgicalDepartment</span>());</span><br><span class="line">        expertConsultation.treatMedical();</span><br><span class="line">        expertConsultation.treatSurgical();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">治疗内科</span><br><span class="line">治疗外科</span><br></pre></td></tr></table></figure><h2 id="从代码实现的角度来看，该如何组织门面接口和非门面接口"><a href="#从代码实现的角度来看，该如何组织门面接口和非门面接口" class="headerlink" title="从代码实现的角度来看，该如何组织门面接口和非门面接口"></a>从代码实现的角度来看，该如何组织门面接口和非门面接口</h2><ol><li>如果门面接口不多，我们完全可以将它跟非门面接口放到一块，也不需要特殊标记，当作普通接口来用即可。</li><li>如果门面接口很多，我们可以在已有的接口之上，再重新抽象出一层，专门放置门面接口，从类、包的命名上跟原来的接口层做区分。</li><li>如果门面接口特别多，并且很多都是跨多个子系统的，我们可以将门面接口放到一个新的子系统中。</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><h3 id="解决易用性问题"><a href="#解决易用性问题" class="headerlink" title="解决易用性问题"></a>解决易用性问题</h3><p>门面模式可以用来封装系统的底层实现，隐藏系统的复杂性，提供一组更加简单易用、更高层的接口。比如，Linux 系统调用函数就可以看作一种“门面”。</p><h3 id="解决性能问题"><a href="#解决性能问题" class="headerlink" title="解决性能问题"></a>解决性能问题</h3><p>通过将多个接口调用替换为一个门面接口调用，减少网络通信成本，提高App客户端的响应速度。</p><h3 id="解决分布式事务问题"><a href="#解决分布式事务问题" class="headerlink" title="解决分布式事务问题"></a>解决分布式事务问题</h3><p>在一个金融系统中，有两个业务领域模型，用户和钱包。这两个业务领域模型都对外暴露了一系列接口，比如用户的增删改查接口、钱包的增删改查接口。</p><p>假设有这样一个业务场景：在用户注册的时候，我们不仅会创建用户（在数据库User表中），还会给用户创建一个钱包（Wallet 表中）。<br>对于这样一个简单的业务需求，我们可以通过依次调用用户的创建接口和钱包的创建接口来完成。</p><p>但是，用户注册需要支持事务，也就是说，创建用户和钱包的两个操作，要么都成功，要么都失败，不能一个成功、一个失败。<br>要支持两个接口调用在一个事务中执行，是比较难实现的，这涉及分布式事务问题。虽然我们可以通过引入分布式事务框架或者事后补偿的机制来解决，但代码实现都比较复杂。</p><p>而最简单的解决方案是，利用数据库事务或者Spring 框架提供的事务，在一个事务中，执行创建用户和创建钱包这两个 SQL 操作。<br>这就要求两个 SQL操作要在一个接口中完成，所以，我们可以借鉴门面模式的思想，再设计一个包裹这两个操作的新接口，让新接口在一个事务中执行两个SQL操作。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote><ul><li><a href="https://www.runoob.com/design-pattern">菜鸟编程</a></li><li>设计模式之美：王争</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 结构型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>适配器模式</title>
      <link href="/f5c535ea.html"/>
      <url>/f5c535ea.html</url>
      
        <content type="html"><![CDATA[<h1 id="适配器模式（结构型）"><a href="#适配器模式（结构型）" class="headerlink" title="适配器模式（结构型）"></a>适配器模式（结构型）</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>代理、桥接、装饰器、适配器，这 4 种模式是比较常用的结构型设计模式。它们的代码结构非常相似。<br>笼统来说，它们都可以称为 Wrapper模式，也就是通过 Wrapper 类二次封装原始类。<br>尽管代码结构相似，但这 4 种设计模式的用意完全不同，也就是说要解决的问题、应用场景不同，这也是它们的主要区别。</p><p><strong>意图：</strong> 将一个类的接口转换成客户希望的另外一个接口。适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。</p><p><strong>主要解决：</strong> 主要解决在软件系统中，常常要将一些”现存的对象”放到新的环境中，而新环境要求的接口是现对象不能满足的。</p><p><strong>如何解决：</strong> 继承或依赖（推荐）。</p><p><strong>关键代码：</strong> 适配器继承或依赖已有的对象，实现想要的目标接口。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><h4 id="1-封装有缺陷的接口设计"><a href="#1-封装有缺陷的接口设计" class="headerlink" title="1. 封装有缺陷的接口设计"></a>1. 封装有缺陷的接口设计</h4><p>外部系统在接口设计方面有缺陷（比如包含大量静态方法），引入之后会影响到我们自身代码的可测试性。<br>为了隔离设计上的缺陷，我们希望对外部系统提供的接口进行二次封装，抽象出更好的接口设计。</p><h4 id="2-统一多个类的接口设计"><a href="#2-统一多个类的接口设计" class="headerlink" title="2. 统一多个类的接口设计"></a>2. 统一多个类的接口设计</h4><p>某个功能的实现依赖多个外部系统（或者说类）。通过适配器模式，将它们的接口适配为统一的接口定义，然后我们就可以使用多态的特性来复用代码逻辑。</p><ul><li>通过接口转换，将一个类插入另一个类系中。（比如老虎和飞禽，现在多了一个飞虎，在不增加实体的需求下，增加一个适配器，在里面包容一个虎对象，实现飞的接口。）</li><li>想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进的类一起工作，这些源类不一定有一致的接口。</li></ul><h4 id="3-替换依赖的外部系统"><a href="#3-替换依赖的外部系统" class="headerlink" title="3. 替换依赖的外部系统"></a>3. 替换依赖的外部系统</h4><p>当我们把项目中依赖的一个外部系统替换为另一个外部系统的时候，利用适配器模式，可以减少对代码的改动。</p><h4 id="4-兼容老版本接口"><a href="#4-兼容老版本接口" class="headerlink" title="4. 兼容老版本接口"></a>4. 兼容老版本接口</h4><p>在做版本升级的时候，对于一些要废弃的接口，我们不直接将其删除，而是暂时保留，并且标注为deprecated，<br>并将内部实现逻辑委托为新的接口实现。 这样做的好处是，让使用它的项目有个过渡期，而不是强制进行代码修改。<br>例如: JDK1.0 中包含一个遍历集合容器的类 Enumeration。JDK2.0 对这个类进行了重构，将它改名为 Iterator 类，并且对它的代码实现做了优化。</p><h4 id="5-适配不同格式的数据"><a href="#5-适配不同格式的数据" class="headerlink" title="5. 适配不同格式的数据"></a>5. 适配不同格式的数据</h4><p>Java 中的 Arrays.asList()也可以看作一种数据适配器，将数组类型的数据转化为集合容器类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;Larry&quot;</span>, <span class="string">&quot;Moe&quot;</span>, <span class="string">&quot;Curly&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="案例-电脑和新显示器"><a href="#案例-电脑和新显示器" class="headerlink" title="案例: 电脑和新显示器"></a>案例: 电脑和新显示器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> luis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> * 2022/4/23 14:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HDMI连接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">connectWithHdMi</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">music</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新显示器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> luis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 2022/4/23 14:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NewMonitor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DI链接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connectWithDi</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;NewMonitor connect with DI&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">music</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;NewMonitor play music&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类适配器：基于继承，重写不兼容接口即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类适配器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> luis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> * 2022/4/23 14:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConnectorClazzAdapter</span> <span class="keyword">extends</span> <span class="title class_">NewMonitor</span> <span class="keyword">implements</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类适配器：基于继承，重写不兼容接口即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connectWithHdMi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.connectWithDi();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象适配器：重写实现方式，让接口实现兼容</p><blockquote><p>对象适配器的麻烦点：需要显式的重新实现所有方法，更适用于接口方法少的情况</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对象适配器：基于组合</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> luis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> * 2022/4/23 14:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConnectObjAdapter</span> <span class="keyword">implements</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> NewMonitor newMonitor;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ConnectObjAdapter</span><span class="params">(NewMonitor newMonitor)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.newMonitor = newMonitor;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写实现方式，让接口实现兼容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">connectWithHdMi</span><span class="params">()</span> &#123;</span><br><span class="line">        newMonitor.connectWithDi();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对象适配器的麻烦点：需要显式的重新实现所有方法，更适用于接口方法少的情况</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">music</span><span class="params">()</span> &#123;</span><br><span class="line">        newMonitor.music();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdapterTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testClazz</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectorClazzAdapter</span>();</span><br><span class="line">        computer.connectWithHdMi();</span><br><span class="line">        computer.music();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testObj</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConnectObjAdapter</span>(<span class="keyword">new</span> <span class="title class_">NewMonitor</span>());</span><br><span class="line">        computer.connectWithHdMi();</span><br><span class="line">        computer.music();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NewMonitor connect with DI</span><br><span class="line">NewMonitor play music</span><br><span class="line"></span><br><span class="line">NewMonitor connect with DI</span><br><span class="line">NewMonitor play music</span><br></pre></td></tr></table></figure><p>小贴士：</p><blockquote><ul><li>ConnectorClazzAdapter复用父类Computer的接口，使用类适配器的实现方式，ConnectAdapter的代码量要少一些。</li><li>若NewMonitor 接口很多，而且 NewMonitor 和 Computer 接口定义大部分都不相同，那我们推荐使用对象适配器，因为组合结构相对于继承更加灵活。</li></ul></blockquote><h3 id="剖析适配器模式在-Java-日志中的应用"><a href="#剖析适配器模式在-Java-日志中的应用" class="headerlink" title="剖析适配器模式在 Java 日志中的应用"></a>剖析适配器模式在 Java 日志中的应用</h3><p>Slf4j 的出现晚于 JUL、JCL、log4j 等日志框架，所以，这些日志框架也不可能牺牲掉版本兼容性，将接口改造成符合 Slf4j<br>接口规范。Slf4j也事先考虑到了这个问题，所以，它不仅仅提供了统一的接口定义，还提供了针对不同日志框架的适配器。<br>对不同日志框架的接口进行二次封装，适配成统一的Slf4j接口定义。</p><h3 id="代理、桥接、装饰器、适配器-4-种设计模式的区别"><a href="#代理、桥接、装饰器、适配器-4-种设计模式的区别" class="headerlink" title="代理、桥接、装饰器、适配器 4 种设计模式的区别"></a>代理、桥接、装饰器、适配器 4 种设计模式的区别</h3><ul><li>代理模式：代理模式在不改变原始类接口的条件下，为原始类定义一个代理类，主要目的是控制访问，而非加强功能，这是它跟装饰器模式最大不同。【控制访问】</li><li>桥接模式：桥接模式的目的是将接口部分和实现部分分离，从而让它们可以较为容易、也相对独立地加以改变。【接口和实现独立】</li><li>装饰器模式：装饰者模式在不改变原始类接口的情况下，对原始类功能进行增强，并且支持多个装饰器的嵌套使用。 【功能增强，可嵌套】</li><li>适配器模式：适配器模式是一种事后的补救策略。适配器提供跟原始类不同的接口，而代理模式、装饰器模式提供的都是跟原始类相同的接口。【注重兼容】</li></ul><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote><ul><li><a href="https://www.runoob.com/design-pattern">菜鸟编程</a></li><li>设计模式之美：王争</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 结构型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>装饰器模式</title>
      <link href="/9bd93306.html"/>
      <url>/9bd93306.html</url>
      
        <content type="html"><![CDATA[<h1 id="装饰器模式（结构型）"><a href="#装饰器模式（结构型）" class="headerlink" title="装饰器模式（结构型）"></a>装饰器模式（结构型）</h1><p>装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于结构型模式，它是作为现有的类的一个包装。</p><p>这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。</p><p>理解：</p><ol><li>装饰器类和原始类继承同样的父类，这样我们可以对原始类“嵌套”多个装饰器类。</li><li>装饰器类是对功能的增强（具体实现不对外暴露），这也是装饰器模式应用场景的一个重要特点。</li></ol><p><strong>代理模式偏向提供更多功能，并暴露给外部调用</strong></p><p>使用场景：</p><ol><li>“使用组合来替代继承”，避免造成类继承“过长”发生类爆炸，比如要增强某些已有功能</li><li>针对不同业务场景要对原功能添加（装饰）不同的处理逻辑。</li></ol><blockquote><p>经典案例：Java IO类库源码（InputStream、FileInputStream、BufferedInputStream）</p></blockquote><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong> 动态地给一个对象添加一些额外的职责。就增加功能来说，装饰器模式相比生成子类更为灵活。</p><p><strong>主要解决：</strong> 一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。</p><p><strong>何时使用：</strong> 在不想增加很多子类的情况下扩展类。</p><p><strong>如何解决：</strong> 将具体功能职责划分，同时继承装饰者模式。</p><h2 id="案例-打印机"><a href="#案例-打印机" class="headerlink" title="案例 - 打印机"></a>案例 - 打印机</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> luis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> * 打印机</span></span><br><span class="line"><span class="comment"> * 2022/4/23 0:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Printer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 核心功能</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心功能实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> luis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> * 惠普打印机</span></span><br><span class="line"><span class="comment"> * 2022/4/23 0:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HpPrinter</span> <span class="keyword">implements</span> <span class="title class_">Printer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HpPrinter</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HP Printer is working...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用装饰器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> luis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> * 惠普打印机 (Pro版本)</span></span><br><span class="line"><span class="comment"> * 2022/4/23 0:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HpPrinterDecorator</span> <span class="keyword">implements</span> <span class="title class_">Printer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Printer printer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HpPrinterDecorator</span><span class="params">(Printer printer)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.printer = printer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 装饰者模式</span></span><br><span class="line"><span class="comment">     * 第一个比较特殊的地方是：装饰器类和原始类继承同样的父类，这样我们可以对原始类“嵌套”多个装饰器类。</span></span><br><span class="line"><span class="comment">     * 第二个比较特殊的地方是：装饰器类是对功能的增强（具体实现不对外暴露），这也是装饰器模式应用场景的一个重要特点。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">moreColor</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Decorator more color...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">moreFont</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Decorator more font...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        printer.print();</span><br><span class="line">        <span class="comment">// 功能增强</span></span><br><span class="line">        <span class="built_in">this</span>.moreColor();</span><br><span class="line">        <span class="built_in">this</span>.moreFont();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多种装饰器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> luis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> * 惠普打印机 (Speed Pro版本)</span></span><br><span class="line"><span class="comment"> * 2022/4/23 0:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HpPrinterSpeedDecorator</span> <span class="keyword">implements</span> <span class="title class_">Printer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Printer printer;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HpPrinterSpeedDecorator</span><span class="params">(Printer printer)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.printer = printer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 装饰者模式</span></span><br><span class="line"><span class="comment">     * 第一个比较特殊的地方是：装饰器类和原始类继承同样的父类，这样我们可以对原始类“嵌套”多个装饰器类。</span></span><br><span class="line"><span class="comment">     * 第二个比较特殊的地方是：装饰器类是对功能的增强（具体实现不对外暴露），这也是装饰器模式应用场景的一个重要特点。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">speed</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;SpeedDecorator speed is fast...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        printer.print();</span><br><span class="line">        <span class="comment">// 功能增强</span></span><br><span class="line">        <span class="built_in">this</span>.speed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> luis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> * 测试</span></span><br><span class="line"><span class="comment"> * 2022/4/23 0:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DecoratorTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 原始类</span></span><br><span class="line">        <span class="type">Printer</span> <span class="variable">printer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HpPrinter</span>();</span><br><span class="line">        printer.print();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 一个装饰器中有不同的增强功能</span></span><br><span class="line">        <span class="type">Printer</span> <span class="variable">printerDecorator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HpPrinterDecorator</span>(printer);</span><br><span class="line">        printerDecorator.print();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------&quot;</span>);</span><br><span class="line">        <span class="comment">// 多个装饰器一起使用</span></span><br><span class="line">        <span class="type">Printer</span> <span class="variable">printerSpeedDecorator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HpPrinterSpeedDecorator</span>(printerDecorator);</span><br><span class="line">        printerSpeedDecorator.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">HP Printer is working...</span><br><span class="line">----------------------</span><br><span class="line">HP Printer is working...</span><br><span class="line">Decorator more color...</span><br><span class="line">Decorator more font...</span><br><span class="line">----------------------</span><br><span class="line">HP Printer is working...</span><br><span class="line">Decorator more color...</span><br><span class="line">Decorator more font...</span><br><span class="line">SpeedDecorator speed is fast...</span><br></pre></td></tr></table></figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote><ul><li><a href="https://www.runoob.com/design-pattern">菜鸟编程</a></li><li>设计模式之美：王争</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 结构型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>桥接模式</title>
      <link href="/563268dc.html"/>
      <url>/563268dc.html</url>
      
        <content type="html"><![CDATA[<h1 id="桥接模式（结构型）"><a href="#桥接模式（结构型）" class="headerlink" title="桥接模式（结构型）"></a>桥接模式（结构型）</h1><p>对于这个模式有两种不同的理解方式。在 GoF 的《设计模式》一书中，桥接模式被定义为：“将抽象和实现解耦，让它们可以独立变化。</p><p>第二种理解：“一个类存在两个（或多个）独立变化的维度，我们通过组合的方式，让这两个（或多个）维度可以独立进行扩展。”</p><p>对于第一种 GoF 的理解方式，弄懂定义中“抽象”和“实现”两个概念，是理解它的关键。定义中的“抽象”，指的并非“抽象类”或“接口”，而是被抽象出来的一套“类库”，<br>它只包含骨架代码，真正的业务逻辑需要委派给定义中的“实现”来完成。</p><p>而定义中的“实现”，也并非“接口的实现类”，而是一套独立的“类库”。“抽象”和“实现”独立开发，通过对象之间的组合关系，组装在一起。</p><p>对于第二种理解方式，它非常类似我们之前讲过的“组合优于继承”设计原则，通过组合关系来替代继承关系，避免继承层次的指数级爆炸。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong> 将抽象部分与实现部分分离，使它们都可以独立的变化。</p><p><strong>主要解决：</strong> 在有多种可能会变化的情况下，用继承会造成类爆炸问题，扩展起来不灵活。</p><p><strong>何时使用：</strong> 实现系统可能有多个角度分类，每一种角度都可能变化。</p><p><strong>如何解决：</strong> 把这种多角度分类分离出来，让它们独立变化，减少它们之间耦合。</p><p><strong>关键代码：</strong> 抽象类依赖实现类。</p><h2 id="案例-消息通知场景"><a href="#案例-消息通知场景" class="headerlink" title="案例 - 消息通知场景"></a>案例 - 消息通知场景</h2><h3 id="原始实现方式"><a href="#原始实现方式" class="headerlink" title="原始实现方式"></a>原始实现方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotificationDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; emailAddresses;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; telephones;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; wechatIds;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每个 if-else 分支中的代码逻辑都比较复杂，发送通知的所有逻辑都扎堆在 NotificationDemo 类中。</span></span><br><span class="line"><span class="comment">     * 我们知道，类的代码越多，就越难读懂，越难修改，维护的成本也就越高。很多设计模式都是试图将庞大的类拆分成更细小的类，然后再通过某种更合理的结构组装在一起。</span></span><br><span class="line"><span class="comment">     * 针对 NotificationDemo 的代码，我们将不同渠道的发送逻辑剥离出来，形成独立的消息发送类（MsgSender 相关类）。</span></span><br><span class="line"><span class="comment">     * 其中，NotificationDemo 类相当于抽象，MsgSender 类相当于实现，两者可以独立开发，通过组合关系（也就是桥梁）任意组合在一起。</span></span><br><span class="line"><span class="comment">     * 所谓任意组合的意思就是，不同紧急程度的消息和发送渠道之间的对应关系，不是在代码中固定写死的，我们可以动态地去指定（比如，通过读取配置来获取对应关系）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">(NotificationEmergencyLevelEnum level, String message)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (NotificationEmergencyLevelEnum.SEVERE.equals(level)) &#123;</span><br><span class="line">            <span class="comment">// 自动语音电话、发微信、发邮件</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (NotificationEmergencyLevelEnum.URGENCY.equals(level)) &#123;</span><br><span class="line">            <span class="comment">// 自动语音电话、发微信</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (NotificationEmergencyLevelEnum.NORMAL.equals(level)) &#123;</span><br><span class="line">            <span class="comment">// 发微信、发邮件</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (NotificationEmergencyLevelEnum.TRIVIAL.equals(level)) &#123;</span><br><span class="line">            <span class="comment">// 发微信、发邮件</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通知紧急级别</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">NotificationEmergencyLevelEnum</span> &#123;</span><br><span class="line">    SEVERE, URGENCY, NORMAL, TRIVIAL</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>通知 + 消息发送接口：将抽象部分与实现部分分离，使它们都可以独立的变化。它们组合的方式也体现了<code>桥接</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractNotification</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 供子类继承该属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> MsgSender msgSender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 供子类初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">AbstractNotification</span><span class="params">(MsgSender msgSender)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msgSender = msgSender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提供子类需重写的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息发送接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MsgSender</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通知级别实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NormalNotification</span> <span class="keyword">extends</span> <span class="title class_">AbstractNotification</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NormalNotification</span><span class="params">(MsgSender msgSender)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(msgSender);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Normal: &quot;</span>);</span><br><span class="line">        msgSender.send(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SevereNotification</span> <span class="keyword">extends</span> <span class="title class_">AbstractNotification</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SevereNotification</span><span class="params">(MsgSender msgSender)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(msgSender);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Severe: &quot;</span>);</span><br><span class="line">        msgSender.send(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrivialNotification</span> <span class="keyword">extends</span> <span class="title class_">AbstractNotification</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TrivialNotification</span><span class="params">(MsgSender msgSender)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(msgSender);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Trivial: &quot;</span>);</span><br><span class="line">        msgSender.send(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UrgencyNotification</span> <span class="keyword">extends</span> <span class="title class_">AbstractNotification</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UrgencyNotification</span><span class="params">(MsgSender msgSender)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(msgSender);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;Urgency: &quot;</span>);</span><br><span class="line">        msgSender.send(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息发送实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmailMsgSender</span> <span class="keyword">implements</span> <span class="title class_">MsgSender</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;send email...&quot;</span>.concat(message));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TelephoneMsgSender</span> <span class="keyword">implements</span> <span class="title class_">MsgSender</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;String&gt; telephones;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TelephoneMsgSender</span><span class="params">(List&lt;String&gt; telephones)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.telephones = telephones;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;call ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WechatMsgSender</span> <span class="keyword">implements</span> <span class="title class_">MsgSender</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;send wechat...&quot;</span>.concat(message));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NotificationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">AbstractNotification</span> <span class="variable">n1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NormalNotification</span>(<span class="keyword">new</span> <span class="title class_">EmailMsgSender</span>());</span><br><span class="line">        n1.notify(<span class="string">&quot;a little error&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">AbstractNotification</span> <span class="variable">n2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NormalNotification</span>(<span class="keyword">new</span> <span class="title class_">WechatMsgSender</span>());</span><br><span class="line">        n2.notify(<span class="string">&quot;a little error&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">AbstractNotification</span> <span class="variable">n3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SevereNotification</span>(<span class="keyword">new</span> <span class="title class_">WechatMsgSender</span>());</span><br><span class="line">        n3.notify(<span class="string">&quot;dangerous&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Normal: send email...a little error</span><br><span class="line">Normal: send wechat...a little error</span><br><span class="line">Severe: send wechat...dangerous</span><br></pre></td></tr></table></figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote><ul><li><a href="https://www.runoob.com/design-pattern">菜鸟编程</a></li><li>设计模式之美：王争</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 结构型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代理模式</title>
      <link href="/7b510e10.html"/>
      <url>/7b510e10.html</url>
      
        <content type="html"><![CDATA[<h1 id="代理模式（结构型）"><a href="#代理模式（结构型）" class="headerlink" title="代理模式（结构型）"></a>代理模式（结构型）</h1><p>在不改变原始类（或叫被代理类）代码的情况下，一个类代表另一个类的功能，通过引入代理类也可以为原始类附加功能。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong> 为其他对象提供一种代理以控制对这个对象的访问。</p><p><strong>主要解决：</strong><br>在直接访问对象时带来的问题，比如说：要访问的对象在远程的机器上。在面向对象系统中，<br>有些对象由于某些原因 （比如对象创建开销很大，或者某些操作需要安全控制，或者需要进程外的访问），<br>直接访问会给使用者或者系统结构带来很多麻烦，我们可以在访问此对象时加上一个对此对象的访问层。</p><p><strong>何时使用：</strong> 想在访问一个类时做一些控制。</p><p><strong>如何解决：</strong> 增加中间层。</p><p><strong>关键代码：</strong> 实现与被代理类组合。</p><h2 id="两种代理模式的实现方法"><a href="#两种代理模式的实现方法" class="headerlink" title="两种代理模式的实现方法"></a>两种代理模式的实现方法</h2><p>一种是基于组合，一种基于继承。</p><p>参照基于接口而非实现编程的设计思想，将原始类对象替换为代理类对象的时候，为了让代码改动尽量少，在代理模式的代码实现中，代理类和原始类需要实现相同的接口。<br>但是，如果原始类并没有定义接口，并且原始类代码并不是我们开发维护的（比如它来自一个第三方的类库），我们也没办法直接修改原始类，或者给它重新定义一个接口。</p><p>在这种情况下，我们该如何实现代理模式呢？<br>对于这种外部类的扩展，我们一般都是采用继承的方式。这里也不例外。我们让代理类继承原始类，然后扩展附加功能。</p><h3 id="基于组合（静态代理）"><a href="#基于组合（静态代理）" class="headerlink" title="基于组合（静态代理）"></a>基于组合（静态代理）</h3><p>参照基于接口而非实现编程的设计思想，将原始类对象替换为代理类对象的时候，为了让代码改动尽量少，在代理模式的代码实现中，代理类和原始类需要实现相同的接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 租客接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Tenant</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 找房子</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">findHouse</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 租客A</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ATenant</span> <span class="keyword">implements</span> <span class="title class_">Tenant</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findHouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;租客A 找房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中介</span></span><br><span class="line"><span class="comment"> * 租客类（RentHouse）和代理类（FirstMediation）都实现了租客接口（Tenant），这就是一个静态代理的前提。</span></span><br><span class="line"><span class="comment"> * 那就是真实类和代理类要实现同一个接口，在代理类中实现真实类的方法同时可以进行真实类方法的增强处理，</span></span><br><span class="line"><span class="comment"> * 在一个代理类中就可以完成对多个真实对象的注入工作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstMediation</span> <span class="keyword">implements</span> <span class="title class_">Tenant</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ATenant atenant;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FirstMediation</span><span class="params">(ATenant atenant)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.atenant = atenant;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findHouse</span><span class="params">()</span> &#123;</span><br><span class="line">        atenant.findHouse();</span><br><span class="line">        System.out.println(<span class="string">&quot;中介来帮忙&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.rent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中介的能力</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介找到了房子！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">FirstMediation</span> <span class="variable">firstMediation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FirstMediation</span>(<span class="keyword">new</span> <span class="title class_">ATenant</span>());</span><br><span class="line">        firstMediation.findHouse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">租客A 找房子</span><br><span class="line">中介来帮忙</span><br><span class="line">中介找到了房子！</span><br></pre></td></tr></table></figure><h3 id="基于继承"><a href="#基于继承" class="headerlink" title="基于继承"></a>基于继承</h3><p>如果原始类（BTenant）并没有定义接口，并且原始类代码并不是我们开发维护的（比如它来自一个第三方的类库），我们也没办法直接修改原始类，或者给它重新定义一个接口。</p><p>在这种情况下，我们该如何实现代理模式呢？<br>对于这种外部类的扩展，我们一般都是采用继承的方式。这里也不例外。我们让代理类继承原始类，然后扩展附加功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 租客</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BTenant</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findHouse</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;租客B 找房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代理类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 中介</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecondMediation</span> <span class="keyword">extends</span> <span class="title class_">BTenant</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findHouse</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.findHouse();</span><br><span class="line">        System.out.println(<span class="string">&quot;中介来帮忙&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.rent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中介的能力</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介出租房子&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SecondMediation</span> <span class="variable">secondMediation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecondMediation</span>();</span><br><span class="line">        secondMediation.findHouse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">租客B 找房子</span><br><span class="line">中介来帮忙</span><br><span class="line">中介出租房子</span><br></pre></td></tr></table></figure><h2 id="CGLib-和JDK-动态代理对比"><a href="#CGLib-和JDK-动态代理对比" class="headerlink" title="CGLib 和JDK 动态代理对比"></a>CGLib 和JDK 动态代理对比</h2><blockquote><p>JDK</p></blockquote><p>动态代理、CGLib动态代理的代码可以到网上查找，<a href="https://blog.csdn.net/Coder_Yafeng/article/details/103368970?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-103368970-blog-125071501.pc_relevant_multi_platform_whitelistv3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-103368970-blog-125071501.pc_relevant_multi_platform_whitelistv3&utm_relevant_index=1">推荐一篇</a></p><ol><li>JDK 动态代理是实现了被代理对象的接口，CGLib是集成了被代理对象</li><li>JDK和CGLib都是在运行期间生成字节码，JDK是直接写Class字节码，CGLib使用ASM框架写Class字节码，CGLib实现更复杂，生成代理类比JDK效率低</li><li>JDK调用代理方法是通过反射调用，CGLib是通过FastCalss机制直接调用，CGLib执行效率更高</li></ol><h2 id="静态代理和动态代理的区别"><a href="#静态代理和动态代理的区别" class="headerlink" title="静态代理和动态代理的区别"></a>静态代理和动态代理的区别</h2><ol><li>静态代理只能通过手动完成代理操作，如果被代理类增加新方法，代理类需要同步新增方法，违背开闭原则</li><li>动态代理采用运行时动态生成代码的方式，取消了对被代理类的扩展限制，遵循开闭原则</li><li>若动态代理需要对目标类的增强逻辑扩展，结合策略模式，只需新增策略类便可完成，无需修改代理类代码</li></ol><h2 id="代理模式优缺点"><a href="#代理模式优缺点" class="headerlink" title="代理模式优缺点"></a>代理模式优缺点</h2><p>优点：</p><ol><li>代理模式能将代理对象与真实被调用的目标对象隔离</li><li>一定程度上降低了系统的耦合度，扩展性好</li><li>可以起到保护目标对象的作用</li><li>可以对目标对象的功能增强</li></ol><p>缺点：</p><ol><li>代理模式会造成系统设计中类的数量增加</li><li>在客户端与目标对象之间增加一个代理对象，会造成请求处理速度变慢</li><li>增加了系统的复杂度</li></ol><h2 id="代理模式的应用场景"><a href="#代理模式的应用场景" class="headerlink" title="代理模式的应用场景"></a>代理模式的应用场景</h2><h4 id="业务系统的非功能性需求开发"><a href="#业务系统的非功能性需求开发" class="headerlink" title="业务系统的非功能性需求开发"></a>业务系统的非功能性需求开发</h4><p>在业务系统中开发一些非功能性需求，比如：监控、统计、鉴权、限流、事务、幂等、日志。我们将这些附加功能与业务功能解耦，放到代理类中统一处理，让程序员只需要关注业务方面的开发。<br>实际上，前面举的搜集接口请求信息的例子，就是这个应用场景的一个典型例子。</p><p>如果你熟悉 Java 语言和 Spring 开发框架，这部分工作都是可以在 Spring AOP 切面中完成的。前面我们也提到，Spring AOP<br>底层的实现原理就是基于动态代理。</p><h3 id="RPC、缓存中的应用"><a href="#RPC、缓存中的应用" class="headerlink" title="RPC、缓存中的应用"></a>RPC、缓存中的应用</h3><p>实际上，RPC 框架也可以看作一种代理模式，GoF 的《设计模式》一书中把它称作远程代理。通过远程代理，将网络通信、数据编解码等细节隐藏起来。</p><p>客户端在使用 RPC 服务的时候，就像使用本地函数一样，无需了解跟服务器交互的细节。除此之外，RPC<br>服务的开发者也只需要开发业务逻辑，就像开发本地使用的函数一样，不需要关注跟客户端的交互细节。</p><p>那如何来实现接口请求的缓存功能呢？ 最简单的实现方法就是刚刚我们讲到的，给每个需要支持缓存的查询需求都开发两个不同的接口，一个支持缓存，一个支持实时查询。</p><p>但是，这样做显然增加了开发成本，而且会让代码看起来非常臃肿（接口个数成倍增加），也不方便缓存接口的集中管理（增加、删除缓存接口）、集中配置（比如配置每个接口缓存过期时间）。<br>针对这些问题，代理模式就能派上用场了，确切地说，应该是动态代理。如果是基于 Spring 框架来开发的话，那就可以在 AOP切面中完成接口缓存的功能。</p><p>在应用启动的时候，我们从配置文件中加载需要支持缓存的接口，以及相应的缓存策略（比如过期时间）等。<br>当请求到来的时候，我们在 AOP 切面中拦截请求，如果请求中带有支持缓存的字段（比如 http:&#x2F;&#x2F;…?..&amp;cached&#x3D;true），<br>我们便从缓存（内存缓存或者 Redis 缓存等）中获取数据直接返回。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote><ul><li><a href="https://www.runoob.com/design-pattern">菜鸟编程</a></li><li>设计模式之美：王争</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 结构型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>原型模式</title>
      <link href="/91ad9ce3.html"/>
      <url>/91ad9ce3.html</url>
      
        <content type="html"><![CDATA[<h1 id="原型模式（创建型）"><a href="#原型模式（创建型）" class="headerlink" title="原型模式（创建型）"></a>原型模式（创建型）</h1><p>原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。如果对象的创建成本比较大，而同一个类的不同对象之间差别不大（大部分字段都相同），</p><p>在这种情况下，我们可以利用对已有对象（原型）进行复制（或者叫拷贝）的方式，来创建新对象，以达到节省创建时间的目的，则采用这种模式。</p><p>例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong> 用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。</p><p><strong>主要解决：</strong> 在运行期建立和删除原型。</p><p><strong>何时使用：</strong></p><ol><li>当一个系统应该独立于它的产品创建，构成和表示时。</li><li>当要实例化的类是在运行时刻指定时，例如，通过动态装载。</li><li>为了避免创建一个与产品类层次平行的工厂类层次时。</li><li>当一个类的实例只能有几个不同状态组合中的一种时。建立相应数目的原型并克隆它们可能比每次用合适的状态手工实例化该类更方便一些。</li></ol><p><strong>如何解决：</strong> 利用已有的一个原型对象，快速地生成和原型对象一样的实例。</p><p><strong>关键代码：</strong></p><ol><li>实现克隆操作，在 JAVA 实现 Cloneable 接口，重写 clone()</li><li>原型模式用于隔离类对象的使用者和具体类型（易变类）之间的耦合关系，它要求这些”易变类”拥有稳定的接口。</li></ol><h2 id="两种实现方法：浅拷贝-amp-深拷贝"><a href="#两种实现方法：浅拷贝-amp-深拷贝" class="headerlink" title="两种实现方法：浅拷贝 &amp; 深拷贝"></a>两种实现方法：浅拷贝 &amp; 深拷贝</h2><p>原型模式有两种实现方法，深拷贝和浅拷贝。浅拷贝只会复制对象中基本数据类型数据和引用对象的内存地址，不会递归地复制引用对象，以及引用对象的引用对象……</p><p>而深拷贝得到的是一份完完全全独立的对象。所以，深拷贝比起浅拷贝来说，更加耗时，更加耗内存空间。</p><p>如果要拷贝的对象是不可变对象，浅拷贝共享不可变对象是没问题的，但对于可变对象来说，浅拷贝得到的对象和原始对象会共享部分数据，就有可能出现数据被修改的风险，也就变得复杂多了。</p><blockquote><p>例如，需要从数据库中加载10万条数据并构建散列表索引，操作非常耗时，这种情况下比较推荐使用浅拷贝，否则，没有充分的理由，不要为了一点点的性能提升而使用浅拷贝。</p></blockquote><p>浅拷贝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 浅拷贝</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShallowCopyDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Shallow Copy 未对children做处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@ToString</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">        <span class="keyword">private</span> Children children;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Person <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">            Person clone;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                clone = (Person) <span class="built_in">super</span>.clone();</span><br><span class="line">                <span class="comment">// 未对children做处理</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> clone;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>深拷贝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 深拷贝: 深拷贝得到的是一份完完全全独立的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeepCopyDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * deep copy</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Setter</span></span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@ToString</span></span><br><span class="line">    <span class="meta">@AllArgsConstructor</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">        <span class="keyword">private</span> Children children;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Person <span class="title function_">clone</span><span class="params">()</span> &#123;</span><br><span class="line">            Person clone;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                clone = (Person) <span class="built_in">super</span>.clone();</span><br><span class="line">                <span class="type">Children</span> <span class="variable">children</span> <span class="operator">=</span> clone.getChildren();</span><br><span class="line">                <span class="type">Children</span> <span class="variable">newChildren</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Children</span>(children.getAge());</span><br><span class="line">                clone.setChildren(newChildren);</span><br><span class="line">                <span class="comment">// 未对children做处理</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> clone;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrototypeTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Children children;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 添加一个baby</span></span><br><span class="line">        children = <span class="keyword">new</span> <span class="title class_">Children</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterEach</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeepCopy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// clone father</span></span><br><span class="line">        DeepCopyDemo.<span class="type">Person</span> <span class="variable">z3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeepCopyDemo</span>.Person(<span class="string">&quot;张三&quot;</span>, <span class="number">12</span>, children);</span><br><span class="line">        <span class="comment">// clone father</span></span><br><span class="line">        DeepCopyDemo.<span class="type">Person</span> <span class="variable">z3c</span> <span class="operator">=</span> z3.clone();</span><br><span class="line"></span><br><span class="line">        System.out.println(z3);</span><br><span class="line">        System.out.println(z3c);</span><br><span class="line">        System.out.println(z3 == z3c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改  clone father age</span></span><br><span class="line">        z3c.setAge(<span class="number">80</span>);</span><br><span class="line">        <span class="comment">// 修改  clone father 的 baby age</span></span><br><span class="line">        z3c.getChildren().setAge(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发现 原father的年龄未变，但是baby的年龄随着clone father对baby的修改而变化 【浅拷贝】</span></span><br><span class="line">        System.out.println(z3);</span><br><span class="line">        System.out.println(z3c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testShallowCopy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加一个baby</span></span><br><span class="line">        <span class="type">Children</span> <span class="variable">children</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Children</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加一个father</span></span><br><span class="line">        ShallowCopyDemo.<span class="type">Person</span> <span class="variable">z3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShallowCopyDemo</span>.Person(<span class="string">&quot;张三&quot;</span>, <span class="number">12</span>, children);</span><br><span class="line">        <span class="comment">// clone father</span></span><br><span class="line">        ShallowCopyDemo.<span class="type">Person</span> <span class="variable">z3c</span> <span class="operator">=</span> z3.clone();</span><br><span class="line"></span><br><span class="line">        System.out.println(z3);</span><br><span class="line">        System.out.println(z3c);</span><br><span class="line">        System.out.println(z3 == z3c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改  clone father age</span></span><br><span class="line">        z3c.setAge(<span class="number">80</span>);</span><br><span class="line">        <span class="comment">// 修改  clone father 的 baby age</span></span><br><span class="line">        z3c.getChildren().setAge(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发现 原father的年龄未变，但是baby的年龄随着clone father对baby的修改而变化 【浅拷贝】</span></span><br><span class="line">        System.out.println(z3);</span><br><span class="line">        System.out.println(z3c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ShallowCopyDemo.Person(name=张三, age=12, children=Children(age=3))</span><br><span class="line">ShallowCopyDemo.Person(name=张三, age=12, children=Children(age=3))</span><br><span class="line">false</span><br><span class="line">ShallowCopyDemo.Person(name=张三, age=12, children=Children(age=6))</span><br><span class="line">ShallowCopyDemo.Person(name=张三, age=80, children=Children(age=6))</span><br><span class="line"></span><br><span class="line">----------------------------</span><br><span class="line"></span><br><span class="line">DeepCopyDemo.Person(name=张三, age=12, children=Children(age=3))</span><br><span class="line">DeepCopyDemo.Person(name=张三, age=12, children=Children(age=3))</span><br><span class="line">false</span><br><span class="line">DeepCopyDemo.Person(name=张三, age=12, children=Children(age=3))</span><br><span class="line">DeepCopyDemo.Person(name=张三, age=80, children=Children(age=6))</span><br><span class="line"></span><br><span class="line">----------------------------</span><br></pre></td></tr></table></figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote><ul><li><a href="https://www.runoob.com/design-pattern">菜鸟编程</a></li><li>设计模式之美：王争</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 创建型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象工厂模式</title>
      <link href="/9b7d6e62.html"/>
      <url>/9b7d6e62.html</url>
      
        <content type="html"><![CDATA[<h1 id="抽象工厂模式（创建型）"><a href="#抽象工厂模式（创建型）" class="headerlink" title="抽象工厂模式（创建型）"></a>抽象工厂模式（创建型）</h1><p>抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。<br>这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>在抽象工厂模式中，接口是负责创建一个相关对象的工厂，不需要显式指定它们的类。每个生成的工厂都能按照工厂模式提供对象。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong> 提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。</p><p><strong>主要解决：</strong> 主要解决接口选择的问题。</p><p><strong>何时使用：</strong> 系统的产品有多于一个的产品族，而系统只消费其中某一族的产品。</p><p><strong>如何解决：</strong> 在一个产品族里面，定义多个产品。</p><p><strong>关键代码：</strong> 在一个工厂里聚合多个同类产品。</p><h2 id="场景-汽车工厂"><a href="#场景-汽车工厂" class="headerlink" title="场景 - 汽车工厂"></a>场景 - 汽车工厂</h2><p>汽车工厂（<code>CarFactory</code>）分为燃油汽车（<code>OilCar </code>）和电动汽车工厂（<code>ElectricCar</code>），现有两个车企比亚迪和大众。</p><p>比亚迪汽车工厂（<code>BydCarFactory</code>）可以生产比亚迪燃油汽车（<code>BydOilCar</code>）和比亚迪电动汽车（<code>BydElectricCar</code>），</p><p>大众汽车工厂（<code>VmCarFactory</code>）可以生产大众燃油汽车（<code>VmOilCar</code>）和大众电动汽车（<code>VmElectricCar</code>）。</p><p>汽车工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 汽车工厂</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 抽象工厂可以让一个工厂负责创建多个不同类型的工厂</span></span><br><span class="line"><span class="comment"> * 而不是只创建一种 parser 对象。</span></span><br><span class="line"><span class="comment"> * 这样就可以有效地减少工厂类的个数。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 燃油汽车工厂</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    OilCar <span class="title function_">buildOilCar</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建 电动汽车工厂</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ElectricCar <span class="title function_">buildElectricCar</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 燃油汽车</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OilCar</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 电动汽车</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ElectricCar</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 充电</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">charge</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比亚迪汽车工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 比亚迪汽车工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BydCarFactory</span> <span class="keyword">implements</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> OilCar <span class="title function_">buildOilCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BydOilCar</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ElectricCar <span class="title function_">buildElectricCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BydElectricCar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 比亚迪燃油汽车</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BydOilCar</span> <span class="keyword">implements</span> <span class="title class_">OilCar</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 比亚迪电动汽车</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BydElectricCar</span> <span class="keyword">implements</span> <span class="title class_">ElectricCar</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">charge</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;比亚迪电动汽车正在充电&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大众汽车工厂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 大众汽车工厂</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VmCarFactory</span> <span class="keyword">implements</span> <span class="title class_">CarFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> OilCar <span class="title function_">buildOilCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BydOilCar</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ElectricCar <span class="title function_">buildElectricCar</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">VmElectricCar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 大众燃油汽车</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VmOilCar</span> <span class="keyword">implements</span> <span class="title class_">OilCar</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 大众电动汽车</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VmElectricCar</span> <span class="keyword">implements</span> <span class="title class_">ElectricCar</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">charge</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;大众电动汽车正在充电&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBuild</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CarFactory</span> <span class="variable">carFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BydCarFactory</span>();</span><br><span class="line">        <span class="type">ElectricCar</span> <span class="variable">electricCar</span> <span class="operator">=</span> carFactory.buildElectricCar();</span><br><span class="line">        <span class="type">OilCar</span> <span class="variable">oilCar</span> <span class="operator">=</span> carFactory.buildOilCar();</span><br><span class="line"></span><br><span class="line">        electricCar.charge();</span><br><span class="line">        System.out.println(oilCar.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="判断要不要使用工厂模式的最本质的参考标准"><a href="#判断要不要使用工厂模式的最本质的参考标准" class="headerlink" title="判断要不要使用工厂模式的最本质的参考标准"></a>判断要不要使用工厂模式的最本质的参考标准</h3><ol><li>封装变化：创建逻辑有可能变化，封装成工厂类之后，创建逻辑的变更对调用者透明。</li><li>代码复用：创建代码抽离到独立的工厂类之后可以复用。</li><li>隔离复杂性：封装复杂的创建逻辑，调用者无需了解如何创建对象。</li><li>控制复杂度：将创建代码抽离出来，让原本的函数或类职责更单一，代码更简洁。</li></ol><h3 id="工厂模式和-DI-容器有何区别？"><a href="#工厂模式和-DI-容器有何区别？" class="headerlink" title="工厂模式和 DI 容器有何区别？"></a>工厂模式和 DI 容器有何区别？</h3><p>实际上，DI 容器底层最基本的设计思路就是基于工厂模式的。<br>DI容器相当于一个大的工厂类，负责在程序启动的时候，根据配置（要创建哪些类对象，每个类对象的创建需要依赖哪些其他类对象）事先创建好对象。<br>当应用程序需要使用某个类对象的时候，直接从容器中获取即可。正是因为它持有一堆对象，所以这个框架才被称为“容器”。</p><p>DI容器处理的是更大的对象创建工程。工厂模式中，一个工厂类只负责某个类对象或者某一组相关类对象（继承自同一抽象类或者接口的子类）的创建，<br>而DI容器负责的是整个应用中所有类对象的创建。</p><h3 id="DI-容器的核心功能有哪些"><a href="#DI-容器的核心功能有哪些" class="headerlink" title="DI 容器的核心功能有哪些"></a>DI 容器的核心功能有哪些</h3><p>一个简单的 DI 容器的核心功能一般有三个：配置解析、对象创建和对象生命周期管理。</p><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote><ul><li><a href="https://www.runoob.com/design-pattern">菜鸟编程</a></li><li>设计模式之美：王争</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 创建型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工厂模式</title>
      <link href="/54788f73.html"/>
      <url>/54788f73.html</url>
      
        <content type="html"><![CDATA[<h1 id="工厂模式（创建型）"><a href="#工厂模式（创建型）" class="headerlink" title="工厂模式（创建型）"></a>工厂模式（创建型）</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong> 定义一个创建对象的接口，让其子类自己决定实例化哪一个工厂类，工厂模式使其创建过程延迟到子类进行。</p><p><strong>主要解决：</strong> 主要解决接口选择的问题。</p><p><strong>何时使用：</strong> 我们明确地计划不同条件下创建不同实例时。</p><p><strong>如何解决：</strong> 让其子类实现工厂接口，返回的也是一个抽象的产品。</p><p><strong>关键代码：</strong> 创建过程在其子类执行。</p><h2 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h2><h3 id="场景-兴趣班"><a href="#场景-兴趣班" class="headerlink" title="场景 - 兴趣班"></a>场景 - 兴趣班</h3><p>家长来到兴趣班中心，想为自己的孩子选一个兴趣（<code>InterestClass</code>）培训，<br>目前有舞蹈兴趣班（<code>DanceInterestClass</code>）和钢琴兴趣班（<code>PianoInterestClass</code>），<br>家长拿到指导说明（<code>InterestClassEnum</code>），最后家长通过客服（<code>InterestSimpleFactory</code>）为自己的孩子成功报了一个兴趣班。</p><p>兴趣：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.creational.factory.model.interest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 兴趣班</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterestClass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 报名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">signUp</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>舞蹈兴趣班</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.creational.factory.model.interest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 舞蹈兴趣班</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DanceInterestClass</span> <span class="keyword">implements</span> <span class="title class_">InterestClass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">signUp</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sign Up Dance Interest Class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>钢琴兴趣班</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.creational.factory.model.interest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 钢琴兴趣班</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PianoInterestClass</span> <span class="keyword">implements</span> <span class="title class_">InterestClass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">signUp</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Sign Up Piano Interest Class&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>指导说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.creational.factory.model.interest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 学校名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">InterestClassEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    DANCE(<span class="string">&quot;舞蹈兴趣班&quot;</span>),</span><br><span class="line">    PIANO(<span class="string">&quot;钢琴兴趣班&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客服</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.creational.factory.simple_factory.interest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.luis.creational.factory.model.interest.DanceInterestClass;</span><br><span class="line"><span class="keyword">import</span> cn.luis.creational.factory.model.interest.InterestClass;</span><br><span class="line"><span class="keyword">import</span> cn.luis.creational.factory.model.interest.InterestClassEnum;</span><br><span class="line"><span class="keyword">import</span> cn.luis.creational.factory.model.interest.PianoInterestClass;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单工厂：Interest</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterestSimpleFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> InterestClass <span class="title function_">build</span><span class="params">(InterestClassEnum interestClassEnum)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (interestClassEnum == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (InterestClassEnum.DANCE == interestClassEnum) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DanceInterestClass</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (InterestClassEnum.PIANO == interestClassEnum) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PianoInterestClass</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类（家长）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSimpleFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">InterestClass</span> <span class="variable">interestClass</span> <span class="operator">=</span> InterestSimpleFactory.build(InterestClassEnum.DANCE);</span><br><span class="line">        <span class="type">InterestClass</span> <span class="variable">interestClass2</span> <span class="operator">=</span> InterestSimpleFactory.build(InterestClassEnum.DANCE);</span><br><span class="line"></span><br><span class="line">        interestClass.signUp();</span><br><span class="line">        interestClass2.signUp();</span><br><span class="line"></span><br><span class="line">        System.out.println(interestClass.hashCode());</span><br><span class="line">        System.out.println(interestClass2.hashCode());</span><br><span class="line">        Assertions.assertNotEquals(interestClass, interestClass2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简单工厂配合单例模式"><a href="#简单工厂配合单例模式" class="headerlink" title="简单工厂配合单例模式"></a>简单工厂配合单例模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 简单工厂 + 单例 配合使用，cacheDbConnections存储的对象是单例，被全局享用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DbSingletonSimpleFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;DbConnectionEnum, DbConnection&gt; cacheDbConnections = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(DbConnectionEnum.values().length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据不同参数构造出不同的对象，并且相同参数的对象只被构造一次</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        cacheDbConnections.put(DbConnectionEnum.ONE, <span class="keyword">new</span> <span class="title class_">DbOneConnection</span>());</span><br><span class="line">        cacheDbConnections.put(DbConnectionEnum.TWO, <span class="keyword">new</span> <span class="title class_">DbTwoConnection</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DbConnection <span class="title function_">build</span><span class="params">(DbConnectionEnum dbConnectionEnum)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dbConnectionEnum == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cacheDbConnections.get(dbConnectionEnum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面用到的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据库连接接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DbConnection</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DbOneConnection</span> <span class="keyword">implements</span> <span class="title class_">DbConnection</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DbTwoConnection</span> <span class="keyword">implements</span> <span class="title class_">DbConnection</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">DbConnectionEnum</span> &#123;</span><br><span class="line">    ONE,</span><br><span class="line">    TWO</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSingletonSimpleFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DbConnection</span> <span class="variable">db1</span> <span class="operator">=</span> DbSingletonSimpleFactory.build(DbConnectionEnum.ONE);</span><br><span class="line">        <span class="type">DbConnection</span> <span class="variable">db2</span> <span class="operator">=</span> DbSingletonSimpleFactory.build(DbConnectionEnum.ONE);</span><br><span class="line"></span><br><span class="line">        System.out.println(db1.hashCode());</span><br><span class="line">        System.out.println(db2.hashCode());</span><br><span class="line">        Assertions.assertEquals(db1, db2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h2><p>如果对象不可复用，那工厂类每次都要返回不同的对象。如果我们使用简单工厂模式来实现，就只能选择第一种包含 if<br>分支逻辑的实现方式。<br>如果我们还想避免烦人的 if-else 分支逻辑，这个时候，我们就推荐使用工厂方法模式。</p><h3 id="场景-兴趣班-1"><a href="#场景-兴趣班-1" class="headerlink" title="场景 - 兴趣班"></a>场景 - 兴趣班</h3><blockquote><p>部分代码在简单工厂</p></blockquote><p>多个兴趣班机构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 兴趣班工厂（相当于多个兴趣班机构）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterestClassFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    InterestClass <span class="title function_">build</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跳舞兴趣班工厂（可构建跳舞兴趣班）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跳舞兴趣班工厂（可构建跳舞兴趣班）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DanceInterestClassFactory</span> <span class="keyword">implements</span> <span class="title class_">InterestClassFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> DanceInterestClass <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DanceInterestClass</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>钢琴兴趣班工厂（可构建钢琴兴趣班）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 钢琴兴趣班工厂（可构建钢琴兴趣班）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PianoInterestClassFactory</span> <span class="keyword">implements</span> <span class="title class_">InterestClassFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PianoInterestClass <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PianoInterestClass</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>兴趣班工厂指导说明（管理各个兴趣班的专属工厂）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 管理各个兴趣班的专属factory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">InterestClassFactoryEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    DANCE_FACTORY,</span><br><span class="line">    PIANO_FACTORY</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总客服</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂方法 （总客服）</span></span><br><span class="line"><span class="comment"> * 优点：比起简单工厂模式更加符合开闭原则。</span></span><br><span class="line"><span class="comment"> * 缺点：类爆炸</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FactoryMethod</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;InterestClassFactoryEnum, InterestClassFactory&gt; cacheDbConnections = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(InterestClassFactoryEnum.values().length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据不同参数构造出不同的对象，并且相同参数的对象只被构造一次</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        cacheDbConnections.put(InterestClassFactoryEnum.DANCE_FACTORY, <span class="keyword">new</span> <span class="title class_">DanceInterestClassFactory</span>());</span><br><span class="line">        cacheDbConnections.put(InterestClassFactoryEnum.PIANO_FACTORY, <span class="keyword">new</span> <span class="title class_">PianoInterestClassFactory</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> InterestClassFactory <span class="title function_">buildFactory</span><span class="params">(InterestClassFactoryEnum interestClassFactoryEnum)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (interestClassFactoryEnum == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cacheDbConnections.get(interestClassFactoryEnum);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>家长</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBuild</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">InterestClassFactory</span> <span class="variable">factory</span> <span class="operator">=</span> FactoryMethod.buildFactory(InterestClassFactoryEnum.DANCE_FACTORY);</span><br><span class="line">        <span class="type">InterestClass</span> <span class="variable">interestClass</span> <span class="operator">=</span> factory.build();</span><br><span class="line">        interestClass.signUp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote><ul><li><a href="https://www.runoob.com/design-pattern">菜鸟编程</a></li><li>设计模式之美：王争</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 创建型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>建造者模式</title>
      <link href="/fe816c3c.html"/>
      <url>/fe816c3c.html</url>
      
        <content type="html"><![CDATA[<h1 id="建造者模式（创建型）"><a href="#建造者模式（创建型）" class="headerlink" title="建造者模式（创建型）"></a>建造者模式（创建型）</h1><p>建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>意图：</strong> 将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</p><p><strong>主要解决：</strong> 主要解决在软件系统中，有时候面临着”一个复杂对象”的创建工作，其通常由各个部分的子对象用一定的算法构成；<br>由于需求的变化，这个复杂对象的各个部分经常面临着剧烈的变化，但是将它们组合在一起的算法却相对稳定。</p><p><strong>何时使用：</strong> 一些基本部件不会变，而其组合经常变化的时候。</p><p><strong>如何解决：</strong> 将变与不变分离开。</p><p><strong>关键代码：</strong> 建造者：创建和提供实例，导演：管理建造出来的实例的依赖关系。</p><h2 id="普通方式构建复杂对象"><a href="#普通方式构建复杂对象" class="headerlink" title="普通方式构建复杂对象"></a>普通方式构建复杂对象</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.creational.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PoolConfig</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_MAX_TOTAL</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_MAX_IDLE</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_MIN_IDLE</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">maxTotal</span> <span class="operator">=</span> DEFAULT_MAX_TOTAL;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">maxIdle</span> <span class="operator">=</span> DEFAULT_MAX_IDLE;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">minIdle</span> <span class="operator">=</span> DEFAULT_MIN_IDLE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PoolConfig</span><span class="params">(String name, Integer maxTotal, Integer maxIdle, Integer minIdle)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(name)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;name should not be empty.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="keyword">if</span> (maxTotal != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (maxTotal &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;maxTotal should be positive.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.maxTotal = maxTotal;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maxIdle != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (maxIdle &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;maxIdle should not be negative.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.maxIdle = maxIdle;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (minIdle != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (minIdle &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;minIdle should not be negative.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.minIdle = minIdle;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...省略getter方法...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用建造者模式"><a href="#使用建造者模式" class="headerlink" title="使用建造者模式"></a>使用建造者模式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.creational.builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> luis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> * 资源池</span></span><br><span class="line"><span class="comment"> * 2022/4/3 19:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PoolConfigPro</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> maxTotal;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> maxIdle;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> minIdle;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">PoolConfigPro</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = builder.name;</span><br><span class="line">        <span class="built_in">this</span>.maxTotal = builder.maxTotal;</span><br><span class="line">        <span class="built_in">this</span>.maxIdle = builder.maxIdle;</span><br><span class="line">        <span class="built_in">this</span>.minIdle = builder.minIdle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 我们将Builder类设计成了PoolConfigPro的内部类。</span></span><br><span class="line"><span class="comment">     * 我们也可以将Builder类设计成独立的非内部类PoolConfigProBuilder。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_MAX_TOTAL</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_MAX_IDLE</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_MIN_IDLE</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">maxTotal</span> <span class="operator">=</span> DEFAULT_MAX_TOTAL;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">maxIdle</span> <span class="operator">=</span> DEFAULT_MAX_IDLE;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> <span class="variable">minIdle</span> <span class="operator">=</span> DEFAULT_MIN_IDLE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> PoolConfigPro <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="comment">// 校验逻辑放到这里来做，包括必填项校验、依赖关系校验、约束条件校验等</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isBlank(name)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (maxIdle &gt; maxTotal) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (minIdle &gt; maxTotal || minIdle &gt; maxIdle) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PoolConfigPro</span>(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isBlank(name)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setMaxTotal</span><span class="params">(<span class="type">int</span> maxTotal)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (maxTotal &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.maxTotal = maxTotal;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setMaxIdle</span><span class="params">(<span class="type">int</span> maxIdle)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (maxIdle &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.maxIdle = maxIdle;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">setMinIdle</span><span class="params">(<span class="type">int</span> minIdle)</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (minIdle &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.minIdle = minIdle;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote><ul><li><a href="https://www.runoob.com/design-pattern">菜鸟编程</a></li><li>设计模式之美：王争</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 创建型模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/f1601c3e.html"/>
      <url>/f1601c3e.html</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式（创建型）"><a href="#单例模式（创建型）" class="headerlink" title="单例模式（创建型）"></a>单例模式（创建型）</h1><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。</p><p>这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ol><li><p>处理资源访问冲突</p></li><li><p>表示全局唯一类</p><ol><li>配置信息类</li><li>唯一递增 ID 号码生成器</li></ol></li></ol><h3 id="实现一个单例"><a href="#实现一个单例" class="headerlink" title="实现一个单例"></a>实现一个单例</h3><p><strong>意图：</strong> 保证一个类仅有一个实例，并提供一个访问它的全局访问点。</p><p><strong>主要解决：</strong> 一个全局使用的类频繁地创建与销毁或者创建的一个对象需要消耗的资源过多，比如 I&#x2F;O 与数据库的连接等。</p><p><strong>何时使用：</strong> 当您想控制实例数目，节省系统资源的时候。</p><p><strong>如何解决：</strong> 判断系统是否已经有这个单例，如果有则返回，如果没有则创建。</p><p><strong>关键代码：</strong> 构造函数是私有的 （避免外部通过 new 创建实例）。</p><p><strong>考虑要点</strong>： 对象创建时的线程安全问题、是否支持延迟加载、getInstance() 性能是否高（是否加锁）</p><h3 id="单例模式实现方式"><a href="#单例模式实现方式" class="headerlink" title="单例模式实现方式"></a>单例模式实现方式</h3><h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><p>饿汉式的实现方式比较简单。在类加载的时候，instance 静态实例就已经创建并初始化好了。</p><p>所以，instance实例的创建过程是线程安全的。不过，这样的实现方式不支持延迟加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> luis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> * 如何设计一个单例模式：饿汉式</span></span><br><span class="line"><span class="comment"> * 2022/3/24 22:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IdGeneratorHungry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">IdGeneratorHungry</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IdGeneratorHungry</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicLong</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(<span class="number">0L</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">IdGeneratorHungry</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IdGeneratorHungry <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h4><p>getInstance() 这个方法加了一把大锁（synchronzed），导致这个函数的并发度很低。</p><p>量化一下的话，并发度是1，也就相当于串行操作了。而这个函数是在单例使用期间，一直会被调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> luis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> * 如何设计一个单例模式: 懒汉式</span></span><br><span class="line"><span class="comment"> * 2022/3/24 22:04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IdGeneratorLazy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> IdGeneratorLazy instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicLong</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(<span class="number">0L</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">IdGeneratorLazy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IdGeneratorLazy <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 类锁</span></span><br><span class="line">        <span class="keyword">synchronized</span> (IdGeneratorLazy.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 测试线程安全问题</span></span><br><span class="line">                    Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                instance = <span class="keyword">new</span> <span class="title class_">IdGeneratorLazy</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双重检测"><a href="#双重检测" class="headerlink" title="双重检测"></a>双重检测</h4><p>饿汉式不支持延迟加载，懒汉式有性能问题，不支持高并发。双重检测是既支持延迟加载、又支持高并发的单例实现方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> luis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> * 如何设计一个单例模式：双重检查锁机制</span></span><br><span class="line"><span class="comment"> * 2022/3/24 22:20</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IdGeneratorDoubleCheckLock</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为什么添加volatile？</span></span><br><span class="line"><span class="comment">     * 因为：指令重排序，可能会导致 IdGenerator 对象被 new 出来，并且赋值给 instance 之后，</span></span><br><span class="line"><span class="comment">     * 还没来得及初始化（执行构造函数中的代码逻辑），就被另一个线程使用了。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> IdGeneratorDoubleCheckLock instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicLong</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(<span class="number">0L</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单例模式要素: 构造函数私有 且保证线程安全</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">IdGeneratorDoubleCheckLock</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IdGeneratorDoubleCheckLock <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 此处为类级别的锁,只有第一次实例化进入了锁代码块</span></span><br><span class="line">            <span class="keyword">synchronized</span> (IdGeneratorDoubleCheckLock.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">IdGeneratorDoubleCheckLock</span>();</span><br><span class="line">                    <span class="comment">// 永远都是new,导致instance一直都是null</span></span><br><span class="line">                    <span class="comment">// return new IdGeneratorDoubleCheckLock();</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><p>SingletonHolder 是一个静态内部类，当外部类 IdGenerator 被加载的时候，并不会创建 SingletonHolder 实例对象。</p><p>只有当调用getInstance()方法时，SingletonHolder 才会被加载，这个时候才会创建 instance。</p><p>instance 的唯一性、创建过程的线程安全性，都由 JVM来保证。所以，这种实现方法既保证了线程安全，又能做到延迟加载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> luis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> * 如何设计一个单例模式：静态内部类</span></span><br><span class="line"><span class="comment"> * 2022/3/24 22:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IdGeneratorStaticInnerClass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicLong</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(<span class="number">0L</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">IdGeneratorStaticInnerClass</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SingletonHolder 是一个静态内部类，</span></span><br><span class="line"><span class="comment">     * 当外部类 IdGenerator 被加载的时候，并不会创建 SingletonHolder 实例对象。</span></span><br><span class="line"><span class="comment">     * 只有当调用 getInstance() 方法时，SingletonHolder 才会被加载，这个时候才会创建 instance。</span></span><br><span class="line"><span class="comment">     * instance 的唯一性、创建过程的线程安全性，都由 JVM 来保证。</span></span><br><span class="line"><span class="comment">     * 所以，这种实现方法既保证了线程安全，又能做到延迟加载。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IdGeneratorStaticInnerClass <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">IdGeneratorStaticInnerClass</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IdGeneratorStaticInnerClass</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>通过 Java 枚举类型本身的特性，保证了实例创建的线程安全性和实例的唯一性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.singleton;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> luis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> * 如何设计一个单例模式：枚举</span></span><br><span class="line"><span class="comment"> * 2022/3/24 22:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">IdGeneratorEnum</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过 Java 枚举类型本身的特性，保证了实例创建的线程安全性和实例的唯一性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    INSTANCE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicLong</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(<span class="number">0L</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id.getAndIncrement();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="懒加载错误案例参考"><a href="#懒加载错误案例参考" class="headerlink" title="懒加载错误案例参考"></a>懒加载错误案例参考</h3><h4 id="案例一：线程安全问题"><a href="#案例一：线程安全问题" class="headerlink" title="案例一：线程安全问题"></a>案例一：线程安全问题</h4><p>getInstance（）方法或方法内没有锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.singleton.lazy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> luis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> * 单例模式懒加载demo：有线程安全问题</span></span><br><span class="line"><span class="comment"> * 2022/3/26 0:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IdGeneratorLazyThreadNotSafe</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> IdGeneratorLazyThreadNotSafe instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicLong</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(<span class="number">0L</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单例模式要素: 构造函数私有 且保证线程安全</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">IdGeneratorLazyThreadNotSafe</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> IdGeneratorLazyThreadNotSafe <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 有线程安全问题</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 方便测试线程安全问题 (锁竞争更激烈，导致很多线程都new了对象)</span></span><br><span class="line">                Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">IdGeneratorLazyThreadNotSafe</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="案例二：性能问题"><a href="#案例二：性能问题" class="headerlink" title="案例二：性能问题"></a>案例二：性能问题</h4><p>getInstance()方法上加锁</p><blockquote><p>阿里巴巴Java开发手册(黄山版)：高并发时，同步调用应该去考量锁的性能损耗。<br>能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.luis.singleton.lazy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> luis</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> * 单例模式懒加载demo：并发低</span></span><br><span class="line"><span class="comment"> * 2022/3/26 0:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IdGeneratorLazyLowCurrency</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> IdGeneratorLazyLowCurrency instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicLong</span> <span class="variable">id</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicLong</span>(<span class="number">0L</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 单例模式要素: 构造函数私有 且保证线程安全</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">IdGeneratorLazyLowCurrency</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> IdGeneratorLazyLowCurrency <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">IdGeneratorLazyLowCurrency</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id.incrementAndGet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单例模式的缺点"><a href="#单例模式的缺点" class="headerlink" title="单例模式的缺点"></a>单例模式的缺点</h3><ul><li>单例对 OOP 特性的支持不友好</li><li>单例会隐藏类之间的依赖关系</li><li>单例对代码的扩展性不友好</li><li>单例对代码的可测试性不友好</li><li>单例不支持有参数的构造函数</li></ul><h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><h4 id="1-如何理解单例模式的唯一性？"><a href="#1-如何理解单例模式的唯一性？" class="headerlink" title="1. 如何理解单例模式的唯一性？"></a>1. 如何理解单例模式的唯一性？</h4><p>单例类中对象的唯一性的作用范围是“进程唯一”的。“进程唯一”指的是进程内唯一，进程间不唯一；“线程唯一”指的是线程内唯一，线程间可以不唯一。</p><p>实际上，“进程唯一”就意味着线程内、线程间都唯一，这也是“进程唯一”和“线程唯一”的区别之处。“集群唯一”指的是进程内唯一、进程间也唯一。</p><h4 id="2-如何实现线程唯一的单例？"><a href="#2-如何实现线程唯一的单例？" class="headerlink" title="2. 如何实现线程唯一的单例？"></a>2. 如何实现线程唯一的单例？</h4><p>我们通过一个 HashMap 来存储对象，其中 key 是线程 ID，value<br>是对象。这样我们就可以做到，不同的线程对应不同的对象，同一个线程只能对应一个对象。<br>实际上，Java 语言本身提供了 ThreadLocal并发工具类，可以更加轻松地实现线程唯一单例。</p><h4 id="3-如何实现集群环境下的单例？"><a href="#3-如何实现集群环境下的单例？" class="headerlink" title="3. 如何实现集群环境下的单例？"></a>3. 如何实现集群环境下的单例？</h4><p>我们需要把这个单例对象序列化并存储到外部共享存储区（比如文件）。</p><p>进程在使用这个单例对象的时候，需要先从外部共享存储区中将它读取到内存，并反序列化成对象，然后再使用，使用完成之后还需要再存储回外部共享存储区。</p><p>为了保证任何时刻在进程间都只有一份对象存在，一个进程在获取到对象之后，需要对对象加锁，避免其他进程再将其获取。</p><p>在进程使用完这个对象之后，需要显式地将对象从内存中删除，并且释放对对象的加锁。</p><h4 id="4-如何实现一个多例模式？"><a href="#4-如何实现一个多例模式？" class="headerlink" title="4. 如何实现一个多例模式？"></a>4. 如何实现一个多例模式？</h4><p>“单例”指的是一个类只能创建一个对象。对应地，“多例”指的就是一个类可以创建多个对象，但是个数是有限制的，比如只能创建 3 个对象。</p><p>多例的实现也比较简单，通过一个 Map 来存储对象类型和对象之间的对应关系，来控制对象的个数。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>使用饿汉式创建：枚举类最简单</li><li>使用懒汉式创建：静态内部类最简单</li></ul><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><blockquote><ul><li><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">菜鸟编程</a></li><li>设计模式之美：王争</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 创建型模式 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
